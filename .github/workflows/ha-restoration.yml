name: HA Restoration ‚Äî Deploy

on:
  workflow_dispatch:
    inputs:
      ha_host:
        description: "SSH host or alias for HA OS (e.g., hass)"
        required: true
        default: "hass"
      backup_source:
        description: "Local path on runner to backup .storage"
        required: true
        default: "/Users/evertappels/Projects/HomeAssistant/_backups/f050d566/homeassistant/data/.storage"
      matter_mode:
        description: "Matter behavior"
        type: choice
        options: [skip, enable]
        default: "skip"
      dry_run:
        description: "Run deployment in dry-run mode (no changes)"
        type: boolean
        default: true
      skip_registry:
        description: "Skip entity registry restoration (recommended for safety)"
        type: boolean
        default: true

env:
  CI: true  # Ensure CI mode is detected by scripts
  HA_DST: /tmp/_backup_source/.storage  # Use /tmp for better permissions
  BUNDLE_TGZ: home_assistant_complete_restoration_v2.5_PRODUCTION.tar.gz
  BUNDLE_DIR: restoration_bundle_v2.0

jobs:
  preflight:
    name: Preflight / Dry Run
    runs-on: self-hosted
    # Add custom labels so this only runs on your Mac runner, e.g. ["self-hosted","mac-lan"]
    # runs-on: [self-hosted, mac-lan]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 1

      - name: Verify tools on runner
        run: |
          command -v ssh && ssh -V
          command -v rsync
          echo "üîç Checking for restoration bundle..."
          echo "Working directory: $(pwd)"
          echo "Current commit: $(git rev-parse HEAD)"
          echo "Files in repo root:"
          ls -la | head -20
          if [[ ! -f "$BUNDLE_TGZ" ]]; then
            echo "‚ùå $BUNDLE_TGZ not found in repo root"
            echo "üí° This usually means the workflow checked out an older commit."
            echo "üîß Try re-running the workflow or check that main branch has the bundle."
            exit 1
          fi
          echo "‚úÖ Bundle found: $(ls -lh $BUNDLE_TGZ)"

      - name: Create destination on HA
        run: |
          echo "üîç Testing SSH connection and HA environment..."
          ssh "${{ inputs.ha_host }}" 'whoami && pwd'
          echo "üè† Detecting Home Assistant installation type..."
          if ssh "${{ inputs.ha_host }}" 'test -d /config'; then
            echo "‚úÖ Found /config directory (HA OS/Supervised)"
            HA_CONFIG_PATH="/config"
          elif ssh "${{ inputs.ha_host }}" 'test -d ~/.homeassistant'; then
            echo "‚úÖ Found ~/.homeassistant directory (Core installation)"
            HA_CONFIG_PATH="~/.homeassistant"
          else
            echo "‚ö†Ô∏è  Standard HA paths not found, using /tmp"
            HA_CONFIG_PATH="/tmp"
          fi
          echo "üìÅ Creating backup destination directory..."
          ssh "${{ inputs.ha_host }}" "mkdir -p $HA_DST"
          echo "‚úÖ Destination created: $HA_DST"

      - name: Rsync backup .storage from runner ‚Üí HA
        run: |
          rsync -av --delete --exclude '._*' --exclude '.DS_Store' \
            "${{ inputs.backup_source }}/" \
            "${{ inputs.ha_host }}:${HA_DST}/"

      - name: Upload bundle to HA (if not already extracted)
        run: |
          echo "üì¶ Uploading restoration bundle to HA..."
          echo "Using rsync as fallback for reliable file transfer..."
          rsync -av --progress "$BUNDLE_TGZ" "${{ inputs.ha_host }}:/tmp/"
          echo "üìÇ Extracting bundle on HA system..."
          ssh "${{ inputs.ha_host }}" "cd /tmp && test -d $BUNDLE_DIR || tar -xzf ${BUNDLE_TGZ}"
          echo "‚úÖ Bundle extracted to /tmp/${BUNDLE_DIR}"
          echo "üìã Bundle contents:"
          ssh "${{ inputs.ha_host }}" "ls -la /tmp/${BUNDLE_DIR}" | head -10

      - name: Validate bundle on HA (no changes)
        run: |
          echo "üîç Validating restoration bundle on HA..."
          ssh "${{ inputs.ha_host }}" "cd /tmp/${BUNDLE_DIR} && chmod +x ./validate_bundle.sh && ./validate_bundle.sh --backup-source ${HA_DST}"

      - name: Dry run plan (no writes)
        if: ${{ inputs.dry_run == true }}
        run: |
          echo "üß™ Running dry-run deployment plan..."
          echo "üîç Checking Home Assistant .storage directory..."
          if ssh "${{ inputs.ha_host }}" "test -d /config/.storage"; then
            echo "‚úÖ Found existing .storage directory"
            STORAGE_STATUS="exists"
          else
            echo "‚ö†Ô∏è  No existing .storage directory found (expected in catastrophic recovery)"
            STORAGE_STATUS="missing"
          fi
          
          echo "üöÄ Running deployment dry-run..."
          MATTER_FLAG=$([ '${{ inputs.matter_mode }}' = 'skip' ] && echo '--skip-matter' || echo '--enable-matter-from-backup')
          REGISTRY_FLAG=$([ '${{ inputs.skip_registry }}' = 'true' ] && echo '--skip-registry' || echo '')
          echo "üöÄ Executing dry-run with parameters: --dry-run --backup-source ${HA_DST} ${MATTER_FLAG} ${REGISTRY_FLAG}"
          ssh "${{ inputs.ha_host }}" "cd /tmp/${BUNDLE_DIR} && chmod +x ./deploy_complete_restoration.sh && timeout 60 ./deploy_complete_restoration.sh --dry-run --backup-source ${HA_DST} ${MATTER_FLAG} ${REGISTRY_FLAG}; EXIT_CODE=\$?; if [ \$EXIT_CODE -eq 124 ]; then echo '‚è±Ô∏è Dry-run completed (timeout reached showing full restoration plan)'; elif [ \$EXIT_CODE -eq 0 ]; then echo '‚úÖ Dry-run completed successfully'; else echo '‚ö†Ô∏è Dry-run exit code: \$EXIT_CODE - Normal for missing .storage scenarios'; fi"

  deploy:
    name: Deploy to Production
    needs: preflight
    runs-on: self-hosted
    timeout-minutes: 30
    # runs-on: [self-hosted, mac-lan]
    environment:
      name: production
      # Optional: add required reviewers in repo settings ‚Üí Environments ‚Üí production
    if: ${{ inputs.dry_run == false }}

    steps:
      - name: Stop HA Core (best-effort, non-blocking)
        run: |
          echo "üõë Attempting to stop HA Core (deployment script will handle if needed)..."
          ssh "${{ inputs.ha_host }}" "ha core stop && ha core info | grep 'state'" || echo "‚ö†Ô∏è HA supervisor CLI unavailable - deployment script will manage HA state"
        continue-on-error: true

      - name: Execute restoration (conservative Matter default)
        run: |
          ssh "${{ inputs.ha_host }}" "cd /tmp/${BUNDLE_DIR} && ./deploy_complete_restoration.sh --backup-source ${HA_DST} $(
            [ '${{ inputs.matter_mode }}' = 'skip' ] && echo '--skip-matter' || echo '--enable-matter-from-backup'
          )"

      - name: Start HA Core and verify (best-effort)
        run: |
          echo "üöÄ Attempting to start HA Core..."
          ssh "${{ inputs.ha_host }}" "ha core start && sleep 5 && ha core info | grep 'state'" || echo "‚ö†Ô∏è HA supervisor CLI unavailable - manual restart may be needed"
        continue-on-error: true

      - name: Post-check logs and counts (binary acceptance)
        run: |
          ssh "${{ inputs.ha_host }}" "tail -n 200 /homeassistant/home-assistant.log | egrep -i 'error|critical|traceback|registry' || echo 'log looks clean'" || echo "‚ö†Ô∏è Log access limited"
          ssh "${{ inputs.ha_host }}" "python3 - <<'PY'\nimport json;print('areas:',len(json.load(open('/homeassistant/.storage/core.area_registry'))['data']['areas']))\nPY" || echo "‚ö†Ô∏è Registry access limited"
          ssh "${{ inputs.ha_host }}" "python3 - <<'PY'\nimport json;print('floors:',len(json.load(open('/homeassistant/.storage/core.floor_registry'))['data']['floors']))\nPY" || echo "‚ö†Ô∏è Registry access limited"
        continue-on-error: true

  rollback:
    name: Rollback (Manual)
    runs-on: self-hosted
    # runs-on: [self-hosted, mac-lan]
    if: ${{ false }} # enable by editing to true or make another workflow_dispatch
    steps:
      - name: Invoke global rollback helper (from your deploy script)
        run: |
          ssh "${{ inputs.ha_host }}" "cd /tmp/${{ env.BUNDLE_DIR }} && ./deploy_complete_restoration.sh --rollback-latest"
