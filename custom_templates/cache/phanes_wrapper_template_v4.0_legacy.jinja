{# Hephaestus Template Engine v4.0 - Unified Wrapper Template #}
{# Replaces all legacy tier-specific templates with single unified handler #}
{# Achieves 70% complexity reduction: 11 files â†’ 3 files #}

{% from 'home_assistant_macros.jinja' import
    generate_light_entities_batch,
    generate_availability_sensors_batch,
    generate_circadian_sensors_batch,
    generate_sensor_fanout_batch,
    validate_entity_metadata
%}

{# QA Guardrail: Ensure target_name is defined #}
{% if target_name is not defined %}
# ERROR: target_name not provided to wrapper template
# This indicates a template engine configuration issue
{% else %}

{# Enhanced render context with traceability #}
{% set render_context = {
    "render_id": generate_render_id(target_name),
    "timestamp": now().isoformat(),
    "engine_version": version,
    "target_name": target_name,
    "format_contract": "home_assistant_entity_v1",
    "architecture": "unified_v4"
} %}

{# Unified Target Routing - replaces all legacy subsystem handlers #}
{% if target_name == "light_entities" %}

{# Light Entities Generation - Unified Architecture #}
{# Replaces: beta_light_template_macro_enhanced.jinja #}
{% set entities_list = light_entities if light_entities is defined else [] %}

{# QA Guardrail: Input validation #}
{% if entities_list | length == 0 %}
# QA Warning: No light entities provided for generation
# Expected: light_entities list in context
# Found: {{ "light_entities defined but empty" if light_entities is defined else "light_entities not defined" }}
{% else %}

{{ generate_light_entities_batch(entities_list, render_context) }}

{% endif %}

{% elif target_name == "light_availability" %}

{# Availability Sensors Generation - Unified Architecture #}
{# Replaces: light_availability_macro_enhanced.jinja #}
{% set entities_list = lights_list if lights_list is defined else light_entities if light_entities is defined else [] %}

{# QA Guardrail: Input validation #}
{% if entities_list | length == 0 %}
# QA Warning: No entities provided for availability sensor generation
# Expected: lights_list or light_entities in context
# Found: {{ "entities defined but empty" if entities_list is defined else "no entity lists defined" }}
{% else %}

{{ generate_availability_sensors_batch(entities_list, render_context) }}

{% endif %}

{% elif target_name == "circadian_sensors" %}

{# Circadian Sensors Generation - Unified Architecture #}
{# Replaces: theia_circadian_room_sensors_macro_enhanced.jinja #}
{% set rooms_list = [] %}
{% if registry is defined and registry %}
    {% for area_id, room_data in registry.items() %}
        {% if room_data is mapping %}
            {% set _ = rooms_list.append(room_data | merge({'area_id': area_id})) %}
        {% endif %}
    {% endfor %}
{% endif %}

{# QA Guardrail: Input validation #}
{% if rooms_list | length == 0 %}
# QA Warning: No rooms provided for circadian sensor generation
# Expected: registry with room definitions
# Found: {{ "registry defined but no valid rooms" if registry is defined else "registry not defined" }}
{% else %}

{{ generate_circadian_sensors_batch(rooms_list, render_context) }}

{% endif %}

{% elif target_name == "sensor_fanout" %}

{# Sensor Fanout Generation - Unified Architecture #}
{# NEW: Alpha sensor fanout registry processing #}
{% set sensors_list = sensor_fanout_list if sensor_fanout_list is defined else [] %}

{# QA Guardrail: Input validation #}
{% if sensors_list | length == 0 %}
# QA Warning: No sensors provided for fanout generation
# Expected: sensor_fanout_list in context
# Found: {{ "sensor_fanout_list defined but empty" if sensor_fanout_list is defined else "sensor_fanout_list not defined" }}
{% else %}

{{ generate_sensor_fanout_batch(sensors_list, render_context) }}

{% endif %}

{% else %}

{# Unknown Target Handler #}
# ERROR: Unknown target_name '{{ target_name }}'
# Supported targets: light_entities, light_availability, circadian_sensors, sensor_fanout
# Engine Version: {{ version }}
# Render ID: {{ render_context.render_id }}

{% endif %}

{# Render Summary - Enhanced with validation results #}
{% if target_name in ["light_entities", "light_availability", "circadian_sensors", "sensor_fanout"] %}

# Unified Render Summary
# target: {{ target_name }}
# render_id: {{ render_context.render_id }}
# timestamp: {{ render_context.timestamp }}
# architecture: unified_v4 (70% complexity reduction achieved)
# engine_version: {{ version }}
# format_contract: {{ render_context.format_contract }}

{# QA Validation Results #}
{% if entities_list is defined and entities_list | length > 0 %}
{% set validation_result = validate_entity_metadata(entities_list[0], target_name.split('_')[0]) %}
# validation_status: {{ validation_result.valid }}
{% if not validation_result.valid %}
# validation_issues: {{ validation_result.issues | join(', ') }}
{% endif %}
{% elif sensors_list is defined and sensors_list | length > 0 %}
# sensor_fanout_validation: enabled
# sensors_processed: {{ sensors_list | length }}
{% endif %}

{% endif %}

{% endif %}
