{#- Comprehensive sensor analysis to find the real issue -#}

COMPREHENSIVE SENSOR ANALYSIS:

1. Direct sensor lookup:
{%- set test_sensors = ['sensor.ensuite_climate_alpha_matter_temperature', 'sensor.ensuite_climate_alpha_matter_humidity'] -%}
{%- for sensor_id in test_sensors -%}
{%- set sensor_obj = states.sensor | selectattr('entity_id', 'equalto', sensor_id) | first -%}
{%- if sensor_obj -%}
{{ sensor_id }}: EXISTS in states.sensor
{%- else -%}
{{ sensor_id }}: NOT FOUND in states.sensor
{%- endif -%}
{%- endfor %}

2. All sensors matching our filtering criteria:
{%- set all_climate_sensors = [] -%}
{%- for s in states.sensor | list -%}
  {%- if s.entity_id not in ['weather.forecast_home', 'sensor.sun_next_dawn', 'sensor.sun_next_dusk'] -%}
    {%- set dc = s.attributes.get('device_class') -%}
    {%- set unit = s.attributes.get('unit_of_measurement') -%}
    {%- set eid = s.entity_id | lower -%}
    {%- if (dc and dc in ['climate', 'humidity', 'temperature', 'pm25', 'illuminance', 'moisture', 'gas','pm10', 'tvoc', 'volatile_organic_compounds', 'atmospheric_pressure','pressure', 'aqi', 'co', 'co2', 'pm1']) or 
          (unit and (unit in ['°C', '°F', 'K', '%', 'hPa', 'mbar', 'Pa', 'psi', 'inHg', 'ppm', 'ppb', 'µg/m³', 'mg/m³', 'lx', 'lm'])) or
          ('temp' in eid or 'humid' in eid or 'pressure' in eid or 'aqi' in eid or 'air' in eid or 'climate' in eid or 'weather' in eid or 'co2' in eid or 'co_' in eid or 'pm' in eid or 'tvoc' in eid or 'illuminance' in eid or 'moisture' in eid) -%}
      {%- set all_climate_sensors = all_climate_sensors + [s.entity_id] -%}
    {%- endif -%}
  {%- endif -%}
{%- endfor %}

Total sensors passing filtering criteria: {{ all_climate_sensors | length }}

3. First 20 sensors that pass criteria:
{%- for sensor in all_climate_sensors[:20] -%}
{{ loop.index }}. {{ sensor }}
{%- endfor %}

4. Sensors with 'climate' in name (from all passing sensors):
{%- set climate_named = [] -%}
{%- for sensor in all_climate_sensors -%}
  {%- if 'climate' in sensor | lower -%}
    {%- set climate_named = climate_named + [sensor] -%}
  {%- endif -%}
{%- endfor %}

Climate-named sensors: {{ climate_named | length }}
{%- for sensor in climate_named -%}
{{ loop.index }}. {{ sensor }}
{%- endfor %}

5. Sensors with 'temp' or 'humid' in name:
{%- set temp_humid_sensors = [] -%}
{%- for sensor in all_climate_sensors -%}
  {%- set eid = sensor | lower -%}
  {%- if 'temp' in eid or 'humid' in eid -%}
    {%- set temp_humid_sensors = temp_humid_sensors + [sensor] -%}
  {%- endif -%}
{%- endfor %}

Temp/humid sensors: {{ temp_humid_sensors | length }}
{%- for sensor in temp_humid_sensors[:10] -%}
{{ loop.index }}. {{ sensor }}
{%- endfor %}

6. Matter integration sensors specifically:
{%- set matter_sensors = [] -%}
{%- for e in integration_entities('matter') -%}
  {%- if e.startswith('sensor.') -%}
    {%- set s = states(e) -%}
    {%- if s != 'unknown' -%}
      {%- set sensor_obj = states.sensor | selectattr('entity_id', 'equalto', e) | first -%}
      {%- if sensor_obj -%}
        {%- set dc = sensor_obj.attributes.get('device_class') -%}
        {%- set unit = sensor_obj.attributes.get('unit_of_measurement') -%}
        {%- set eid = sensor_obj.entity_id | lower -%}
        {%- if (dc and dc in ['climate', 'humidity', 'temperature', 'pm25', 'illuminance', 'moisture', 'gas','pm10', 'tvoc', 'volatile_organic_compounds', 'atmospheric_pressure','pressure', 'aqi', 'co', 'co2', 'pm1']) or 
              (unit and (unit in ['°C', '°F', 'K', '%', 'hPa', 'mbar', 'Pa', 'psi', 'inHg', 'ppm', 'ppb', 'µg/m³', 'mg/m³', 'lx', 'lm'])) or
              ('temp' in eid or 'humid' in eid or 'pressure' in eid or 'aqi' in eid or 'air' in eid or 'climate' in eid or 'weather' in eid or 'co2' in eid or 'co_' in eid or 'pm' in eid or 'tvoc' in eid or 'illuminance' in eid or 'moisture' in eid) -%}
          {%- set matter_sensors = matter_sensors + [e] -%}
        {%- endif -%}
      {%- endif -%}
    {%- endif -%}
  {%- endif -%}
{%- endfor %}

Matter climate sensors: {{ matter_sensors | length }}
{%- for sensor in matter_sensors -%}
{{ loop.index }}. {{ sensor }}
{%- endfor %}