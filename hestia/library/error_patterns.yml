# Home Assistant Error Patterns and Resolution Guide
# This file documents common error patterns in Home Assistant and their fixes
# Used by diagnostic tools and documentation

patterns:
  - name: "template_variable_undefined"
    category: "jinja_template"
    description: "Template errors when variables don't exist or are undefined"
    error_format: "UndefinedError: 'variable_name' is undefined"
    symptoms:
      - "Template errors in Home Assistant logs"
      - "Sensors showing 'unavailable' state"
      - "Automations failing to execute"
    root_causes:
      - "Missing existence checks before using template variables"
      - "Improper Jinja whitespace control leading to empty strings"
      - "Using template functions on undefined variables"
    solution:
      - "Add defensive checks: {% if trigger.to_state is not none %}"
      - "Use whitespace control: {%- set var = value -%}"
      - "Check state validity: {{ raw not in ['unknown','unavailable',''] }}"
    examples:
      bad: |
        value_template: "{{ trigger.to_state.state | abs }}"
      good: |
        value_template: >-
          {%- set state = trigger.to_state -%}
          {{ state is not none and state.state not in ['unknown','unavailable',''] 
             and state.state | abs or 0 }}
    references:
      - "Home Assistant Template Documentation"
      - "Jinja2 Template Documentation"
      - "ADR-0020: Template Error Patterns"

  - name: "backup_agent_upload_failure"
    category: "backup"
    description: "Backup uploads failing to configured remote locations like Synology NAS"
    error_format: "backup could not be uploaded to the configured locations [location]"
    symptoms:
      - "Automatic backup upload failed notifications"
      - "Backup agent showing failed uploads in storage"
      - "Synology NAS backup errors"
      - "Backup warning notifications in Home Assistant"
    root_causes:
      - "Multi-factor authentication enabled on NAS user account"
      - "Backup target path does not exist or lacks write permissions"
      - "Network connectivity issues or firewall blocking access"
      - "Insufficient storage space on backup destination"
      - "Expired or invalid authentication credentials"
      - "NAS service disabled or configuration changed"
    solution:
      - "Disable MFA for backup service account on NAS"
      - "Verify backup path exists and has proper permissions"
      - "Test network connectivity and API access"
      - "Reconfigure Home Assistant backup integration"
    examples:
      bad: |
        # .storage/backup showing failed uploads
        {
          "backup_id": "abc123",
          "failed_agent_ids": ["synology_dsm.2330RLRDXJ1F8"],
          "failed_folders": []
        }
      good: |
        # .storage/backup with successful uploads
        {
          "backup_id": "abc123",
          "failed_agent_ids": [],
          "failed_folders": []
        }
    resolution_steps:
      - "Run backup validation: hestia/tools/backup_validator.sh"
      - "Check NAS user MFA and privilege settings"
      - "Verify backup path permissions and disk space"
      - "Test API connectivity to backup destination"
      - "Reconfigure integration if authentication fails"
    tooling:
      - "hestia/tools/backup_validator.sh - comprehensive backup agent testing"
      - "jq '.data.backups[] | select(.failed_agent_ids | length > 0)' /config/.storage/backup"

  - name: "entity_registry_duplication"
    category: "entity_registry"
    description: "Duplicate entities with _2 suffix from device re-registration"
    error_format: "Multiple entities with same name but different unique_id patterns"
    symptoms:
      - "Entities appearing with _2, _3 suffixes in entity registry"
      - "Original entities showing as 'unavailable' with 'restored: true'"
      - "Duplicate mobile app or integration device registrations"
      - "Entity conflicts after device re-pairing or integration reload"
    root_causes:
      - "Mobile app re-registration creating new device with different device_id"
      - "Integration reload without proper cleanup of old entities"
      - "Device pairing conflicts with existing entity unique_ids"
      - "Orphaned entities from removed integrations not cleaned up"
      - "Entity restore state conflicts with new registrations"
    solution:
      - "Remove duplicate entities via Developer Tools > Entities"
      - "For unavailable base + active suffixed: disable base, rename suffixed to take base entity_id"
      - "Clean up orphaned config entries from removed integrations"
      - "Disable old entities before re-registering devices"
      - "Use entity registry cleanup tools to remove suffixed duplicates"
    examples:
      bad: |
        # Entity registry showing duplicates
        sensor.ephone_uk_activity (unavailable, restored: true)
        sensor.ephone_uk_activity_2 (active, new device_id)
      good: |
        # Clean entity registry
        sensor.ephone_uk_activity (active, single registration)
    resolution_steps:
      - "Identify duplicate entities: grep '_2.*entity_id' .storage/core.entity_registry"
      - "Find associated config entries with different device_ids"
      - "For unavailable base + active suffixed pattern:"
      - "  1. Disable the unavailable base entity"
      - "  2. Change suffixed entity_id to take over base entity_id (via Developer Tools)"
      - "  3. Verify the renamed entity maintains functionality"
      - "Clean up orphaned device registrations"
      - "Restart Home Assistant to refresh entity states"
    tooling:
      - "Developer Tools > Entities - search for _2, _3 suffixes"
      - "jq '.data.entities[] | select(.entity_id | contains(\"_2\"))' .storage/core.entity_registry"

  - name: "blueprint_path_resolution"
    category: "automation_blueprint"
    description: "Blueprint loading errors due to incorrect path references"
    error_format: "Unable to find [path]/blueprint.yaml"
    symptoms:
      - "Blueprint loading failures in Home Assistant"
      - "Automations showing as 'unknown' or failing to load"
      - "Configuration validation errors for blueprint paths"
    root_causes:
      - "Incorrect blueprint path references in automation files"
      - "Missing 'hestia/' prefix in blueprint paths"
      - "Blueprint files moved but automation paths not updated"
    solution:
      - "Use canonical blueprint path: hestia/library/blueprints/"
      - "Verify blueprint file exists at referenced path"
      - "Update all automation files with correct blueprint paths"
    examples:
      bad: |
        use_blueprint:
          path: library/blueprints/sensor-light.yaml
      good: |
        use_blueprint:
          path: hestia/library/blueprints/sensor-light.yaml
    resolution_steps:
      - "Search for incorrect blueprint references: grep -r 'path: library/blueprints/' **/*.yaml"
      - "Verify blueprint files exist: ls hestia/library/blueprints/"
      - "Replace incorrect paths with canonical paths"
      - "Validate Home Assistant configuration after changes"
    references:
      - "ADR-0016: Canonical Workspace Structure"

  - name: "recorder_invalid_action_parameter"
    category: "automation_action"
    description: "Invalid parameters used with Home Assistant recorder actions"
    error_format: "extra keys not allowed @ data['parameter_name']"
    symptoms:
      - "Automation execution failures with recorder actions"
      - "Error messages about extra keys not allowed"
      - "Script execution errors in recorder actions"
    root_causes:
      - "Using parameters valid for one recorder action with another action"
      - "Incorrect parameter names or deprecated parameters"
      - "Mixing recorder.purge and recorder.purge_entities parameters"
    solution:
      - "Use correct parameters for each recorder action"
      - "Remove invalid parameters from action data"
      - "Consult Home Assistant documentation for valid parameters"
    examples:
      bad: |
        action: recorder.purge_entities
        data:
          keep_days: 0
          entity_id: sensor.example
          apply_filter: true  # Invalid for purge_entities
      good: |
        action: recorder.purge_entities
        data:
          keep_days: 0
          entity_id: sensor.example
        # OR use recorder.purge with apply_filter
        action: recorder.purge
        data:
          keep_days: 7
          apply_filter: true
    resolution_steps:
      - "Identify the failing automation from error logs"
      - "Check Home Assistant documentation for valid action parameters"
      - "Remove invalid parameters from automation action data"
      - "Test automation execution after fix"
    references:
      - "Home Assistant Recorder Integration Documentation"

  - name: "shell_command_path_error"
    category: "shell_command"
    description: "Shell command execution failures due to incorrect file paths"
    error_format: "Error running command: `command`, return code: 127"
    symptoms:
      - "Shell command returning exit code 127 (command not found)"
      - "Scripts failing to execute from Home Assistant"
      - "File not found errors in shell command execution"
    root_causes:
      - "Incorrect file paths in shell command configuration"
      - "Scripts moved but configuration not updated"
      - "Missing executable permissions on script files"
    solution:
      - "Use correct canonical paths to script files"
      - "Verify script files exist at specified locations"
      - "Ensure scripts have executable permissions"
    examples:
      bad: |
        shell_command:
          git_push: "bash -lc '/config/tools/script.sh'"
      good: |
        shell_command:
          git_push: "bash -lc '/config/hestia/tools/script.sh'"
    resolution_steps:
      - "Check if script file exists at the specified path"
      - "Update path to use canonical workspace structure"
      - "Verify script has executable permissions: chmod +x script.sh"
      - "Test shell command execution from Home Assistant"
    references:
      - "ADR-0016: Canonical Workspace Structure"

  - name: "missing_integration_reference"
    category: "integration_loading"
    description: "WebSocket errors when frontend tries to access non-existent integrations"
    error_format: "Integration 'integration_name' not found"
    symptoms:
      - "WebSocket API errors in Home Assistant logs"
      - "Frontend elements failing to load"
      - "Unknown error messages in browser console"
    root_causes:
      - "Custom integrations removed but still referenced in frontend"
      - "Cached references to removed integrations"
      - "UI elements trying to access non-existent integration manifests"
    solution:
      - "Clear browser cache and restart Home Assistant"
      - "Remove any lingering configuration references"
      - "Check for custom UI elements referencing the integration"
    examples:
      symptoms: |
        homeassistant.loader.IntegrationNotFound: Integration 'icloud3' not found.
      resolution: |
        1. Clear browser cache
        2. Check custom_components directory
        3. Search configuration files for references
        4. Restart Home Assistant
    resolution_steps:
      - "Identify the missing integration from error logs"
      - "Search configuration files for any references: grep -r 'integration_name' ."
      - "Clear browser cache and Home Assistant frontend cache"
      - "Restart Home Assistant to clear cached references"
    references:
      - "Home Assistant Integration Loading Documentation"

  - name: "command_line_curl_ssl_error"
    category: "command_line_sensor"
    description: "Command line sensors failing due to SSL/TLS connection issues with curl"
    error_format: "Command failed (with return code 35): bash -lc '.*curl.*'"
    symptoms:
      - "Command line sensors showing 'unknown' or 'unavailable' states"
      - "Return code 35 errors in Home Assistant logs"
      - "SSL connect error messages in command line integration logs"
      - "Intermittent sensor failures"
    root_causes:
      - "SSL/TLS handshake failures with remote servers"
      - "Certificate validation issues or expired certificates"
      - "Network connectivity problems during SSL negotiation"
      - "Cloudflare or proxy SSL configuration issues"
      - "Insufficient error handling in curl commands"
    solution:
      - "Add error handling with fallback values using || echo 'fallback'"
      - "Redirect stderr to /dev/null to suppress SSL noise: 2>/dev/null"
      - "Use appropriate fallback values in value_template"
      - "Consider adding curl SSL options like --insecure for internal services (with caution)"
    examples:
      bad: |
        command: >-
          bash -lc '
            set -eo pipefail
            curl -s -o /dev/null -w "%{http_code}" https://example.com/api | tr -d "\n"
          '
        value_template: "{{ value | default('unknown') | trim }}"
      good: |
        command: >-
          bash -lc '
            set -eo pipefail
            curl -s -o /dev/null -w "%{http_code}" https://example.com/api 2>/dev/null | tr -d "\n" || echo "000"
          '
        value_template: "{{ value | default('000') | trim }}"
    resolution_steps:
      - "Identify the failing command from error logs"
      - "Add error handling to curl commands with || echo 'fallback_value'"
      - "Redirect stderr to /dev/null to suppress SSL error noise"
      - "Update value_template to use appropriate default values"
      - "Test manually: bash -lc 'your_curl_command || echo fallback'"
      - "Consider certificate verification if using internal services"
    prevention_strategies:
      - "Always include error handling in curl-based command line sensors"
      - "Use appropriate timeouts with --connect-timeout and --max-time"
      - "Monitor SSL certificate expiration dates"
      - "Test commands in various network conditions"
    tooling:
      detector: "grep -r 'Command failed.*return code 35' /config/home-assistant.log"
      validator: "Test curl commands manually with verbose output: curl -v"
    references:
      - "Home Assistant Command Line Integration Documentation"
      - "curl manual and error codes documentation"
      - "SSL/TLS troubleshooting guides"

  - name: "yaml_duplicate_key_error"
    category: "yaml_configuration"
    description: "YAML parsing errors due to duplicate keys in configuration files"
    error_format: "YAML file [path] contains duplicate key \"[key]\". Check lines [n] and [m]"
    symptoms:
      - "YAML parsing warnings in Home Assistant logs"
      - "Configuration sections not loading as expected"
      - "Duplicate key warnings during startup"
    root_causes:
      - "Multiple sections with the same key in a single YAML file"
      - "Copy-paste errors creating duplicate configuration blocks"
      - "Legacy cache files accidentally being loaded"
      - "Incorrect file includes or symlinks"
    solution:
      - "Merge duplicate sections into a single configuration block"
      - "Remove redundant key definitions"
      - "Check for accidental file inclusions from cache directories"
      - "Validate YAML structure before deployment"
    examples:
      bad: |
        input_boolean:
          setting_one: true
        # Later in same file...
        input_boolean:
          setting_two: false
      good: |
        input_boolean:
          setting_one: true
          setting_two: false
    resolution_steps:
      - "Identify the file and line numbers from error message"
      - "Open the file and locate the duplicate key sections"
      - "Merge the configurations into a single block"
      - "Remove any redundant or conflicting definitions"
      - "Validate YAML syntax after changes"
    references:
      - "Home Assistant Configuration Documentation"
      - "YAML Specification"

  - name: "yaml_heredoc_parsing_error"
    category: "yaml_configuration"
    description: "YAML parsing errors when using heredoc syntax within folded scalars"
    error_format: "while scanning a simple key...could not find expected ':'"
    symptoms:
      - "Configuration loading failures with cryptic YAML parsing errors"
      - "Shell command configurations failing to load"
      - "Error messages pointing to line numbers with colon expectations"
      - "Home Assistant failing to start due to configuration syntax errors"
    root_causes:
      - "Using heredoc syntax (<<\"DELIMITER\") within YAML folded scalar blocks (>-)"
      - "Complex shell commands with embedded quotes conflicting with YAML parsing"
      - "Multi-line SQL or shell scripts incorrectly formatted in YAML"
      - "YAML parser unable to handle nested quoting structures"
    solution:
      - "Convert from folded scalar (>-) to literal scalar (|) block style"
      - "Eliminate heredoc syntax and use inline SQL with proper escaping"
      - "Escape all internal quotes within the command string"
      - "Use single-line format for complex SQL operations"
    examples:
      bad: |
        shell_command:
          update_room_config: >-
            /bin/sh -c 'sqlite3 /config/room_database.db <<"SQL"
            PRAGMA journal_mode=WAL;
            UPDATE table SET data = "{{ value }}";
        SQL'
      good: |
        shell_command:
          update_room_config: |
            /bin/sh -c 'sqlite3 /config/room_database.db "PRAGMA journal_mode=WAL; UPDATE table SET data = \"{{ value }}\";"'
    resolution_steps:
      - "Identify the problematic YAML file from error message line numbers"
      - "Locate shell commands or complex multi-line strings using >- folded scalars"
      - "Convert folded scalar (>-) to literal scalar (|) block style"
      - "Remove heredoc syntax and inline the SQL/shell commands"
      - "Escape all internal quotes: \" becomes \\\" within the command string"
      - "Test configuration loading with: /config/bin/config-health /config"
      - "Verify shell commands execute properly after YAML fixes"
    prevention_strategies:
      - "Use literal scalar (|) for complex shell commands instead of folded scalar (>-)"
      - "Avoid heredoc syntax within YAML; use inline commands with proper escaping"
      - "Test YAML parsing after adding complex shell commands"
      - "Consider external script files for very complex multi-line operations"
    tooling:
      detector: "Look for error patterns: 'while scanning a simple key' + 'could not find expected':'"
      validator: "/config/bin/config-health /config - validates Home Assistant YAML configuration"
      test_yaml: "python -c \"import yaml; yaml.safe_load(open('file.yaml'))\" - test YAML parsing"
    references:
      - "YAML Specification - Block Scalar Styles"
      - "Home Assistant Shell Command Integration Documentation"
      - "ADR-0018: Configuration Normalization Standards"

  - name: "blueprint_loading_error"
    category: "automation_blueprint"
    description: "Blueprint loading failures due to incorrect file paths or missing files"
    error_format: "Failed to load blueprint: Unable to find [path]"
    symptoms:
      - "Blueprint automation generation failures"
      - "Blueprint path resolution errors in logs"
      - "Automations showing as unavailable or failing to load"
    root_causes:
      - "Incorrect blueprint file paths in blueprint matrix or automation files"
      - "Missing hestia/ prefix in blueprint paths"
      - "Blueprint files moved but references not updated"
      - "Typos in blueprint file paths"
    solution:
      - "Use correct canonical blueprint paths with hestia/ prefix"
      - "Verify blueprint files exist at referenced locations"
      - "Update blueprint matrix with correct paths"
      - "Fix typos in blueprint references"
    examples:
      bad: |
        # Blueprint matrix with incorrect paths
        - core_executor: "library/blueprints/sensor-light.yaml"
        - link_entities: "library/blueprints/ha-blueprint-linked-entities.yaml"
      good: |
        # Blueprint matrix with correct canonical paths
        - core_executor: "hestia/library/blueprints/sensor-light.yaml"
        - link_entities: "hestia/library/blueprints/ha-blueprint-linked-entities.yaml"
    resolution_steps:
      - "Identify the missing blueprint path from error logs"
      - "Verify the blueprint file exists: ls hestia/library/blueprints/"
      - "Update blueprint matrix or automation files with correct paths"
      - "Use canonical hestia/library/blueprints/ prefix for all blueprint references"
      - "Test blueprint loading after path corrections"
    references:
      - "ADR-0016: Canonical Workspace Structure"
      - "Home Assistant Blueprint Documentation"

  - name: "script_selector_configuration_error"
    category: "script_configuration"
    description: "Script configuration errors due to malformed selector syntax in field definitions"
    error_format: "Only one type can be specified. Found for dictionary value @ data['fields']['field_name']['selector']. Got OrderedDict()."
    symptoms:
      - "Scripts showing as 'not active' due to configuration errors"
      - "Script configuration validation failures"
      - "Error messages about dictionary values and multiple types in selectors"
      - "Script field selectors not working properly in UI"
    root_causes:
      - "Using inline dictionary format for selectors: selector: { text: {} }"
      - "YAML parser interpreting nested empty dictionaries as ambiguous types"
      - "Selector syntax not following Home Assistant's expected block format"
      - "Mixed selector syntax formats within the same configuration"
    solution:
      - "Convert inline selector format to explicit block format"
      - "Use proper YAML indentation for selector definitions"
      - "Ensure consistent selector syntax throughout configuration"
      - "Remove unnecessary empty dictionary values"
    examples:
      bad: |
        fields:
          room:
            description: "Room slug (e.g., 'bedroom')"
            required: true
            selector: { text: {} }
      good: |
        fields:
          room:
            description: "Room slug (e.g., 'bedroom')"
            required: true
            selector:
              text:
    resolution_steps:
      - "Identify the problematic script from Home Assistant error messages"
      - "Locate the script configuration file (usually in scripts.yaml or packages/)"
      - "Find the fields section with selector definitions"
      - "Convert inline selector format { type: {} } to block format"
      - "Remove empty dictionary values and use proper YAML block structure"
      - "Test configuration loading with: /config/bin/config-health /config"
      - "Verify script shows as active in Home Assistant UI"
    prevention_strategies:
      - "Always use block format for selector definitions in scripts"
      - "Avoid inline dictionary syntax for complex YAML structures"
      - "Test script configurations after adding new fields"
      - "Use consistent selector syntax patterns across all scripts"
    tooling:
      detector: "Look for error patterns: 'Only one type can be specified' + 'selector' + 'OrderedDict()'"
      validator: "/config/bin/config-health /config - validates Home Assistant configuration"
      script_check: "Check script status in Home Assistant Developer Tools > Services"
    references:
      - "Home Assistant Script Documentation"
      - "Home Assistant Selector Documentation"
      - "YAML Best Practices for Home Assistant"

  - name: "automation_unknown_action_service"
    category: "automation_action"
    description: "Automation failures due to referencing non-existent or misnamed services"
    error_format: "uses an unknown action...has an unknown action: [service_name]"
    symptoms:
      - "Automations showing error status and not executing"
      - "Error messages about unknown actions in automation configuration"
      - "Automation reported as having configuration errors"
      - "Services not found during automation execution"
    root_causes:
      - "Referencing rest_command services that don't exist in configuration"
      - "Typos in service names (e.g., rest_command vs shell_command)"
      - "Services removed or renamed but automation not updated"
      - "Missing integration providing the referenced service"
      - "Incorrect service domain or action name"
    solution:
      - "Verify the correct service exists in Home Assistant configuration"
      - "Update service calls to use correct service names and domains"
      - "Check if service requires specific integration to be installed"
      - "Add missing required parameters for the correct service"
      - "Use Developer Tools > Services to verify available services"
    examples:
      bad: |
        - service: rest_command.room_db_update_config
          data:
            room_id: "bedroom"
            domain: "motion_lighting"
            config_data: "{{ some_data | tojson }}"
      good: |
        - service: shell_command.update_room_config
          data:
            room_id: "bedroom"
            domain: "motion_lighting"
            config_data: "{{ some_data | tojson }}"
            schema_expected: 1
    resolution_steps:
      - "Identify the failing automation from Home Assistant error messages"
      - "Check what services are actually available in configuration"
      - "Verify service domain: rest_command vs shell_command vs other domains"
      - "Update service call to use correct service name and domain"
      - "Add any required parameters that the correct service expects"
      - "Test automation after fixing service references"
      - "Use Developer Tools > Services to verify service is callable"
    prevention_strategies:
      - "Use Developer Tools > Services to verify service names before use"
      - "Keep automation service references in sync with configuration changes"
      - "Document service dependencies and parameter requirements"
      - "Test automations after configuration changes"
    troubleshooting:
      service_discovery: "Developer Tools > Services - browse available services"
      config_check: "/config/bin/config-health /config - validate configuration"
      service_test: "Developer Tools > Services - test service calls manually"
    references:
      - "Home Assistant Services Documentation"
      - "Home Assistant Automation Action Documentation"
      - "Home Assistant Developer Tools Guide"