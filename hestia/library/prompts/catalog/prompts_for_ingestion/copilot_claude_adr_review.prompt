You are an expert technical writer and architecture reviewer. Audit the ADR documents in the local workspace at `hestia/docs/ADR/` and produce a structured, high-quality report and remediation suggestions. Do NOT modify repository files; propose patches only.

ASSUMPTIONS
- The model has full read access to repository files under the workspace root; you may check the filesystem paths (e.g., `hestia/docs/ADR/`, `hestia/tools/`, `.github/workflows/`) to validate references. If filesystem access is not available, mark those checks as "unchecked" with confidence < 0.7.
- Treat files named with `core-duplicate` as cross-references (non-canonical) unless no canonical exists; suggest canonicalization where appropriate.

SCOPE
- Directory: `hestia/docs/ADR/`
- Include: all `*.md` files at that path and any `.md` files under `hestia/docs/ADR/architecture/`.
- Exclude: binary files, attachments; note their presence if referenced.

SEVERITY MAPPING (use these for issue classification)
- critical: contradictions that break policy/CI or cause data-loss risk; conflicting ADRs about the same canonical artifact.
- high: missing referenced CI/workflow or missing responsible owner for policy; broken external references to workspace paths.
- medium: front-matter inconsistencies, missing implementation/migration steps, ambiguous responsibilities.
- low: formatting, authors array -> author canonicalization, wording clarity.

CHECKS TO RUN (per ADR file)
1. Front-matter & metadata
   - Parse YAML front-matter (if present). Required fields: `id`, `title`, `status`, `date`, and `author` or `authors`.
   - If both `authors` list and `author` scalar exist, recommend canonicalization: if `authors` has one element, propose promoting `authors[0]` → `author` and removing `authors`. Provide a unified-diff style patch snippet.
   - Validate `date` (ISO format); if older than 2 years with `status: accepted` but no implementation notes, flag as `stale-accepted` (medium).
   - Ensure `references` entries point to existing workspace paths; if a path missing, mark as high.

2. Internal consistency
   - Ensure ADR filename ID (e.g., `ADR-0018-...`) matches the `id` in front-matter/title if present.
   - Ensure `status` in front-matter is consistent with the document body language (e.g., reject “TBD” language with `status: accepted`).
   - Detect internal contradictions (same ADR asserts two incompatible decisions).

3. Completeness & actionability
   - For policy ADRs ensure presence of: rationale, consequences, migration/rollout steps, owner/team, and success/failure criteria.
   - Flag ADRs missing actionability or only descriptive content.

4. External references & cross-checks
   - Extract references to workspace artifacts (examples): `.github/workflows/adr-0018-include-scan.yml`, `hestia/tools/utils/reportkit/retention.py`, `hestia/reports/`, `hestia/vault/registry/`.
   - Verify referenced paths exist in the workspace; if not accessible, mark unchecked and explain.
   - For CI workflow references, check file presence and that the referenced workflow name/filename matches actual workflow file.

5. Duplication & redundancy
   - Detect near-duplicate ADRs (overlapping problem/decision) and recommend canonical file and merge plan: what content to keep, what to archive (propose `hestia/docs/ADR/archive/` for duplicates).
   - Provide a suggested canonical filename when merges are needed.

6. Readability & structure
   - Verify standard sections exist: Problem, Decision, Status, Consequences, Implementation, Alternatives.
   - Identify vague language ("soon", "short-term") and suggest explicit wording (time windows, owners).

7. Cross-file contradictions
   - Build a cross-ADR reference map. Flag cycles, contradictions, or ADRs that override others without clear reference.

OUTPUT (two parts)
A) JSON report (print this first). Schema:
{
  "generated_at": "<UTC ISO timestamp>",
  "summary": {
    "total_adrs": <int>,
    "adrs_with_issues": <int>,
    "issues_by_severity": { "critical":<int>, "high":<int>, "medium":<int>, "low":<int> }
  },
  "adrs": [
    {
      "file": "hestia/docs/ADR/ADR-0018-workspace-lifecycle-policy.md",
      "id": "ADR-0018",
      "title": "Workspace lifecycle policy",
      "front_matter": { /* parsed keys or null */ },
      "issues": [
        {"severity":"high","category":"front-matter","message":"authors and author both present; prefer author.","line":12,"confidence":0.95}
      ],
      "suggested_patches": [
        {
          "type":"diff",
          "description":"Promote authors[0] -> author and remove authors field",
          "patch":"--- a/hestia/docs/ADR/ADR-0018-workspace-lifecycle-policy.md\n+++ b/hestia/docs/ADR/ADR-0018-workspace-lifecycle-policy.md\n@@\n- authors:\n-  - E. Appels\n+ author: E. Appels\n"
        }
      ],
      "confidence": 0.92
    },
    ...
  ],
  "cross_adr_issues": [ /* list of contradictions or overrides */ ],
  "action_plan": {
    "critical_next_steps": ["..."],
    "recommended_owner":"<team or role>",
    "estimated_effort":"small|medium|large"
  }
}

B) Human summary (3–8 bullets)
- Top critical issues (brief)
- Recommended canonical ADR files for merges (if any)
- Suggested owner(s) and immediate next step

REMEDIATION GUIDANCE (for each suggested patch)
- Provide:
  - exact unified-diff (git apply compatible),
  - target file path,
  - confidence (0–1) and reasoning why,
  - whether human review is required (always for severity >= medium).
- For duplicate merges include a minimal merge plan: canonical file, sections to keep, and archive filename.

BEHAVIORAL CONSTRAINTS
- Do not edit files; only propose patches.
- If uncertain about a detection, include reasoning and set confidence < 0.7.
- Limit the reported issues to the 10 highest-priority items if total findings > 50; still include counts for all findings.
- Prefer conservative recommendations; require explicit human sign-off for destructive or content-removal suggestions.

ADDITIONAL HEURISTICS & EXAMPLES
- Treat `authors` array with one element as equivalent to `author` scalar.
- Missing referenced CI workflow file → severity HIGH.
- Conflicting ADRs claiming different canonical locations for the same artifact → severity CRITICAL.
- If front-matter `date` is > 2 years old and status is `accepted` but no implementation notes, tag `stale-accepted`.

DELIVERABLES (produce all of these)
1. JSON report conforming to the schema above.
2. Human summary bullet list.
3. Per-file suggested patches in unified-diff format for the highest-priority fixes.
4. A concise rollout checklist (3–7 actionable steps) for maintainers to apply fixes and monitor impact.
5. Suggest a single PR title and a one-paragraph PR body for applying the patch set.

END