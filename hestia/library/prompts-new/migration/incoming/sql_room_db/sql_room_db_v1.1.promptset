promptset:
  id: sql-room-database-architecture.promptset
  version: 1.1
  created: "2025-10-08"
  description: >
    Production-grade, 5-phase execution plan to replace HACS Variable with a
    SQL-backed room database for Adaptive Motion Lighting + Valetudo Vacuum Control.
    Enforces HA sensor state-size limits, attribute-based JSON payloads, transaction-safe
    writes, and ADR compliance. Target: ≥70% entity reduction with zero feature loss.

  persona: strategos_gpt
  legacy_compatibility: false
  schema_version: 1.0

  execution_context:
    model: "GPT-5 Extended Thinking"
    mandate: "Replace 70+ helper entities with <10 SQL-backed access points"
    success_criteria:
      - "Copy-paste deployable packages; config check passes"
      - "≥70% entity reduction; identical behavior preserved"
      - "SQL query p50 < 100ms; updates < 200ms"
      - "ADR-0008 / ADR-0021 / ADR-0024 compliant"

  globals:
    timezone: "Europe/London"
    ha_state_char_limit: 255
    naming:
      sql_sensors:
        motion: "sensor.room_configs_motion_lighting"      # plural 'room_configs'
        vacuum: "sensor.room_configs_vacuum_control"
        cleaning_need: "sensor.rooms_needing_cleaning"
    recorder_db_default: false              # Use dedicated /config/room_database.db
    scan_interval_seconds: 30               # Bound DB load
    json1_required_functions: ["json_extract","json_group_object","json_group_array","json_valid"]

  artifacts:
    required:
      - { description: "Adaptive motion lighting package", path: /mnt/data/adaptive_motion_lighting/ }
      - { description: "Valetudo vacuum control package", path: /mnt/data/valetudo/ }
      - { description: "HA SQL integration guide", path: /mnt/data/homeassistant_sql_integration_guide.md }
      - { description: "SQLite usage & performance", path: /mnt/data/sqlite_homeassistant_patterns.md }
      - { description: "Normalization & determinism rules", path: /mnt/data/ADR/ADR-0008-normalization-and-determinism-rules.md }
      - { description: "Motion/occupancy/presence governance", path: /mnt/data/ADR/ADR-0021-motion-occupancy-presence-signals.md }
      - { description: "Canonical path requirements", path: /mnt/data/ADR/ADR-0024-canonical-config-path.md }
      - { description: "Canonical mappings", path: /mnt/data/architecture/{area_mapping.yaml,presence_mapping.yaml,tier_mapping.yaml} }
    consulted:
      - { path: /mnt/data/hestia_structure.md, description: "Package placement conventions" }
      - { path: /mnt/data/enhanced-motion-lighting-config.promptset, description: "Prior motion architecture" }
      - { path: /mnt/data/valetudo_optimization_comprehensive_v2.promptset, description: "Vacuum integration patterns" }

  bindings:
    protocols:
      - sql_database_first_architecture
      - room_scoped_data_modeling
      - entity_reduction_optimization
      - production_grade_validation
      - adr_compliance_enforcement
    hard_guardrails:
      - "DO NOT store JSON in sensor state; JSON must be an ATTRIBUTE named 'payload'."
      - "Numeric_state conditions MUST NOT template thresholds; use template condition instead."
      - "Writes MUST NOT target recorder DB; use /config/room_database.db (unless explicitly toggled)."
      - "All write paths MUST be transactional (BEGIN…COMMIT) and shell-quoting safe."
      - "Sensors MUST specify scan_interval: {{ scan_interval_seconds }}."
      - "Names MUST match globals.naming.* exactly."
      - "If SQLite JSON1 is missing, generate a normalized schema fallback and switch queries."
      - "All YAML MUST validate under HA config and ADR-0008 formatting."

  retrieval_tags: [sql_architecture, room_database, entity_reduction, motion_lighting, vacuum_control, home_assistant, database_design]

  operational_modes: [research_mode, deconstruction_mode, architecture_mode, implementation_mode, validation_mode]

  response_contracts:
    # Enforce shapes to keep answers deterministic and diffable
    research_foundation_shape:
      keys: [sql_capabilities, sqlite_patterns, current_architecture, consolidation_opportunities, governance_constraints]
    deconstruction_shape:
      keys: [adaptive_lighting_core, valetudo_core, consolidation_targets, gui_compatibility_matrix]
    architecture_shape:
      keys: [database_schema, sql_sensors, update_mechanisms, template_functions, package_structure, integration_strategy, migration_strategy]
    implementation_outputs:
      files:
        - "/config/packages/room_database/sql_sensors.yaml"
        - "/config/packages/room_database/shell_commands.yaml"
        - "/config/packages/room_database/database_init.sql"
        - "/config/packages/motion_lighting_v2/automations.yaml"
        - "/config/packages/motion_lighting_v2/templates.yaml"
        - "/config/packages/vacuum_control_v2/scripts.yaml"
        - "/config/packages/vacuum_control_v2/mqtt_commands.yaml"
    validation_shape:
      keys: [acceptance_criteria, diagnostics_templates, migration_tokens, rollback_procedures, performance_benchmarks]

  non_negotiables:
    - "SQL sensors return: state='ok' (short) + attribute 'payload' JSON; additional numeric attribute 'count' where relevant."
    - "Use state_attr('…','payload') | from_json for reads."
    - "Valetudo topics are configurable; expose a single macro/variable for the base topic."
    - "Presence modulates timeouts (ADR-0021), never blocks activation."
    - "All write paths escape JSON with tojson, avoid bash-only constructs; prefer /bin/sh or AppDaemon/Node-RED path."

  # ----------------- PHASES -----------------

  prompts:

    # PHASE 1
    - id: sql_room_db.research.foundation
      persona: strategos_gpt
      label: "Research — SQL Patterns & Package Inventory"
      mode: research_mode
      protocols: [sql_database_first_architecture, production_grade_validation]
      bindings:
        - /mnt/data/homeassistant_sql_integration_guide.md
        - /mnt/data/sqlite_homeassistant_patterns.md
        - /mnt/data/adaptive_motion_lighting/
        - /mnt/data/valetudo/
        - /mnt/data/ADR/ADR-0008-normalization-and-determinism-rules.md
      prompt: |
        Produce `research_foundation` strictly matching response_contracts.research_foundation_shape.
        Explicitly list SQL integration SELECT-only constraints, JSON1 functions used, and recorder-vs-dedicated DB tradeoffs.
        Identify any Variable-based entities that are obvious SQL consolidation targets.
        CONFIDENCE: [n]%

    # PHASE 2
    - id: sql_room_db.deconstruction.objectives
      persona: strategos_gpt
      label: "Deconstruction — Feature Extraction & Mapping"
      mode: deconstruction_mode
      protocols: [room_scoped_data_modeling, entity_reduction_optimization]
      bindings:
        - /mnt/data/adaptive_motion_lighting/
        - /mnt/data/valetudo/
        - /mnt/data/ADR/ADR-0021-motion-occupancy-presence-signals.md
        - /mnt/data/architecture/area_mapping.yaml
      prompt: |
        Produce `deconstruction_analysis` matching response_contracts.deconstruction_shape.
        Include explicit lists of per-room timeouts, bypasses, illuminance thresholds (if discoverable),
        and MQTT topics/payload shapes for Valetudo. Flag any GUI dependencies that require attribute payloads.
        CONFIDENCE: [n]%

    # PHASE 3
    - id: sql_room_db.architecture.scaffold
      persona: strategos_gpt
      label: "Architecture — Unified Schema & Integration"
      mode: architecture_mode
      protocols: [sql_database_first_architecture, room_scoped_data_modeling, adr_compliance_enforcement]
      bindings:
        - /mnt/data/homeassistant_sql_integration_guide.md
        - /mnt/data/sqlite_homeassistant_patterns.md
        - /mnt/data/ADR/ADR-0024-canonical-config-path.md
        - /mnt/data/architecture/tier_mapping.yaml
      prompt: |
        Deliver `architecture_design` matching response_contracts.architecture_shape with:
        - Schema: `room_configs` table + index; PRAGMAs (WAL/NORMAL).
        - JSON1-first design AND a normalized fallback (if json_valid('{"x":1}') fails).
        - SQL sensors that return short state + JSON 'payload' attribute and 'count' attribute where applicable.
        - Update mechanisms:
          * Preferred: AppDaemon/Node-RED/py script endpoint (transactional).
          * Fallback: /bin/sh shell_command with BEGIN/COMMIT and robust quoting.
        - Template accessors that ONLY use state_attr(...,'payload').
        - Package structure under /config/packages in ADR-0024 layout.
        - Integration strategy noting scan_interval={{ scan_interval_seconds }} and error handling.
        CONFIDENCE: [n]%

    # PHASE 4
    - id: sql_room_db.implementation.packages
      persona: strategos_gpt
      label: "Implementation — Production Packages"
      mode: implementation_mode
      protocols: [production_grade_validation, adr_compliance_enforcement, entity_reduction_optimization]
      bindings:
        - /mnt/data/ADR/ADR-0008-normalization-and-determinism-rules.md
        - /mnt/data/ADR/ADR-0021-motion-occupancy-presence-signals.md
        - /mnt/data/hestia_structure.md
      prompt: |
        Emit the files listed in response_contracts.implementation_outputs with these rules:
        - **room_database/sql_sensors.yaml**:
          * One SQL platform entry with three queries:
            - {{ globals.naming.sql_sensors.motion }}: state='ok', attribute 'payload' (JSON map).
            - {{ globals.naming.sql_sensors.vacuum }}: state='ok', attribute 'payload' (JSON map).
            - {{ globals.naming.sql_sensors.cleaning_need }}: state=int 'count', attribute 'payload' (JSON array of room_ids).
          * Include `scan_interval: {{ scan_interval_seconds }}`.
        - **room_database/shell_commands.yaml**:
          * /bin/sh, not bash; wrap in BEGIN…COMMIT; JSON via `tojson`; no templated SQL keywords.
        - **room_database/database_init.sql**:
          * CREATE TABLE + INDEX + PRAGMAs; seed minimal rooms; comment block for normalized fallback schema.
        - **motion_lighting_v2/automations.yaml**:
          * Replace numeric_state threshold with template condition.
          * Read configs via state_attr('{{ globals.naming.sql_sensors.motion }}','payload').
        - **motion_lighting_v2/templates.yaml**:
          * Compatibility sensors reading attributes only.
        - **vacuum_control_v2/scripts.yaml**:
          * MQTT payload built with `tojson`; topic base configurable; mark_room_cleaned via shell_command.
        - **vacuum_control_v2/mqtt_commands.yaml**:
          * Document topic variable; keep deterministic.
        Ensure ADR-0008 formatting and deterministic key order.
        CONFIDENCE: [n]%

    # PHASE 5
    - id: sql_room_db.validation.comprehensive
      persona: strategos_gpt
      label: "Validation — Acceptance & Diagnostics"
      mode: validation_mode
      protocols: [production_grade_validation, adr_compliance_enforcement]
      bindings:
        - /mnt/data/ADR/ADR-0008-normalization-and-determinism-rules.md
      prompt: |
        Produce `validation_pack` with:
        - acceptance_criteria (checkbox matrix) covering DB init, SQL sensors (attribute payloads), write transactions, performance budgets, ADR checks.
        - diagnostics_templates: Jinja that verifies JSON1 availability, payload attribute presence, and entity reduction math.
        - migration_tokens: clearly named, sequential tokens for go/no-go gating.
        - rollback_procedures and performance_benchmarks with concrete targets.
        CONFIDENCE: [n]%

  # Reviewer-in-the-loop: auto-checks the model MUST perform before finalizing any phase
  self_checks:
    - "Assert no JSON is placed in sensor state; only attributes."
    - "Assert no numeric_state uses templated thresholds."
    - "Assert scan_interval present on SQL sensor platform."
    - "Assert names match globals.naming.* everywhere."
    - "Assert write path uses BEGIN/COMMIT and escapes JSON with tojson."
    - "If JSON1 missing, include normalized fallback + switch statement in docs."
