meta_capture:
  description: "Meta-Capture pipeline — schema-enforced dry-run & apply"
  dry_run_samples:  "python3 /config/hestia/tools/meta_capture/meta_capture.py dry-run --inputs /config/hestia/workspace/staging/*.yaml /config/hestia/library/docs/architecture/meta_capture/*.meta.yaml /config/hestia/library/docs/architecture/meta_capture/*.yaml --report /config/hestia/workspace/reports/meta_capture/$(date -u +%Y%m%dT%H%M%SZ)__dry_run.json"
  dry_run_one:      "python3 /config/hestia/tools/meta_capture/meta_capture.py dry-run --inputs <file.yaml> --report /config/hestia/workspace/reports/meta_capture/$(date -u +%Y%m%dT%H%M%SZ)__dry_run.json"
  apply_one:        "python3 /config/hestia/tools/meta_capture/meta_capture.py apply   --inputs <file.yaml> --report /config/hestia/workspace/reports/meta_capture/$(date -u +%Y%m%dT%H%M%SZ)__apply.json"
  validate_schema:  "python3 -c 'import json,sys; import jsonschema; jsonschema.validate({}, json.load(open(\"/config/hestia/tools/meta_capture/meta_capture_intake.schema.json\")))' || true"
  index_tail:       "tail -n 50 /config/hestia/workspace/.hestia/index/meta_capture__index.jsonl"
  prune_reports: "find /config/hestia/workspace/reports/meta_capture -type f -mtime +14 -delete"
  prune_ledger:  "python3 - <<'PY'\nimport sys\np='/config/hestia/workspace/.hestia/index/meta_capture__index.jsonl'\nmaxl=20000\ntry:\n  L=open(p).read().splitlines()\n  open(p,'w').write('\\n'.join(L[-maxl:])+'\\n')\nexcept FileNotFoundError:\n  pass\nPY"
  health: "python3 - <<'PY'\nimport tomllib, json\np='/config/hestia/config/system/hestia.toml'\nC=tomllib.load(open(p,'rb'))['automation']['meta_capture']\nprint(json.dumps({k:C.get(k) for k in ['repo_root','config_root','allowed_root']}, indent=2))\nPY"
# cli.conf — extracted_config (cli)
# canonical HA CLI commands usable at HA OS console
cli:
  ha:
    restart_core: "ha core restart"
    restart_core_safe: "ha core restart --safe-mode"
    restart_supervisor: "ha supervisor restart"
    reboot_host: "ha host reboot"
    shutdown_host: "ha host shutdown"
    rebuild_core: "ha core rebuild"
    repair_supervisor: "ha supervisor repair"
    help: "ha help"

  blueprint_validation:
    check_paths: "grep -r 'use_blueprint:' packages/ | grep -v 'path: [A-Za-z]*/.*\.yaml'"
    validate_references: "find blueprints/automation -name '*.yaml' | xargs -I {} basename {} | sort"
    fix_canonical_paths: "Use format: author_name/blueprint_name.yaml (e.g., Blackshome/sensor-light.yaml)"

  error_pattern_management:
    search_errors: "grep -r 'Template variable.*undefined\|Command failed.*return code\|Unable to find.*blueprint' home-assistant.log"
    validate_patterns: "python hestia/tools/utils/validators/error_pattern_validator.py"
    apply_fixes: "Reference hestia/tools/error_patterns.yml for systematic resolution"

  backup_management:
    validate_agents: "hestia/tools/backup_validator.sh"
    check_failed_uploads: "jq '.data.backups[] | select(.failed_agent_ids | length > 0)' .storage/backup"
    agent_status: "jq '.data.config.agents' .storage/backup"
    last_attempt: "jq -r '.data.config.last_attempted_automatic_backup' .storage/backup"
    synology_connectivity: "ping -c 3 192.168.0.104 && curl -s http://192.168.0.104:5000/webapi/entry.cgi?api=SYNO.API.Info"
    normalize_backup_names: "python3 hestia/tools/utils/normalize_backup_names.py --apply"
    check_backup_naming: "python3 hestia/tools/utils/normalize_backup_names.py --dry-run"
    backup_directory: "/config/hestia/workspace/archive/vault/backups"
    adr_0018_pattern: "<name>.<YYYYMMDDTHHMMSSZ>.bk"
    backup_sweeper_dry_run: "python /config/hestia/tools/backup_sweeper.py --dry-run"
    backup_sweeper_execute: "python /config/hestia/tools/backup_sweeper.py"
    backup_sweeper_validate: "python /config/hestia/tools/backup_sweeper.py --validate-only"
    backup_sweeper_component_index: "python /config/hestia/tools/sweeper/index.py --help"
    backup_sweeper_component_naming: "python /config/hestia/tools/sweeper/naming_convention.py --help"
    backup_sweeper_component_lifecycle: "python /config/hestia/tools/sweeper/sweeper.py --help"
    backup_sweeper_component_vault: "python /config/hestia/tools/sweeper/vault_warden.py --help"
    backup_sweeper_component_report: "python /config/hestia/tools/sweeper/sweeper_report.py --help"
    backup_sweeper_reports_index: "cat /config/hestia/reports/_index.jsonl | jq -s 'sort_by(.created_at)'"
    backup_sweeper_health_score: "tail -1 /config/hestia/reports/_index.jsonl | jq '.health_score'"
    backup_sweeper_last_run: "ls -la /config/hestia/reports/ | tail -1"
    backup_sweeper_workspace_health: "python /config/hestia/tools/backup_sweeper.py --dry-run | grep 'Workspace Health Score'"

  lineage_guardian_management:
    description: "Commands for entity lineage validation and correction in YAML templates"
    full_pipeline: "cd /config/hestia/tools/lineage_guardian && python lineage_guardian_cli.py --verbose"
    scanner_only: "cd /config/hestia/tools/lineage_guardian && python lineage_guardian/graph_scanner.py --output ./.artifacts/graph.json --template-dir /config/domain/templates/ --verbose"
    validator_only: "cd /config/hestia/tools/lineage_guardian && python lineage_guardian/lineage_validator.py --graph-file ./.artifacts/graph.json --output ./.artifacts/violations.json --verbose"
    corrector_only: "cd /config/hestia/tools/lineage_guardian && python lineage_guardian/lineage_corrector.py --violations-file ./.artifacts/violations.json --plan-dir ./.artifacts/_plan"
    integrity_check: "cd /config/hestia/tools/lineage_guardian && python lineage_guardian/graph_integrity_checker.py --graph-file ./.artifacts/graph.json --output ./.artifacts/integrity.json"
    generate_report: "cd /config/hestia/tools/lineage_guardian && python lineage_guardian/lineage_report.py --graph ./.artifacts/graph.json --violations ./.artifacts/violations.json --integrity ./.artifacts/integrity.json --outdir ./.artifacts/report"
    open_documentation: "code /config/hestia/library/docs/guides/development/lineage_guardian_copilot_guide.md"
    vscode_task_full: "Terminal → Run Task → 'Lineage Guardian: Full Pipeline (dry-run)'"
    vscode_task_scanner: "Terminal → Run Task → 'Lineage Guardian: Scanner Only'"
    vscode_task_docs: "Terminal → Run Task → 'Lineage Guardian: Open Documentation'"
    configuration_file: "/config/hestia/config/system/hestia.toml → [automation.lineage_guardian]"
    log_location: "/config/hestia/workspace/operations/logs/lineage/"
    artifacts_location: "/config/hestia/tools/lineage_guardian/.artifacts/"
    validation:
      check_configuration: "grep -A 20 '\[automation.lineage_guardian\]' /config/hestia/config/system/hestia.toml"
      verify_cli_wrapper: "cd /config/hestia/tools/lineage_guardian && python lineage_guardian_cli.py --help"
      test_scanner_direct: "cd /config/hestia/tools/lineage_guardian && python lineage_guardian/graph_scanner.py --help"
      check_template_dir: "ls -la /config/domain/templates/"
      validate_output_dir: "ls -la /config/hestia/tools/lineage_guardian/.artifacts/ || echo 'artifacts dir will be created on first run'"

  entity_duplicate_management:
    scan_duplicates: "hestia/tools/entity_duplicate_cleaner.sh scan"
    analyze_duplicates: "hestia/tools/entity_duplicate_cleaner.sh analyze"
    cleanup_suggestions: "hestia/tools/entity_duplicate_cleaner.sh suggest"
    find_mobile_duplicates: "jq '.data.entities[] | select(.platform == \"mobile_app\" and (.entity_id | test(\"_[0-9]+$\")))' .storage/core.entity_registry"
    programmatic_disable: "hestia/tools/entity_duplicate_cleaner.sh disable --entity-id ENTITY_ID --token $(grep HA_LLAT_KEY secrets.yaml | cut -d' ' -f2)"
    programmatic_rename: "hestia/tools/entity_duplicate_cleaner.sh rename --old-id OLD_ID --new-id NEW_ID --token $(grep HA_LLAT_KEY secrets.yaml | cut -d' ' -f2)"
    programmatic_takeover: "hestia/tools/entity_duplicate_cleaner.sh takeover --base-id BASE_ID --suffix-id SUFFIX_ID --token $(grep HA_LLAT_KEY secrets.yaml | cut -d' ' -f2)"
    dry_run_takeover: "hestia/tools/entity_duplicate_cleaner.sh takeover --base-id BASE_ID --suffix-id SUFFIX_ID --token $(grep HA_LLAT_KEY secrets.yaml | cut -d' ' -f2) --dry-run"
    example_ephone_takeover: "hestia/tools/entity_duplicate_cleaner.sh takeover --base-id sensor.ephone_uk_activity --suffix-id sensor.ephone_uk_activity_2 --token $(grep HA_LLAT_KEY secrets.yaml | cut -d' ' -f2) --dry-run"
    entity_id_takeover_process: "Manual: Disable base → Settings > Devices & Services > Entities > [base_entity] > Disable → [suffixed_entity] > Edit entity_id to base name"

  workspace_hygiene:
    check_cache_loading: "grep -r 'workspace/cache\|hestia/workspace' configuration.yaml packages/"
    validate_paths: "tools/utils/validators/scan_hardcoded_paths.sh --scan-all"
    canvas_location: "/Users/evertappels/actions-runner/Projects/HASS.local/canvas (work-in-progress)"

  phantom_entity_management:
    description: "Commands for resolving orphaned mobile device entities showing 'status not provided'"
    analysis:
      identify_orphaned_entities: "jq -r '.data.entities[] | select(.config_entry_id == \"01K6ESGN474SS9EF6A5HZP75VY\" or .config_entry_id == \"01K6DA12T2HAMM9YQ73V8W6T6N\") | .entity_id' /config/.storage/core.entity_registry"
      count_mobile_entities: "jq '.data.entities[] | select(.platform == \"mobile_app\" and .disabled_by == null) | .entity_id' /config/.storage/core.entity_registry | wc -l"
      list_config_entries: "jq -r '.data.entries[] | select(.domain == \"mobile_app\") | {entry_id, title}' /config/.storage/core.config_entries"
      check_entity_relationships: "jq -r '.data.entities[] | select(.entity_id == \"ENTITY_ID\") | {entity_id, config_entry_id, device_id, platform}' /config/.storage/core.entity_registry"
    cleanup_workflow:
      dry_run_analysis: "/config/hestia/tools/phantom_entity_cleanup.sh --dry-run"
      stop_ha: "ha core stop"
      execute_cleanup: "/config/hestia/tools/phantom_entity_cleanup.sh --execute"
      start_ha: "ha core start"
      generate_renames: "/config/hestia/tools/generate_entity_renames.sh"
    validation:
      verify_no_orphans: "jq -r '.data.entities[] | select(.config_entry_id == \"01K6ESGN474SS9EF6A5HZP75VY\" or .config_entry_id == \"01K6DA12T2HAMM9YQ73V8W6T6N\")' /config/.storage/core.entity_registry"
      count_entities_before_after: "jq '.data.entities | length' /config/.storage/core.entity_registry"
      check_mobile_app_suffix_entities: "jq -r '.data.entities[] | select(.platform == \"mobile_app\" and (.entity_id | test(\"_[0-9]+$\"))) | .entity_id' /config/.storage/core.entity_registry"
    backup_management:
      list_backups: "ls -la /config/hestia/reports/*/.*storage_*/"
      rollback_storage: "cp /config/hestia/reports/[DATE]/.storage_[TIMESTAMP]/* /config/.storage/"
      verify_backup_integrity: "jq . /config/hestia/reports/[DATE]/.storage_[TIMESTAMP]/core.entity_registry > /dev/null"
    troubleshooting:
      check_ha_running: "ps aux | grep -E '(home-assistant|hass)' | grep -v grep"
      validate_jq: "jq --version && jq . /config/.storage/core.entity_registry > /dev/null"
      test_mobile_app_connectivity: "Check Settings → Devices & Services → Mobile App in HA GUI"

  prompt_library_management:
    description: "Commands for prompt library consolidation and management"
    canonical_path: "/config/hestia/library/prompts"
    tools_path: "/config/hestia/tools"
    preparation:
      dry_run_prep: "/config/bin/prompt-prep prep --source /config/hestia/library/prompts/migration/incoming --output /config/hestia/library/prompts/migration/processed --dry-run"
      validate_frontmatter: "/config/bin/prompt-prep validate --prep-dir /config/hestia/library/prompts/migration/processed"
      production_prep: "/config/bin/prompt-prep prep --source /config/hestia/library/prompts/migration/incoming --output /config/hestia/library/prompts/migration/processed"
    catalog_management:
      place_in_catalog: "/config/bin/prompt-prep place --processed-dir /config/hestia/library/prompts/migration/processed --catalog-root /config/hestia/library/prompts/catalog --generate-copies"
      sync_copies: "/config/bin/prompt-prep sync"
      validate_copies: "/config/bin/prompt-prep check"
    staging:
      copy_to_staging: "cp -r /config/hestia/library/prompts/catalog/* /config/hestia/library/prompts/migration/incoming/"
      list_migration_files: "find /config/hestia/library/prompts/migration -type f -name '*.md' | wc -l"
    validation:
      check_canonical_structure: "ls -la /config/hestia/library/prompts/catalog/{by_domain,by_tier,by_persona}"
      verify_no_symlinks: "find /config/hestia/library/prompts -type l"
      count_processed_files: "find /config/hestia/library/prompts/migration/processed -name '*.md' | wc -l"

  ha_diagnostics:
    run_triage: "python3 /config/hestia/tools/ha_diagnostics/run_diagnostics.py --mode triage"
    run_analysis: "python3 /config/hestia/tools/ha_diagnostics/run_diagnostics.py --mode analysis"
    run_remediation: "python3 /config/hestia/tools/ha_diagnostics/run_diagnostics.py --mode remediation"
    run_docs: "python3 /config/hestia/tools/ha_diagnostics/run_diagnostics.py --mode documentation"
    last_report: "ls -1t /config/hestia/reports/ha-diagnostics-copilot_*.yaml | head -1"

  file_operations_governance:
    description: "ADR-0027 compliant file writing operations with atomic guarantees"
    write_broker_replace: "/config/bin/write-broker replace --file <path> --search <old> --replace <new> --commit --msg <message>"
    write_broker_dry_run: "/config/bin/write-broker replace --file <path> --search <old> --replace <new> --msg <message>"
    write_broker_validate: "/config/bin/write-broker validate --file <path>"
    vscode_task: "Terminal → Run Task → 'File Operations: Atomic Replace with Write-Broker'"
    backup_pattern: "Creates file.wbak.<timestamp> for every change"
    rollback_example: "mv file.wbak.20251017T123000Z file"
    path_enforcement: "Automatically rejects writes outside /config directory"
    md5_verification: "Generates before/after MD5 checksums for change verification"
    audit_trail: "Complete operation logging with commit messages and timestamps"
    atomic_operations: "Guaranteed atomic file modifications with temp file pattern"
    governance_compliance: "Enforces ADR-0024 canonical paths and ADR-0027 write governance"

  smb_mount_examples:
    macos:
      mount_config: "mount_smbfs //user@homeassistant.reverse-beta.ts.net/config ~/mnt/ha-config"
      unmount: "umount ~/mnt/ha-config"
    windows:
      mount_config: "net use Z: \\\\homeassistant.reverse-beta.ts.net\\config /user:<samba_user> <password>"
      unmount: "net use Z: /delete"
    linux:
      mount_config: "sudo mount -t cifs //homeassistant.reverse-beta.ts.net/config /mnt/ha-config -o username=<samba_user>"
      unmount: "sudo umount /mnt/ha-config"

  room_db_diagnostics:
    description: "Room-DB verification and cross-check utilities"
    run_diagnostic: "python3 /config/hestia/tools/diag/dump_room_db_shape.py | tee /config/hestia/workspace/operations/logs/room_db/$(date -u +%Y%m%dT%H%M%SZ)__dump_room_db_shape__run.json"
    tail_latest_report: "ls -1t /config/hestia/workspace/operations/logs/room_db/*.json | head -1 | xargs cat | jq ."
    check_sensors:
      motion_lighting: "curl -s -H 'Authorization: Bearer '$(grep HA_TOKEN /config/secrets.yaml | awk '{print $2}') http://homeassistant.local:8123/api/states/sensor.room_configs_motion_lighting | jq .attributes.payload"
      vacuum_control: "curl -s -H 'Authorization: Bearer '$(grep HA_TOKEN /config/secrets.yaml | awk '{print $2}') http://homeassistant.local:8123/api/states/sensor.room_configs_vacuum_control | jq .attributes.payload"
      activity_tracking: "curl -s -H 'Authorization: Bearer '$(grep HA_TOKEN /config/secrets.yaml | awk '{print $2}') http://homeassistant.local:8123/api/states/sensor.room_configs_activity_tracking_dict | jq .attributes.payload"
    appdaemon_endpoints:
      health_global: "curl -s http://a0d7b954-appdaemon:5050/api/appdaemon/room_db_health | jq ."
      update_global: "curl -s -X POST -H 'Content-Type: application/json' -d '{}' http://a0d7b954-appdaemon:5050/api/appdaemon/room_db_update_config | jq ."
      health_app_scoped: "curl -s http://a0d7b954-appdaemon:5050/api/app/room_db_updater/health | jq ."
      health_compat_nested: "curl -s http://a0d7b954-appdaemon:5050/api/app/room_db_updater/room_db/health | jq ."
    sqlite_inspector:
      run: "python3 /config/hestia/tools/diag/room_db_inspect.py | tee /config/hestia/workspace/operations/logs/room_db/$(date -u +%Y%m%dT%H%M%SZ)__room_db_inspect__run.json"
      run_with_path: "python3 /config/hestia/tools/diag/room_db_inspect.py --db /config/room_database.db | tee /config/hestia/workspace/operations/logs/room_db/$(date -u +%Y%m%dT%H%M%SZ)__room_db_inspect__run.json"

  network_scanner_diagnostics:
    description: "Verify and generate MAC mappings from HA registries and sensor.network_scanner"
    run_verifier: "python3 /config/hestia/tools/diag/verify_network_scanner.py | tee /config/hestia/workspace/operations/logs/network_scanner/$(date -u +%Y%m%dT%H%M%SZ)__verify_network_scanner__run.log"
    tail_latest_log: "ls -1t /config/hestia/workspace/operations/logs/network_scanner/*.log | head -1 | xargs tail -n +1"
    output_yaml: "/config/verified_network_scanner.yaml"
    notes:
      - "Script reads HA_TOKEN from /config/secrets.yaml"
      - "Generates a consolidated YAML mapping grouped by area"
      - "Shows unmapped network devices for follow-up"

