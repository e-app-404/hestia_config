bedroom_universal_matrix_route:
  alias: "Bedroom Universal – Matrix Route (A/B)"
  mode: queued
  fields:
    a: { description: "A channel (video) number 1-4", example: 1 }
    b: { description: "B channel (audio) number 1-4", example: 1 }
    turn_on_tv: { default: true }
  sequence:
    - if: "{{ turn_on_tv | default(true) }}"
      then:
        - action: media_player.turn_on
          target: { entity_id: media_player.bedroom_tv_alpha }
    - delay: "0.25"

    - action: media_player.select_source # Ensure the TV is on HDMI when routing the matrix
      target: { entity_id: media_player.bedroom_tv_hub_alpha_wifi }
      data: { source: "HDMI" }
      continue_on_error: true
    - action: script.matrix_control
      data: { command: "a_{{ a }}" }
      continue_on_error: true
    - action: script.matrix_control
      data: { command: "b_{{ b }}" }
      continue_on_error: true
      # Assumption: A1/B1=Apple TV, A2/B2=PS4, A3/B3=Switch, A4/B4=Wii. # TODO: verify on hardware. # confidence: 0.75

bedroom_universal_route_for_source:
  alias: "Bedroom Universal – Route for Source"
  mode: queued
  fields:
    source:
      description: "Canonical source name from input_select"
      example: "Apple TV – Plex"
  sequence:
    - variables:
        src: "{{ source }}"
        map:
          "AirPlay (via Apple TV)": { a:1, b:1 }
          "Apple TV (Home screen)": { a:1, b:1 }
          "Apple TV – Plex": { a:1, b:1 }
          "PlayStation 4": { a:2, b:2 }
          "Nintendo Switch": { a:3, b:3 }
          "Nintendo Wii": { a:4, b:4 }
    - choose:
        - conditions: "{{ src in map.keys() }}" # Matrix routes (external HDMI)
          sequence:
            - action: script.bedroom_universal_matrix_route
              data:
                a: "{{ map[src].a }}"
                b: "{{ map[src].b }}"
                turn_on_tv: true

        - conditions: "{{ src in ['Samsung TV','DLNA (TV)','Plex (Samsung TV app)','Chromecast (TV)'] }}"
          sequence: # Internal TV paths (no matrix video; ensure TV on and try to select)
            - action: media_player.turn_on
              target: { entity_id: media_player.bedroom_tv_alpha }
            - delay: "0.30"

            - action: media_player.select_source # Put the TV on its internal path
              target: { entity_id: media_player.bedroom_tv_hub_alpha_wifi }
              data: { source: "TV" }
              continue_on_error: true

            - action: media_player.select_source # Best-effort selection on the TV entity (labels vary); safe to keep
              target: { entity_id: media_player.bedroom_tv_alpha }
              data:
                source: >-
                  {% set wanted = {
                    'Samsung TV':'TV',
                    'DLNA (TV)':'DLNA',
                    'Plex (Samsung TV app)':'Plex',
                    'Chromecast (TV)':'Chromecast'
                  }[src] %}
                  {{ wanted }}
              continue_on_error: true

    - choose:
        - conditions: > # App/foreground selection on device when applicable
            {{ src == 'Apple TV – Plex'
                and not is_state_attr('media_player.bedroom_apple_tv_alpha','source','Plex')
                and states('media_player.bedroom_apple_tv_alpha') not in ['unavailable','unknown'] }}
          sequence:
            - action: media_player.select_source
              target: { entity_id: media_player.bedroom_apple_tv_alpha }
              data: { source: "Plex" }
        - conditions: "{{ src == 'Apple TV (Home screen)' }}"
          sequence:
            - action: remote.send_command # TODO: confirm the Apple TV remote entity_id created by the integration.

              target: { entity_id: remote.bedroom_apple_tv_alpha }
              data: { command: home }
        - conditions: "{{ src == 'AirPlay (via Apple TV)' }}"
          sequence: [] # AirPlay attaches automatically; no explicit app
    - action: input_select.select_option
      target: { entity_id: input_select.bedroom_universal_source }
      data: { option: "{{ src }}" }
  # confidence: 0.90

bedroom_universal_turn_on:
  alias: "Bedroom Universal – Turn On"
  mode: restart
  sequence:
    - variables:
        last: "{{ states('input_select.bedroom_universal_source') or 'Apple TV (Home screen)' }}"
    - action: script.bedroom_universal_route_for_source
      data: { source: "{{ last }}" }
  # confidence: 0.92

bedroom_universal_turn_off:
  alias: "Bedroom Universal – Turn Off"
  mode: queued
  sequence:
    - variables:
        prio:
          [
            "media_player.bedroom_apple_tv_alpha",
            "media_player.playstation_4",
            "media_player.bedroom_tv_alpha",
          ]
        active: >- # Pause/stop active child first (best effort)
          {% for e in prio %}
            {% set s = states(e) %}
            {% if s not in ['off','idle','standby','unknown','unavailable'] %}
              {{ e }}{% break %}
            {% endif %}
          {% endfor %}
    - choose:
        - conditions: "{{ active | length > 0 }}"
          sequence:
            - action: media_player.media_pause
              target: { entity_id: "{{ active }}" }
              continue_on_error: true

    - action: remote.send_command # Sleep Apple TV via remote; turn off TV last
      target: { entity_id: remote.bedroom_apple_tv_alpha }
      data: { command: suspend }
      continue_on_error: true
    - action: media_player.turn_off
      target: { entity_id: media_player.bedroom_tv_alpha }
      continue_on_error: true
  # confidence: 0.93

  commands:
    turn_on:
      action: script.turn_on
      target:
        entity_id: script.bedroom_universal_turn_on

    turn_off:
      action: script.turn_on
      target:
        entity_id: script.bedroom_universal_turn_off

    select_source:
      action: script.turn_on
      target:
        entity_id: script.bedroom_universal_route_for_source
      data:
        variables:
          source: "{{ source }}"

    # Volume → SONOS Ray (unchanged)
    volume_set:
      action: media_player.volume_set
      target: { entity_id: media_player.bedroom_sonos_ray }
      data: { volume_level: "{{ volume_level }}" }
    volume_up:
      action: media_player.volume_up
      target: { entity_id: media_player.bedroom_sonos_ray }
    volume_down:
      action: media_player.volume_down
      target: { entity_id: media_player.bedroom_sonos_ray }
    volume_mute:
      action: media_player.volume_mute
      target: { entity_id: media_player.bedroom_sonos_ray }
      data: { is_volume_muted: "{{ is_volume_muted }}" }

    # Transport → helper script with variable (use script.turn_on)
    media_play:
      action: script.turn_on
      target:
        entity_id: script.bedroom_universal_media_cmd
      data:
        variables:
          command: "media_play"

    media_pause:
      action: script.turn_on
      target:
        entity_id: script.bedroom_universal_media_cmd
      data:
        variables:
          command: "media_pause"

    media_stop:
      action: script.turn_on
      target:
        entity_id: script.bedroom_universal_media_cmd
      data:
        variables:
          command: "media_stop"

    media_next_track:
      action: script.turn_on
      target:
        entity_id: script.bedroom_universal_media_cmd
      data:
        variables:
          command: "media_next_track"

    media_previous_track:
      action: script.turn_on
      target:
        entity_id: script.bedroom_universal_media_cmd
      data:
        variables:
          command: "media_previous_track"

bedroom_universal_media_cmd:
  alias: Bedroom Universal – Media Cmd
  mode: queued
  fields:
    command:
      description: "media command"
      example: "media_pause"
  sequence:
    - variables:
        prio:
          - media_player.bedroom_apple_tv_alpha
          - media_player.playstation_4
          - media_player.bedroom_tv_alpha
          - media_player.bedroom_sonos_ray
        active: >-
          {% for e in prio %}
            {% set s = states(e) %}
            {% if s not in ['off','idle','standby','unknown','unavailable'] %}
              {{ e }}{% break %}
            {% endif %}
          {% endfor %}
    - choose:
        - conditions: "{{ active | length > 0 }}"
          sequence:
            - action: media_player.{{ command }}
              target:
                entity_id: "{{ active }}"
              continue_on_error: true
