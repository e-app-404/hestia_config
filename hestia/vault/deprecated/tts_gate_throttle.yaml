# ══════════════════════════════════════════════════════════════════
# ⟫⟫ MOVED TO PACKAGE: package_tts__gate.yaml
# ⟫⟫ LEGACY
# ══════════════════════════════════════════════════════════════════

tts_gate:
  alias: "TTS – Gate/Throttle"
  description: "Speak only if the key hasn't exceeded repeats within the cooldown."
  mode: parallel
  max: 10
  fields:
    key:
      description: "Unique key for this TTS (e.g., 'ha_startup', 'fridge_left_open')"
      required: true
      selector: { text: {} }
    message:
      description: "What to say"
      required: true
      selector: { text: {} }
    media_player:
      description: "Media player to play on"
      required: true
      selector: { entity: { domain: media_player } }
    tts_entity:
      description: "TTS engine entity"
      required: true
      selector: { entity: { domain: tts } }
    volume:
      description: "Volume level (0..1)"
      default: 0.5
      selector: { number: { min: 0, max: 1, step: 0.05, mode: slider } }
    language:
      description: "TTS language code"
      default: en
      selector: { text: {} }
    cooldown_sec:
      description: "Seconds in which repeats are limited"
      default: 1800 # 30 minutes default
      selector: { number: { min: 0, max: 86400, step: 10, mode: slider } }
    max_repeats:
      description: "Max additional repeats allowed *within* the cooldown window"
      default: 1 # say once + allow 1 repeat -> total 2 times
      selector: { number: { min: 0, max: 10, step: 1 } }
  sequence:
    - variables:
        reg_src: "{{ state_attr('var.tts_guard','registry') | default('{}', true) }}"
        reg: "{{ reg_src if reg_src is mapping else (reg_src | from_json) }}"
        key_str: "{{ key | string }}"
        entry: "{{ reg.get(key_str, {}) }}"
        last_ts: "{{ entry.get('last_ts', 0) }}"
        prev_count: "{{ entry.get('count', 0) }}"
        now_ts: "{{ as_timestamp(now()) | float }}"
        cooldown: "{{ cooldown_sec | int(0) }}"
        window_ok: "{{ (now_ts - (last_ts|float)) >= cooldown }}"
        # allow if outside cooldown OR within cooldown but repeats not exhausted
        allow: "{{ window_ok or (prev_count | int(0)) < (max_repeats | int(1)) }}"
        new_count: "{{ 1 if window_ok else (prev_count | int(0) + 1) }}"
    - choose:
        - conditions: "{{ allow }}"
          sequence:
            - action: tts.speak
              target:
                entity_id: "{{ tts_entity }}"
              data:
                cache: true
                volume_level: "{{ volume }}"
                media_player_entity_id: "{{ media_player }}"
                message: "{{ message }}"
                language: "{{ language }}"
            - variables:
                new_reg: >-
                  {% set r = reg.copy() %}
                  {% set _ = r.update({ key_str: {'last_ts': now_ts, 'count': new_count } }) %}
                  {{ r }}
            - action: var.set
              data:
                entity_id: var.tts_guard
                attributes:
                  registry: "{{ new_reg | tojson }}"
      # else: do nothing (throttled)
# ──────────────────────────────────────────────────────────────────────────────
# HOW THIS SCRIPT WORKS
#
# For each key, we remember {last_ts, count} in var.tts_guard.registry.
#
# If outside the cooldown window → we reset and speak.
#
# If inside cooldown:
#   • speak while count < max_repeats
#   • otherwise drop the TTS.
#
# With max_repeats: 1 you’ll get at most two plays per cooldown (initial + one repeat).
# ──────────────────────────────────────────────────────────────────────────────

# MIGRATION TEMPLATE: Direct TTS → Throttled Script
#
# Before (direct TTS call):
# - action: tts.speak
#   target:
#     entity_id: <tts_entity>
#   data:
#     cache: true
#     volume_level: <volume>
#     media_player_entity_id: <media_player>
#     message: <message>
#     language: <language>
#
# After (throttled script):
# - action: script.tts_gate
#   data:
#     key: <unique_key>
#     tts_entity: <tts_entity>
#     media_player: <media_player>
#     message: <message>
#     language: <language>
#     volume: <volume>
#     cooldown_sec: <cooldown_seconds>     # e.g., 86400 for 24h
#     max_repeats: <max_repeats>           # e.g., 1 for at most two plays per cooldown
#
# Migration steps:
# - Replace tts.speak actions with script.tts_gate.
# - Map media_player_entity_id → media_player, volume_level → volume.
# - Add a unique key for each TTS event.
# - Set cooldown_sec and max_repeats as needed.
