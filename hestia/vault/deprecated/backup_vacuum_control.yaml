# ══════════════════════════════════════════════════════════════════
# ⟫⟫ VACUUM CONTROL  •  Cleaning Automation & Room Status ◀
# ⟫⟫ configuration.yaml  •  packages: !include_dir_named packages
# ⟫⟫ Tier: β  •  Domain: inference  •  Created: 2025-08-05
# ⟫⟫ Last Updated: 2025-08-05
# ══════════════════════════════════════════════════════════════════

# ══ Input Helpers: Cleaning State & Timestamps ══
input_datetime:
  living_room_last_cleaned:
    name: Living Room Last Cleaned
    has_date: true
    has_time: true
  kitchen_last_cleaned:
    name: Kitchen Last Cleaned
    has_date: true
    has_time: true
  powder_room_last_cleaned:
    name: Powder Room Last Cleaned
    has_date: true
    has_time: true
  downstairs_hallway_last_cleaned:
    name: Downstairs Hallway Last Cleaned
    has_date: true
    has_time: true
  laundry_room_last_cleaned:
    name: Laundry Room Last Cleaned
    has_date: true
    has_time: true
  cleaning_job_last_run:
    name: "Downstairs Cleaning Job Last Run"
    has_date: true
    has_time: true

input_boolean:
  living_room_needs_cleaning:
    name: Living Room Needs Cleaning
  kitchen_needs_cleaning:
    name: Kitchen Needs Cleaning
  powder_room_needs_cleaning:
    name: Powder Room Needs Cleaning
  downstairs_hallway_needs_cleaning:
    name: Downstairs Hallway Needs Cleaning
  laundry_room_needs_cleaning:
    name: Laundry Room Needs Cleaning
  downstairs_cleaning_success:
    name: Downstairs Cleaning Job Success

# ══ Automations: Cleaning Logic & Notifications ══
automation:
  - alias: "Notify on Vacuum State Change"
    id: "vacuum_state_change_notification"
    trigger:
      - platform: state
        entity_id: vacuum.valetudo_roborocks5
    action:
      - service: script.notify_engine
        data:
          who: "evert"
          title: "Vacuum Status Update"
          value1: >
            Vacuum changed from "{{ trigger.from_state.state }}" to "{{ trigger.to_state.state }}".
          group: "vacuum"
          tag_id: "vacuum_state"

  - alias: "Run Downstairs Cleaning Job Daily"
    id: "run_downstairs_cleaning_job_daily"
    trigger:
      - platform: time
        at: "09:30:00"
    action:
      - action: script.turn_on
        target:
          entity_id: script.cleaning_job_downstairs

  - alias: "Initialize Last Cleaned Helpers on Startup"
    id: initialize_last_cleaned_helpers
    trigger:
      - platform: homeassistant
        event: start
    action:
      - repeat:
          for_each:
            - input_datetime.living_room_last_cleaned
            - input_datetime.kitchen_last_cleaned
            - input_datetime.powder_room_last_cleaned
            - input_datetime.downstairs_hallway_last_cleaned
            - input_datetime.laundry_room_last_cleaned
            - input_datetime.cleaning_job_last_run
          sequence:
            - if: >
                {{ states(repeat.item) in ['unknown', 'unavailable', '', none] }}
              then:
                - action: input_datetime.set_datetime
                  target:
                    entity_id: "{{ repeat.item }}"
                  data:
                    datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"

  - alias: "Valetudo Error Notification"
    id: "valetudo_error_notification"
    description: "Notify on any error from Valetudo robot"
    trigger:
      - platform: state
        entity_id: sensor.valetudo_roborocks5_error
        from: ~
        to: ~
    condition:
      - condition: template
        value_template: >
          {{ trigger.to_state.state not in ['unknown', '', 'ok', 'none', 'No error', 'idle', 'ready'] }}
    action:
      - action: notify.notify
        data:
          message: "Oh no, there's something wrong with the cleaning ladybot! Error: {{ states('sensor.valetudo_roborocks5_error') }}"
          title: "🤖 Valetudo needs your help"
    mode: single

  - alias: "Downstairs Cleaning Daily Report"
    id: downstairs_cleaning_daily_report
    description: "Send a summary notification after daily downstairs cleaning job"
    trigger:
      - platform: state
        entity_id: input_boolean.downstairs_cleaning_success
        from: "off"
        to: "on"
    action:
      - action: notify.notify
        data:
          title: "🤖 Downstairs Cleaning Completed"
          message: >
            🧹 Downstairs cleaning job finished!
            Living Room: last cleaned {{ states('input_datetime.living_room_last_cleaned') }}, days since: {{ states('sensor.living_room_days_since_last_cleaned') }}
            Kitchen: last cleaned {{ states('input_datetime.kitchen_last_cleaned') }}, days since: {{ states('sensor.kitchen_days_since_last_cleaned') }}
            Powder Room: last cleaned {{ states('input_datetime.powder_room_last_cleaned') }}, days since: {{ states('sensor.powder_room_days_since_last_cleaned') }}
            Hallway: last cleaned {{ states('input_datetime.downstairs_hallway_last_cleaned') }}, days since: {{ states('sensor.downstairs_hallway_days_since_last_cleaned') }}
            Laundry: last cleaned {{ states('input_datetime.laundry_room_last_cleaned') }}, days since: {{ states('sensor.laundry_room_days_since_last_cleaned') }}
            Run time: {{ states('input_datetime.cleaning_job_last_run') }}
    mode: single

  # 1A. Needs cleaning after activity (all rooms, grouped)
  - alias: "Set Needs Cleaning After Activity"
    id: "set_needs_cleaning_after_activity"
    mode: parallel
    trigger:
      - platform: state
        entity_id:
          - sensor.living_room_last_activity
          - sensor.kitchen_last_activity
          - sensor.powder_room_last_activity
          - sensor.hallway_downstairs_last_activity
          - sensor.laundry_room_last_activity
    variables:
      rooms:
        {
          "sensor.living_room_last_activity":
            {
              "cleaned": "input_datetime.living_room_last_cleaned",
              "flag": "input_boolean.living_room_needs_cleaning",
            },
          "sensor.kitchen_last_activity":
            {
              "cleaned": "input_datetime.kitchen_last_cleaned",
              "flag": "input_boolean.kitchen_needs_cleaning",
            },
          "sensor.powder_room_last_activity":
            {
              "cleaned": "input_datetime.powder_room_last_cleaned",
              "flag": "input_boolean.powder_room_needs_cleaning",
            },
          "sensor.hallway_downstairs_last_activity":
            {
              "cleaned": "input_datetime.downstairs_hallway_last_cleaned",
              "flag": "input_boolean.downstairs_hallway_needs_cleaning",
            },
          "sensor.laundry_room_last_activity":
            {
              "cleaned": "input_datetime.laundry_room_last_cleaned",
              "flag": "input_boolean.laundry_room_needs_cleaning",
            },
        }

    action:
      - action: script.turn_on
        target:
          entity_id: script.set_needs_cleaning_if_needed
        data:
          variables:
            activity_sensor: "{{ trigger.entity_id }}"
            cleaned_datetime: "{{ rooms[trigger.entity_id].cleaned }}"
            needs_cleaning_boolean: "{{ rooms[trigger.entity_id].flag }}"

      - action: persistent_notification.create
        data:
          title: "🧹 Cleaning flag raised"
          message: >-
            {{ trigger.entity_id }} flagged for cleaning.
            Needs cleaning: {{ rooms[trigger.entity_id].flag }}
            Last cleaned: {{ rooms[trigger.entity_id].cleaned }}
          notification_id: "cleaning_flag_{{ trigger.entity_id | replace('.', '_') }}"

  # 1B. Needs cleaning after X days (all rooms, grouped)
  - alias: "Flag Rooms Needing Cleaning After X Days"
    id: "flag_rooms_needing_cleaning_after_x_days"
    mode: parallel
    trigger:
      - platform: numeric_state
        entity_id:
          - sensor.living_room_days_since_last_cleaned
          - sensor.kitchen_days_since_last_cleaned
          - sensor.powder_room_days_since_last_cleaned
          - sensor.downstairs_hallway_days_since_last_cleaned
          - sensor.laundry_room_days_since_last_cleaned
        above: 1
    variables:
      thresholds:
        {
          "sensor.living_room_days_since_last_cleaned": 1,
          "sensor.kitchen_days_since_last_cleaned": 1,
          "sensor.powder_room_days_since_last_cleaned": 1,
          "sensor.downstairs_hallway_days_since_last_cleaned": 1,
          "sensor.laundry_room_days_since_last_cleaned": 1,
        }
      flags:
        {
          "sensor.living_room_days_since_last_cleaned": "input_boolean.living_room_needs_cleaning",
          "sensor.kitchen_days_since_last_cleaned": "input_boolean.kitchen_needs_cleaning",
          "sensor.powder_room_days_since_last_cleaned": "input_boolean.powder_room_needs_cleaning",
          "sensor.downstairs_hallway_days_since_last_cleaned": "input_boolean.downstairs_hallway_needs_cleaning",
          "sensor.laundry_room_days_since_last_cleaned": "input_boolean.laundry_room_needs_cleaning",
        }
    condition:
      - condition: template
        value_template: >
          {{ trigger.to_state.state | float(0) > thresholds[trigger.entity_id] }}
    action:
      - action: input_boolean.turn_on
        target:
          entity_id: "{{ flags[trigger.entity_id] }}"
      - action: system_log.write
        data:
          message: "🧹 Cleaning flag raised: {{ flags[trigger.entity_id] }} due to {{ trigger.entity_id }}"
          level: warning

  - alias: "Notify When All Cleaning Flags Raised (Opt-Out Aware)"
    id: "notify_when_all_cleaning_flags_raised_opt_out_aware"
    mode: single
    trigger:
      - platform: state
        entity_id:
          - input_boolean.living_room_needs_cleaning
          - input_boolean.kitchen_needs_cleaning
          - input_boolean.powder_room_needs_cleaning
          - input_boolean.downstairs_hallway_needs_cleaning
          - input_boolean.laundry_room_needs_cleaning
        to: "on"
    condition:
      - condition: template
        value_template: >
          {% set rooms = [
            {'flag': 'input_boolean.living_room_needs_cleaning', 'active': true},
            {'flag': 'input_boolean.kitchen_needs_cleaning', 'active': true},
            {'flag': 'input_boolean.powder_room_needs_cleaning', 'active': true},
            {'flag': 'input_boolean.downstairs_hallway_needs_cleaning', 'active': true},
            {'flag': 'input_boolean.laundry_room_needs_cleaning', 'active': true}
          ] %}
          {% set active_flags = rooms | selectattr('active') | map(attribute='flag') | list %}
          {{ active_flags | map('states') | select('equalto', 'on') | list | count == active_flags | count }}
    action:
      - action: script.turn_on
        target:
          entity_id: script.notify_engine
        data:
          variables:
            who: "evert"
            title: "All Cleaning Flags Raised"
            value1: "🧼 All active rooms are flagged for cleaning."
            group: "vacuum"
            tag_id: "cleaning"
            importance_id: high
            color: "red"
            sticky: true
            timeout_sec: 300

# ══ Scripts: Cleaning Flag Logic & Logging ══
script:
  set_needs_cleaning_if_needed:
    alias: Set Needs Cleaning Flag
    mode: parallel
    fields:
      activity_sensor:
        required: true
      cleaned_datetime:
        required: true
      needs_cleaning_boolean:
        required: true
    sequence:
      - condition: template
        value_template: >
          {% from 'template.library.jinja' import is_valid_datetime %}
          {% set last = states(activity_sensor) %}
          {% set cleaned = states(cleaned_datetime) %}
          {% if is_valid_datetime(last) and is_valid_datetime(cleaned) %}
            {{ (last | as_datetime) > (cleaned | as_datetime) }}
          {% else %}
            false
          {% endif %}
      - service: input_boolean.turn_on
        target:
          entity_id: "{{ needs_cleaning_boolean }}"
      - service: system_log.write
        data:
          message: "🧹 Cleaning flag raised: {{ needs_cleaning_boolean }} due to {{ activity_sensor }}"
          level: warning

  clean_living_room:
    alias: Clean Living Room
    sequence:
      - service: vacuum.send_command
        target:
          entity_id: vacuum.valetudo_roborocks5
        data:
          command: segment_clean
          params: [1] # Update segment number as needed
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.living_room_last_cleaned
        data:
          datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.living_room_needs_cleaning

  clean_kitchen:
    alias: Clean Kitchen
    sequence:
      - service: vacuum.send_command
        target:
          entity_id: vacuum.valetudo_roborocks5
        data:
          command: segment_clean
          params: [2] # Update segment number as needed
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.kitchen_last_cleaned
        data:
          datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.kitchen_needs_cleaning

  clean_powder_room:
    alias: Clean Powder Room
    sequence:
      - service: vacuum.send_command
        target:
          entity_id: vacuum.valetudo_roborocks5
        data:
          command: segment_clean
          params: [3] # Update segment number as needed
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.powder_room_last_cleaned
        data:
          datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.powder_room_needs_cleaning

  clean_downstairs_hallway:
    alias: Clean Downstairs Hallway
    sequence:
      - service: vacuum.send_command
        target:
          entity_id: vacuum.valetudo_roborocks5
        data:
          command: segment_clean
          params: [4] # Update segment number as needed
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.downstairs_hallway_last_cleaned
        data:
          datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.downstairs_hallway_needs_cleaning

  clean_laundry_room:
    alias: Clean Laundry Room
    sequence:
      - service: vacuum.send_command
        target:
          entity_id: vacuum.valetudo_roborocks5
        data:
          command: segment_clean
          params: [5] # Update segment number as needed
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.laundry_room_last_cleaned
        data:
          datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.laundry_room_needs_cleaning

  cleaning_job_downstairs:
    alias: Run Downstairs Cleaning Job
    sequence:
      - service: script.clean_living_room
      - service: script.clean_kitchen
      - service: script.clean_powder_room
      - service: script.clean_downstairs_hallway
      - service: script.clean_laundry_room
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.cleaning_job_last_run
        data:
          datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.downstairs_cleaning_success
template:
  - sensor:
      - name: Living Room Days Since Last Cleaned
        unique_id: living_room_days_since_last_cleaned
        availability: >-
          {% import 'template.library.jinja' as lib %}
          {{ lib.is_valid_datetime(states('input_datetime.living_room_last_cleaned')) }}
        state: >-
          {% import 'template.library.jinja' as lib %}
          {{ lib.days_since_cleaned(states('input_datetime.living_room_last_cleaned')) }}
        unit_of_measurement: "days"
        icon: mdi:counter

      - name: Kitchen Days Since Last Cleaned
        unique_id: kitchen_days_since_last_cleaned
        availability: >-
          {% import 'template.library.jinja' as lib %}
          {{ lib.is_valid_datetime(states('input_datetime.kitchen_last_cleaned')) }}
        state: >-
          {% import 'template.library.jinja' as lib %}
          {{ lib.days_since_cleaned(states('input_datetime.kitchen_last_cleaned')) }}
        unit_of_measurement: "days"
        icon: mdi:counter

      - name: Powder Room Days Since Last Cleaned
        unique_id: powder_room_days_since_last_cleaned
        availability: >-
          {% import 'template.library.jinja' as lib %}
          {{ lib.is_valid_datetime(states('input_datetime.powder_room_last_cleaned')) }}
        state: >-
          {% import 'template.library.jinja' as lib %}
          {{ lib.days_since_cleaned(states('input_datetime.powder_room_last_cleaned')) }}
        unit_of_measurement: "days"
        icon: mdi:counter

      - name: Downstairs Hallway Days Since Last Cleaned
        unique_id: downstairs_hallway_days_since_last_cleaned
        availability: >-
          {% import 'template.library.jinja' as lib %}
          {{ lib.is_valid_datetime(states('input_datetime.downstairs_hallway_last_cleaned')) }}
        state: >-
          {% import 'template.library.jinja' as lib %}
          {{ lib.days_since_cleaned(states('input_datetime.downstairs_hallway_last_cleaned')) }}
        unit_of_measurement: "days"
        icon: mdi:counter

      - name: Laundry Room Days Since Last Cleaned
        unique_id: laundry_room_days_since_last_cleaned
        availability: >-
          {% import 'template.library.jinja' as lib %}
          {{ lib.is_valid_datetime(states('input_datetime.laundry_room_last_cleaned')) }}
        state: >-
          {% import 'template.library.jinja' as lib %}
          {{ lib.days_since_cleaned(states('input_datetime.laundry_room_last_cleaned')) }}
        unit_of_measurement: "days"
        icon: mdi:counter
