# 📁 /config/hestia/automations/diagnostics/system_maintenance_routines.yaml

- alias: HESTIA Boot Entity Availability Check
  id: hestia_boot_entity_availability_check
  description: Runs entity availability checks at HA startup
  mode: single
  trigger:
    - platform: event
      event_type: homeassistant_started
  action:
    - delay: "00:00:05"  # Optional: wait for system to stabilize
    - action: shell_command.cerberus_audit
    - action: system_log.write
      data:
        level: info
        message: "Cerberus entity availability audit triggered at startup"

- alias: Iris Hourly Metrics Logger
  id: iris_hourly_metrics
  description: Invokes iris_metrics every hour
  mode: single
  trigger:
    platform: time_pattern
    hours: "*"
  action:
    - action: shell_command.launch_iris
    - action: system_log.write
      data:
        level: info
        message: "Hourly Iris metrics collection triggered"

- alias: Run Clio Daily
  id: run_clio_daily
  description: Generates daily config documentation
  mode: single
  trigger:
    platform: time
    at: "03:00:00"
  action:
    - action: shell_command.run_clio
    - action: system_log.write
      data:
        level: info
        message: "Clio documentation generation script triggered at 03:00"

- alias: Run Charon Daily
  id: run_charon_daily
  description: Generates daily documentation for Room Coverage Analysis, Tier Validation and Registry Alignment
  mode: single
  trigger:
    platform: time
    at: "03:30:00"
  action:
    - action: shell_command.charon_audit
    - action: system_log.write
      data:
        level: info
        message: "Charon audit script triggered by automation at 03:30"

- alias: HESTIA Daily YAML Diff Generator
  id: daily_yaml_diff
  description: Emits daily config delta comparison
  mode: single
  trigger:
    platform: time
    at: "01:00:00"
  action:
    - action: shell_command.config_manager_diff
    - action: system_log.write
      data:
        level: info
        message: "Daily YAML diff executed by config_manager_diff at 01:00"

- alias: HESTIA – Daily Registry Reconciliation
  id: hestia_alpha_to_omega_sync
  trigger:
    platform: time
    at: "03:00:00"
  mode: single
  max_exceeded: silent
  trace:
    stored_traces: 5
  action:
    - action: shell_command.sync_alpha_to_omega
    - action: system_log.write
      data:
        level: info
        message: "Alpha to Omega registry sync triggered at 03:00"

- alias: automation_generate_light_templates_on_start
  id: Run Light Template Generator on Startup
  description: Automation to run the light template generator on startup
  mode: single
  trigger:
    - platform: event
      event_type: homeassistant_started
  action:
    - delay: "00:00:05"  # Optional delay for system readiness
    - action: shell_command.generate_light_templates
    - action: system_log.write
      data:
        level: info
        message: "Light template generation script launched on startup"

- alias: notify_config_diff
  id: Hestia Config Diff on Startup
  trigger:
    - platform: event
      event_type: homeassistant_started
  action:
    - delay: "00:00:10"
    - action: shell_command.config_manager_diff
    - delay: "00:00:10"
    - action: notify.persistent_notification
      data:
        title: Hestia Config Diff
        message: >
          Config diff summary is available in /config/tools/tmp_change_summary.txt.
          File reading in templates is unsupported.

- alias: log_loaded_scripts_on_startup
  id: log_loaded_scripts_on_startup
  mode: single
  trigger:
    - platform: event
      event_type: homeassistant_started
  action:
    - variables:
        expected_scripts:
          - script.refresh_all_validated_lights
          - script.generate_config_documentation
          - script.onboard_light_helpers
          - script.attempt_device_recovery
          - script.refresh_symlinks_script
          - script.perform_system_health_check
          - script.generate_system_health_report
          - script.manual_health_check_script
          - script.set_room_lighting
          - script.validate_lighting_configuration
          - script.run_migration_diagnostics
          - script.analyze_presence_patterns
          - script.fallback_presence_detection
          - script.hermes_configure_presence_detection
          - script.rate_limited_presence_mode_change
          - script.reset_presence_config
          - script.validate_presence_config
          - script.dispatch_light_state
          - script.set_room_lights
          - script.get_room_device
          - script.get_room_lights
          - script.get_room_timeout
          - script.run_iris_manual
          - script.climate_pause_all_heating
          - script.climate_resume_all_heating
          - script.climate_update_all_thermostats
          - script.climate_eco_mode
          - script.climate_boost_mode
          - script.optimize_room_climate
          - script.climate_night_setback
          - script.climate_humidity_control
          - script.aether_diagnostic_report
          - script.test_validation_breach
          - script.valetudo_short_clean
          - script.valetudo_deep_clean
          - script.valetudo_spot_clean
          - script.valetudo_kitchen_clean
          - script.valetudo_living_room_clean
          - script.valetudo_laundry_room_clean
          - script.valetudo_hallway_clean
          - script.valetudo_powder_room_clean
          - script.log_to_validator
        present_scripts: "{{ states.script | map(attribute='entity_id') | list }}"
        missing_scripts: >
          {{ expected_scripts | reject('in', present_scripts) | list }}
    - choose:
        - conditions:
            - condition: template
              value_template: "{{ missing_scripts | length > 0 }}"
          sequence:
            - action: persistent_notification.create
              data:
                title: "⚠️ Missing Script(s) Detected"
                message: >
                  The following expected scripts are missing: {{ missing_scripts | join(', ') }}
    - action: system_log.write
      data:
        level: info
        message: >
          ✅ Startup script check complete. Loaded: {{ present_scripts | join(', ') }}

- alias: log_loaded_automations_on_startup
  id: log_loaded_automations_on_startup
  mode: single
  trigger:
    - platform: event
      event_type: homeassistant_started
  action:
    - variables:
        expected_automations:
          - automation.log_loaded_shell_commands_on_startup
          - automation.log_loaded_scripts_on_startup
          - automation.log_loaded_automations_on_startup
          - automation.log_loaded_template_sensors_on_startup
          - automation.hestia_subsystem_health_startup_notification
          - automation.system_startup_sequence
          - automation.notify_fallback_integrity_issues
          - automation.notify_system_health_issues
          - automation.hestia_log_error_tracker
          - automation.hestia_periodic_system_health_check_automation
          - automation.startup_entity_availability_monitor
          - automation.hourly_iris_metrics
          - automation.run_clio_daily_v2
          - automation.run_charon_daily
          - automation.daily_yaml_diff
          - automation.hestia_alpha_to_omega_sync
          - automation.run_light_template_generator_on_start
          - automation.notify_config_diff
          - automation.auto_update_template_monitor_group
          - automation.validate_registry_entities
          - automation.hestia_snapshot_on_start
          - automation.motion_score_decay_refresh
          - automation.hephaestus_package_integrity
          - automation.clio_update_last_run_30min
          - automation.auto_publish_room_registry
          - automation.trigger_charon_manual_run
          - automation.run_prometheus_renderer
          - automation.automation_ensuite_lighting_motion
          - automation.automation_ensuite_fan_occupancy
          - automation.automation_living_room_motion_lights
          - automation.automation_upstairs_lights_motion
          - automation.automation_downstairs_lights_motion
          - automation.automation_kitchen_motion_light
          - automation.automation_fallback_presence_detection
          - automation.macbook_charger_status
          - automation.monitor_disconnect_powerdown
          - automation.monitor_reconnect_wakeup
          - automation.valetudo_morning_deep_clean
          - automation.valetudo_afternoon_short_clean
          - automation.monitor_lighting_configuration_integrity
          - automation.daily_light_state_check
          - automation.recover_unavailable_lights
          - automation.template_monitoring_notify
          - automation.template_monitoring_clear_notification
          - automation.template_monitoring_attempt_recovery
          - automation.handle_validation_breach_notification
          - automation.emit_breach_tier_chain_integrity
          - automation.validator_log_tier_chain_integrity
          - automation.validator_log_tier_escalation_violations
          - automation.update_validation_breach_log
        present_automations: "{{ states.automation | map(attribute='entity_id') | list }}"
        missing_automations: >
          {{ expected_automations | reject('in', present_automations) | list }}
    - choose:
        - conditions:
            - condition: template
              value_template: "{{ missing_automations | length > 0 }}"
          sequence:
            - action: persistent_notification.create
              data:
                title: "⚠️ Missing Automation(s) Detected"
                message: >
                  The following expected automations are missing: {{ missing_automations | join(', ') }}
    - action: system_log.write
      data:
        level: info
        message: >
          ✅ Startup automation check complete. Loaded: {{ present_automations | join(', ') }}

- alias: HESTIA Subsystem Startup Health Notifications
  id: hestia_subsystem_health_startup_notification
  trigger:
    - platform: event
      event_type: homeassistant_started
  mode: single
  action:
    - variables:
        subsystems: >
          {% set s = state_attr('sensor.hestia_active_subsystems', 'subsystems') %}
          {% if s is iterable and s is not none %}
            {{ s | list }}
          {% else %}
            []
          {% endif %}
    - repeat:
        for_each: "{{ subsystems }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {{ not is_state('sensor.' ~ repeat.item ~ '_config', 'unavailable') }}
                sequence:
                  - action: persistent_notification.create
                    data:
                      title: "{{ repeat.item | title }} Package Health Check"
                      message: >
                        Sensors and templates from {{ repeat.item | title }} are active.
              - conditions:
                  - condition: template
                    value_template: >
                      {{ is_state('sensor.' ~ repeat.item ~ '_config', 'unavailable') }}
                sequence:
                  - action: system_log.write
                    data:
                      level: warning
                      message: >
                        Subsystem {{ repeat.item }} configuration sensor is unavailable at startup.

- alias: Log Loaded Shell Commands on Startup
  id: log_loaded_shell_commands_on_startup
  mode: single
  trigger:
    - platform: event
      event_type: homeassistant_started
  action:
    - variables:
        expected_shell_commands:
          - shell_command.generate_light_templates
          - shell_command.refresh_light_templates
          - shell_command.cerberus_audit
          - shell_command.config_manager_diff
          - shell_command.config_manager_map_yaml
          - shell_command.run_config_documenter
          - shell_command.charon_audit
          - shell_command.launch_iris
          - shell_command.refresh_room_registry
          - shell_command.run_clio
          - shell_command.sync_alpha_to_omega
          - shell_command.run_prometheus_renderer
          - shell_command.refresh_symlinks
          - shell_command.write_to_validator_log
          - shell_command.snapshot
        defined_shell_commands: >
          {{ integration_entities('shell_command') }}
        missing_shell_commands: >
          {{ expected_shell_commands | reject('in', defined_shell_commands) | list }}
    - choose:
        - conditions:
            - condition: template
              value_template: "{{ missing_shell_commands | length > 0 }}"
          sequence:
            - action: persistent_notification.create
              data:
                title: "⚠️ Missing Shell Command(s) Detected"
                message: >
                  The following expected shell commands are missing: {{ missing_shell_commands | join(', ') }}
    - action: system_log.write
      data:
        level: info
        message: >
          ✅ Startup shell command check complete. Loaded: {{ defined_shell_commands | join(', ') }}

- alias: Auto-Update Template Monitor Group (MSF Presence)
  id: auto_update_template_monitor_group
  mode: single
  trigger:
    - platform: event
      event_type: homeassistant_started
    - platform: state
      entity_id:
        - binary_sensor.bedroom_presence_msf
        - binary_sensor.ensuite_presence_msf
        - binary_sensor.hallway_downstairs_presence_msf
        - binary_sensor.hallway_upstairs_presence_msf
        - binary_sensor.kitchen_presence_msf
        - binary_sensor.living_room_presence_msf
        - binary_sensor.entrance_presence_msf
        - binary_sensor.wardrobe_presence_msf
        - binary_sensor.ottoman_presence_msf
        - binary_sensor.desk_presence_msf
      for:
        seconds: 10
  action:
    - variables:
        matching_entities:
          - binary_sensor.bedroom_presence_msf
          - binary_sensor.ensuite_presence_msf
          - binary_sensor.hallway_downstairs_presence_msf
          - binary_sensor.hallway_upstairs_presence_msf
          - binary_sensor.kitchen_presence_msf
          - binary_sensor.living_room_presence_msf
          - binary_sensor.entrance_presence_msf
          - binary_sensor.wardrobe_presence_msf
          - binary_sensor.ottoman_presence_msf
          - binary_sensor.desk_presence_msf
    - action: group.set
      target:
        entity_id: group.template_monitor_targets
      data:
        object_id: template_monitor_targets
        name: Template Monitor Targets
        entities: "{{ matching_entities }}"
    - action: system_log.write
      data:
        level: info
        message: >
          Updated template monitor group with entities: {{ matching_entities | join(', ') }}

- alias: Validate Registry Entities
  id: validate_registry_entities
  trigger:
    - platform: time_pattern
      minutes: "/30"
  condition:
    - condition: template
      value_template: "{{ is_state('binary_sensor.home_online', 'on') }}"
  action:
    - action: homeassistant.update_entity
      target:
        entity_id: sensor.missing_registry_entities
    - choose:
        - conditions:
            - condition: template
              value_template: "{{ states('sensor.missing_registry_entities') | int > 0 }}"
          sequence:
            - action: persistent_notification.create
              data:
                title: Entity Validation Warning
                message: >
                  Detected {{ states('sensor.missing_registry_entities') }} missing entities
                  in your registry-driven templates. Check `sensor.missing_registry_entities`
                  attributes for details.
            - action: system_log.write
              data:
                level: warning
                message: >
                  Registry validation found {{ states('sensor.missing_registry_entities') }} missing entities.
      default:
        - action: system_log.write
          data:
            level: info
            message: "Entity registry check completed. No missing entities."

- alias: Run HESTIA Snapshot on HA Startup
  id: hestia_snapshot_on_start
  description: Automatically run a system snapshot when HA restarts
  trigger:
    platform: homeassistant
    event: start
  mode: single
  action:
    - delay: "00:00:05"  # Optional: wait a few seconds after startup
    - action: shell_command.snapshot
    - action: system_log.write
      data:
        level: info
        message: "HESTIA snapshot executed on startup"