# Critical Review → Hardened Plan (v1.2)

**What changed & why (hardening points):**

* **Safer recorder guard.** Now detects *any* top‑level `recorder:` (including inline forms like `recorder: {}`), not just a bare key on its own line. Prevents duplicate recorder configs.
* **Packages include gate.** Verifies `homeassistant: packages:` include exists in `configuration.yaml`; otherwise **BLOCKED** with a one‑line remediation. Avoids creating unused packages.
* **Strict tokens.** Output constrained to `OK|BLOCKED|EVIDENCE|DONE|SUMMARY` lines only. No narration.
* **Repo root safety.** Works from `/n/ha`, but derives the real git toplevel and masks it back to `/n/ha` in evidence to avoid path leaks.
* **Enforcer respect.** If an existing enforcer fails **before** adding files, we block to keep repo invariant clean.
* **Idempotence.** Re‑running makes no changes and prints `OK: NO_CHANGES`; commit and push happen only if needed.
* **Minimal privileges.** No service restarts, no HA CLI calls; pure workspace write + git.
* **Portable bash only.** No Python/YQ dependencies; compatible with macOS bash/zsh via `bash -lc`.

---

# Final Copilot Prompt (paste exact block)

> **Use GitHub Copilot (shell), run locally. Emit ONLY tokenized lines; no narration.**

```
You are GitHub Copilot. Execute real commands locally. Emit ONLY these tokens (one per line):
- OK: <message>
- BLOCKED: <reason>
- EVIDENCE: <key>=<value>
- DONE: <message>
- SUMMARY: <compact one-line>

No narration or extra text.

bash -lc '
set -euo pipefail
export LC_ALL=C
MOUNT=/n/ha

# ===== Preflight =====
[ -d "$MOUNT" ] || { echo "BLOCKED: /n/ha not mounted"; exit 2; }
[ -f "$MOUNT/configuration.yaml" ] || { echo "BLOCKED: missing configuration.yaml at /n/ha"; exit 2; }

git -C "$MOUNT" rev-parse --is-inside-work-tree >/dev/null 2>&1 || { echo "BLOCKED: /n/ha is not inside a git work tree"; exit 2; }
REPO="$(git -C "$MOUNT" rev-parse --show-toplevel 2>/dev/null || true)"
[ -n "${REPO:-}" ] && [ -d "$REPO" ] || { echo "BLOCKED: unable to resolve repo root via git from /n/ha"; exit 2; }
[ -f "$REPO/configuration.yaml" ] || { echo "BLOCKED: repo root lacks configuration.yaml"; exit 2; }

# Ensure packages include exists in configuration.yaml
if ! grep -Eq "^\s*homeassistant:\s*$" "$REPO/configuration.yaml" || \
   ! grep -Eq "^\s*packages:\s*!include_dir_named\s+packages\s*$" "$REPO/configuration.yaml"; then
  echo "BLOCKED: configuration.yaml missing 'homeassistant: packages: !include_dir_named packages'"; exit 3;
fi

echo "OK: PREFLIGHT"
echo "EVIDENCE: repo=/n/ha"

# ===== Branch selection =====
if git -C "$REPO" rev-parse --verify stability/workspace-autofs-v1 >/dev/null 2>&1; then
  git -C "$REPO" checkout -q stability/workspace-autofs-v1 || { echo "BLOCKED: cannot checkout stability/workspace-autofs-v1"; exit 2; }
  CUR_BRANCH=stability/workspace-autofs-v1
else
  CUR_BRANCH="$(git -C "$REPO" rev-parse --abbrev-ref HEAD 2>/dev/null || echo main)"
fi

echo "OK: BRANCH $CUR_BRANCH"

# ===== Guard: no existing top-level recorder anywhere (tracked files) =====
# Matches inline keys too (e.g., `recorder: {}`) but ignores commented lines
HITS=$(git -C "$REPO" grep -nI -E "^[[:space:]]*recorder[[:space:]]*:" -- . \
  ":(exclude).git/**" ":(exclude).venv/**" || true)
if [ -n "$HITS" ]; then
  printf "EVIDENCE: recorder_definitions=%s\n" "$(printf %s "$HITS" | sed "s#$REPO#/n/ha#g" | tr "\n" ";")"
  echo "BLOCKED: recorder already defined; consolidate to a single definition"
  exit 3
fi

# ===== Prepare paths =====
mkdir -p "$REPO/packages" "$REPO/hestia/core/architecture" "$REPO/tmp"
PKG_REC="$REPO/packages/recorder_policy.yaml"
PKG_OOM="$REPO/packages/oom_guard.yaml"
ADR="$REPO/hestia/core/architecture/ADR-0011-oom-and-recorder-policy.md"

# ===== Write recorder policy (idempotent overwrite) =====
cat > "$PKG_REC" <<'YAML'
# packages/recorder_policy.yaml
# Purpose: reduce DB growth & memory churn; keep short history; exclude noisy domains
recorder:
  purge_keep_days: 3
  auto_purge: true
  commit_interval: 30
  exclude:
    domains:
      - automation
      - camera
      - event
      - logbook
      - media_player
      - persistent_notification
      - recorder
      - updater
    entity_globs:
      - sensor.*_uptime*
      - sensor.time*
  include:
    domains:
      - binary_sensor
      - sensor
      - switch
      - light
YAML

# ===== Write OOM guard package =====
cat > "$PKG_OOM" <<'YAML'
# packages/oom_guard.yaml
homeassistant:
  customize: {}

sensor:
  - platform: systemmonitor
    resources:
      - type: memory_use_percent

template:
  - trigger:
      - platform: state
        entity_id: sensor.memory_use_percent
    sensor:
      - name: "oom_memory_use_percent"
        unit_of_measurement: "%"
        state: "{{ states('sensor.memory_use_percent') | float(0) }}"
        availability: "{{ states('sensor.memory_use_percent') not in ['unknown','unavailable','none',''] }}"

input_number:
  oom_threshold_percent:
    name: OOM threshold (%)
    min: 50
    max: 99
    step: 1
    mode: box
    unit_of_measurement: "%"
    icon: mdi:memory
    initial: 90

automation:
  - id: oom_notice_when_high_5min
    alias: "OOM: persistent notice when memory high for 5m"
    mode: single
    trigger:
      - platform: numeric_state
        entity_id: sensor.oom_memory_use_percent
        above: "{{ states('input_number.oom_threshold_percent') | float(90) }}"
        for: "00:05:00"
    action:
      - service: persistent_notification.create
        data:
          title: "High Memory Use"
          message: >
            Memory above {{ states('input_number.oom_threshold_percent') }}% for 5m.
            Current: {{ states('sensor.oom_memory_use_percent') }}%.
            Review add-ons/integrations (Matter, DB, media, diagnostics).
YAML

# ===== Write ADR =====
cat > "$ADR" <<'MD'
# ADR-0011 — OOM Mitigation & Recorder Policy

## Status
Accepted

## Context
Home Assistant host experienced recurrent OOM events leading to service instability. Recorder/history growth and integration churn are likely contributors. Absolute path divergence is handled separately by ADR-0010 (workspace neutral path /n/ha).

## Decision
1. Enforce conservative recorder policy: keep 3 days, auto purge, 30s commit, exclude noisy domains.
2. Add OOM guard: memory telemetry, adjustable threshold, 5-minute sustained alert via persistent notification.
3. Maintain a **single** `recorder:` definition (guarded by repo checks/CI).
4. No automatic restarts; operator reviews alerts and adjusts add-ons/integrations.

## Consequences
- Smaller DB, reduced memory churn, quicker queries.
- Clear operator signal under sustained pressure.

## Rollout
- Package-based; `configuration.yaml` already includes `packages` dir.
- Restart HA Core to apply after merge.
MD

# ===== Enforcer pre-gate (if present) =====
ENF="$REPO/hestia/tools/system/hestia_workspace_enforcer.sh"
if [ -x "$ENF" ]; then
  if ! "$ENF" > "$REPO/tmp/enforcer.pre.out" 2>&1; then
    echo "BLOCKED: ENFORCER_PRE -> fix forbidden /Volumes paths before adding OOM policy"
    exit 4
  fi
fi

# ===== Stage & commit if needed =====
HEAD_BEFORE="$(git -C "$REPO" rev-parse --short HEAD 2>/dev/null || echo NONE)"
git -C "$REPO" add "$PKG_REC" "$PKG_OOM" "$ADR" >/dev/null 2>&1 || true

if git -C "$REPO" diff --cached --quiet; then
  echo "OK: NO_CHANGES"
else
  git -C "$REPO" commit -m "packages: add recorder policy + OOM guard; ADR-0011 OOM mitigation" >/dev/null 2>&1 || true
  echo "OK: COMMIT"
fi

# ===== Enforcer post-gate (if present) =====
if [ -x "$ENF" ]; then
  if ! "$ENF" > "$REPO/tmp/enforcer.post.out" 2>&1; then
    HITS_FILE="$(sed -n "s/^EVIDENCE: hits_file=\(.*\)$/\1/p" "$REPO/tmp/enforcer.post.out" || true)"
    HITS_MASKED="${HITS_FILE/#$REPO/\/n\/ha}"
    echo "EVIDENCE: hits_file=$HITS_MASKED"
    echo "BLOCKED: ENFORCER_POST -> remediation required"
    exit 5
  fi
fi

echo "OK: ENFORCER_PASS"
HEAD_AFTER="$(git -C "$REPO" rev-parse --short HEAD 2>/dev/null || echo NONE)"
echo "EVIDENCE: head_before=$HEAD_BEFORE"
echo "EVIDENCE: head_after=$HEAD_AFTER"

# ===== Optional push =====
if git -C "$REPO" remote get-url origin >/dev/null 2>&1; then
  if git -C "$REPO" push -u origin "$CUR_BRANCH" >/dev/null 2>&1; then
    echo "OK: PUSHED origin $CUR_BRANCH"
  else
    echo "BLOCKED: git push failed (check auth/remote)"
  fi
else
  echo "EVIDENCE: no_remote_origin"
fi

echo "DONE: OOM_POLICY_APPLIED"
echo "SUMMARY: repo=/n/ha branch=$CUR_BRANCH head_before=$HEAD_BEFORE head_after=$HEAD_AFTER recorder_pkg=$(basename "$PKG_REC") oom_pkg=$(basename "$PKG_OOM") adr=$(basename "$ADR")"
'
```

---

## File Payloads (reference)

### `packages/recorder_policy.yaml`

```yaml
# packages/recorder_policy.yaml
recorder:
  purge_keep_days: 3
  auto_purge: true
  commit_interval: 30
  exclude:
    domains: [automation, camera, event, logbook, media_player, persistent_notification, recorder, updater]
    entity_globs: ["sensor.*_uptime*", "sensor.time*"]
  include:
    domains: [binary_sensor, sensor, switch, light]
```

### `packages/oom_guard.yaml`

```yaml
homeassistant:
  customize: {}

sensor:
  - platform: systemmonitor
    resources:
      - type: memory_use_percent

template:
  - trigger:
      - platform: state
        entity_id: sensor.memory_use_percent
    sensor:
      - name: "oom_memory_use_percent"
        unit_of_measurement: "%"
        state: "{{ states('sensor.memory_use_percent') | float(0) }}"
        availability: "{{ states('sensor.memory_use_percent') not in ['unknown','unavailable','none',''] }}"

input_number:
  oom_threshold_percent:
    name: OOM threshold (%)
    min: 50
    max: 99
    step: 1
    mode: box
    unit_of_measurement: "%"
    icon: mdi:memory
    initial: 90

automation:
  - id: oom_notice_when_high_5min
    alias: "OOM: persistent notice when memory high for 5m"
    mode: single
    trigger:
      - platform: numeric_state
        entity_id: sensor.oom_memory_use_percent
        above: "{{ states('input_number.oom_threshold_percent') | float(90) }}"
        for: "00:05:00"
    action:
      - service: persistent_notification.create
        data:
          title: "High Memory Use"
          message: >
            Memory above {{ states('input_number.oom_threshold_percent') }}% for 5m.
            Current: {{ states('sensor.oom_memory_use_percent') }}%.
            Review add-ons/integrations (Matter, DB, media, diagnostics).
```

### `hestia/core/architecture/ADR-0011-oom-and-recorder-policy.md`

```md
# ADR-0011 — OOM Mitigation & Recorder Policy

Status: Accepted

Context: Recurrent OOM → instability. Likely contributors: recorder/history growth, integration churn. ADR‑0010 covers workspace path neutrality.

Decision:
- Add conservative recorder policy (3 days, auto purge, 30s commit; exclude noisy domains; include core domains).
- Add OOM guard (systemmonitor memory %, threshold knob, 5‑minute alert via persistent notification).
- Single `recorder:` definition across repo; CI/enforcer prevents duplicates.
- No automatic restarts; operator investigates alerts.

Consequences: Smaller DB, reduced memory churn, clearer signals.

Rollout: Package-based; requires HA Core restart after merge.
```
