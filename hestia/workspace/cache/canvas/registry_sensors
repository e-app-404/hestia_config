
# File: /config/hestia/sensors/core/registry_sensors.yaml
# Description: Alpha and Omega JSON registry status sensors (with inline macro definitions)
# Last Updated: 2025-05-28

template:
  - sensor:
      - name: "Macro Definitions"
        unique_id: "registry_macro_definitions"
        state: "template_macros_loaded"
        attributes:
          macro_definitions: >
            {% macro validate_registry_status(raw_state, entity) %}
              {% set json = raw_state | default('{}') | from_json %}
              {% if json is mapping %}
                {% set status = json.get('_meta', {}).get('validation_status', {}).get('status') %}
                {% if status in ['valid', 'warning'] %}
                  {{ status }}
                {% else %}
                  invalid
                {% endif %}
              {% else %}
                parse_error
              {% endif %}
            {% endmacro %}

            {% macro extract_registry_attribute(entity_id, key_path, default='unknown') %}
              {% set raw = states(entity_id) | default('{}') | from_json %}
              {% if raw is mapping %}
                {% set current = raw %}
                {% for k in key_path %}
                  {% if k in current %}
                    {% set current = current[k] %}
                  {% else %}
                    {% set current = default %}
                    {% break %}
                  {% endif %}
                {% endfor %}
                {{ current }}
              {% else %}
                unreadable
              {% endif %}
            {% endmacro %}

      - name: Alpha Light Registry Status
        unique_id: alpha_light_registry_status_
        state: >
          {% macro validate_registry_status(raw_state, entity) %}
            {% set json = raw_state | default('{}') | from_json %}
            {% if json is mapping %}
              {% set status = json.get('_meta', {}).get('validation_status', {}).get('status') %}
              {% if status in ['valid', 'warning'] %}
                {{ status }}
              {% else %}
                invalid
              {% endif %}
            {% else %}
              parse_error
            {% endif %}
          {% endmacro %}
          {{ validate_registry_status(states('sensor.alpha_light_registry_raw'), 'sensor.alpha_light_registry_raw') }}
        attributes:
          status: >
            {% macro extract_registry_attribute(entity_id, key_path, default='unknown') %}
              {% set raw = states(entity_id) | default('{}') | from_json %}
              {% if raw is mapping %}
                {% set current = raw %}
                {% for k in key_path %}
                  {% if k in current %}
                    {% set current = current[k] %}
                  {% else %}
                    {% set current = default %}
                    {% break %}
                  {% endif %}
                {% endfor %}
                {{ current }}
              {% else %}
                unreadable
              {% endif %}
            {% endmacro %}
            {{ extract_registry_attribute('sensor.alpha_light_registry_raw', ['_meta', 'validation_status', 'status']) }}
          error_reason: >
            {{ extract_registry_attribute('sensor.alpha_light_registry_raw', ['_meta', 'validation_status', 'reason'], 'none') }}
          tier: "β"

      - name: Alpha Sensor Registry Status
        unique_id: alpha_sensor_registry_status_
        state: >
          {{ validate_registry_status(states('sensor.alpha_sensor_registry_raw'), 'sensor.alpha_sensor_registry_raw') }}
        attributes:
          status: >
            {{ extract_registry_attribute('sensor.alpha_sensor_registry_raw', ['_meta', 'validation_status', 'status']) }}
          error_reason: >
            {{ extract_registry_attribute('sensor.alpha_sensor_registry_raw', ['_meta', 'validation_status', 'reason'], 'none') }}
          tier: "β"

      - name: Omega Device Registry Status
        unique_id: omega_device_registry_status_
        state: >
          {{ validate_registry_status(states('sensor.omega_device_registry_raw'), 'sensor.omega_device_registry_raw') }}
        attributes:
          status: >
            {{ extract_registry_attribute('sensor.omega_device_registry_raw', ['_meta', 'validation_status', 'status']) }}
          error_reason: >
            {{ extract_registry_attribute('sensor.omega_device_registry_raw', ['_meta', 'validation_status', 'reason'], 'none') }}
          tier: "β"

      - name: Omega Room Registry Status
        unique_id: omega_room_registry_status_
        state: >
          {{ validate_registry_status(states('sensor.omega_room_registry_raw'), 'sensor.omega_room_registry_raw') }}
        attributes:
          status: >
            {{ extract_registry_attribute('sensor.omega_room_registry_raw', ['_meta', 'validation_status', 'status']) }}
          error_reason: >
            {{ extract_registry_attribute('sensor.omega_room_registry_raw', ['_meta', 'validation_status', 'reason'], 'none') }}
          tier: "β"

      - name: "Occupancy Entity Map"
        unique_id: occupancy_entity_map
        state: "{{ now().isoformat() }}"
        attributes:
          room_to_occupancy: >
            {% set room_registry = state_attr('sensor.omega_room_registry_json', 'rooms') or {} %}
            {% set sensor_registry = state_attr('sensor.alpha_sensor_registry_json', 'devices') or {} %}
            {% set mapping = namespace(result={}) %}

            {% for room, data in room_registry.items() %}
              {% set sensor_key = data['sensors']['occupancy']['omega'] %}
              {% set device = sensor_registry.get(sensor_key, {}) %}
              {% set protocol = device.get('integration', {}).get('preferred_protocol') %}
              {% if protocol %}
                {% set entity_id = device.get('integration', {}).get('integration_stack', {}).get(protocol, {}).get('entity_id') %}
                {% if entity_id %}
                  {% set mapping.result = mapping.result | combine({room: entity_id}) %}
                {% endif %}
              {% endif %}
            {% endfor %}
            {{ mapping.result | tojson }}
          tier: "β"
