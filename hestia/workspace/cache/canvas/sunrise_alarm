# -----------------
# 3. AUTOMATIONS
# -----------------
automation:
  - id: theia_sunrise_alarm_start_sequence
    alias: "theia_sunrise_alarm_start_sequence"
    trigger:
      - platform: template
        value_template: >
          {% set alarm_time = states('input_datetime.alarm_time') %}
          {% if alarm_time %}
            {% set alarm_dt = strptime(alarm_time, '%Y-%m-%d %H:%M:%S') %}
            {% set offset_time = alarm_dt.timestamp() - (30 * 60) %}
            {{ now().timestamp() | int == offset_time | int }}
          {% else %}
            false
          {% endif %}
    condition:
      - condition: state
        entity_id: input_boolean.sunrise_alarm_active
        state: "on"
      - condition: state
        entity_id: input_boolean.sunrise_snooze_active
        state: "off"
      - condition: numeric_state
        entity_id: sensor.ambient_light_level
        below: 30
      - condition: state
        entity_id: binary_sensor.withings_in_bed
        state: "on"
      - condition: state
        entity_id: person.evert
        state: "home"
      - condition: or
        conditions:
          - condition: state
            entity_id: input_boolean.weekend_alarms
            state: "on"
          - condition: time
            weekday:
              - mon
              - tue
              - wed
              - thu
              - fri
    action:
      - variables:
          start_brightness: "{{ states('input_number.sunrise_light_start_brightness')|int }}"
          final_brightness: "{{ states('input_number.sunrise_light_final_brightness')|int }}"
          brightness_step: "{{ ((final_brightness - start_brightness) / 6)|round(0) }}"
          start_temp: 2200
          final_temp: 4500
          temp_step: "{{ ((final_temp - start_temp) / 6)|round(0) }}"

      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.manual_override_active

      # Simpler six-step sunrise with longer pauses between steps
      - service: light.turn_on
        target:
          entity_id: light.bedside_lamps
        data:
          brightness: "{{ start_brightness }}"
          color_temp_kelvin: "{{ start_temp }}"
          transition: 60

      - delay: "00:05:00" # 5 minutes

      - service: light.turn_on
        target:
          entity_id: light.bedside_lamps
        data:
          brightness: "{{ start_brightness + brightness_step }}"
          color_temp_kelvin: "{{ start_temp + temp_step }}"
          transition: 60

      - delay: "00:05:00" # 5 minutes

      - service: light.turn_on
        target:
          entity_id: light.bedside_lamps
        data:
          brightness: "{{ start_brightness + (brightness_step * 2) }}"
          color_temp_kelvin: "{{ start_temp + (temp_step * 2) }}"
          transition: 60

      - delay: "00:05:00" # 5 minutes

      - service: light.turn_on
        target:
          entity_id: light.bedside_lamps
        data:
          brightness: "{{ start_brightness + (brightness_step * 3) }}"
          color_temp_kelvin: "{{ start_temp + (temp_step * 3) }}"
          transition: 60

      - delay: "00:05:00" # 5 minutes

      - service: light.turn_on
        target:
          entity_id: light.bedside_lamps
        data:
          brightness: "{{ start_brightness + (brightness_step * 4) }}"
          color_temp_kelvin: "{{ start_temp + (temp_step * 4) }}"
          transition: 60

      - delay: "00:05:00" # 5 minutes

      - service: light.turn_on
        target:
          entity_id: light.bedside_lamps
        data:
          brightness: "{{ final_brightness }}"
          color_temp_kelvin: "{{ final_temp }}"
          transition: 60

      # Add main light at 75% of final brightness if brightness is high
      - if:
          - condition: numeric_state
            entity_id: input_number.sunrise_light_final_brightness
            above: 50
        then:
          - service: light.turn_on
            target:
              entity_id: light.bedroom_main_light
            data:
              brightness: "{{ (states('input_number.sunrise_light_final_brightness')|int * 0.75)|round(0) }}"
              transition: 60

      # Add sound if enabled after 25 minutes of the light sequence
      - delay: "00:05:00"

      - if:
          - condition: state
            entity_id: input_boolean.alarm_sounds_enabled
            state: "on"
        then:
          - service: script.turn_on
            target:
              entity_id: script.sunrise_alarm_audio
    mode: restart

  # Stop alarm quickly
  - id: theia_sunrise_stop_immediately
    alias: "theia_sunrise_stop_immediately"
    trigger:
      - platform: state
        entity_id: sensor.physical_switch_change
      - platform: event
        event_type: ios.notification_action_fired
        event_data:
          actionName: STOP_ALARM
      - platform: state
        entity_id: binary_sensor.withings_in_bed
        from: "on"
        to: "off"
        for:
          seconds: 30
    action:
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.sunrise_alarm_active
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.sunrise_snooze_active
      - service: media_player.media_stop
        target:
          entity_id: media_player.bedroom
      - service: light.turn_off
        target:
          entity_id: light.bedroom_lights
    mode: single

  # Snooze Alarm - simplified
  - id: theia_sunrise_alarm_snooze
    alias: "theia_sunrise_alarm_snooze"
    trigger:
      - platform: event
        event_type: ios.notification_action_fired
        event_data:
          actionName: SNOOZE_ALARM
    action:
      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.sunrise_snooze_active
      - service: media_player.media_pause
        target:
          entity_id: media_player.bedroom
      # Dim the lights
      - service: light.turn_on
        target:
          entity_id: light.bedroom_lights
        data:
          brightness: 30
          transition: 5
      # Wait for snooze duration
      - delay:
          minutes: "{{ states('input_number.snooze_duration')|int }}"
      # Turn off snooze
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.sunrise_snooze_active
      # Return to full brightness
      - service: light.turn_on
        target:
          entity_id: light.bedroom_lights
        data:
          brightness: "{{ states('input_number.sunrise_light_final_brightness')|int }}"
          transition: 5
      # Resume sound if enabled
      - if:
          - condition: state
            entity_id: input_boolean.alarm_sounds_enabled
            state: "on"
        then:
          - service: script.turn_on
            target:
              entity_id: script.sunrise_alarm_audio
    mode: restart

  # Recover Alarm After Restart - improved reliability
  - id: theia_sunrise_alarm_restore_after_restart
    alias: "theia_sunrise_alarm_restore_after_restart"
    trigger:
      - platform: homeassistant
        event: start
    action:
      - delay:
          seconds: 20 # Allow more time for system startup
      - variables:
          alarm_time: "{{ strptime(states('input_datetime.alarm_time'), '%H:%M:%S') if states('input_datetime.alarm_time') else None }}"
          now_time: "{{ now() }}"
          alarm_minus_30: "{{ (alarm_time - timedelta(minutes=30)) if alarm_time else None }}"
          alarm_plus_10: "{{ (alarm_time + timedelta(minutes=10)) if alarm_time else None }}"
          is_in_window: "{{ alarm_time and alarm_minus_30 and alarm_plus_10 and (now_time > alarm_minus_30 and now_time < alarm_plus_10) }}"
      - if:
          - condition: template
            value_template: "{{ is_in_window }}"
          - condition: state
            entity_id: input_boolean.sunrise_alarm_active
            state: "on"
        then:
          # Calculate how far into sunrise we are
          - variables:
              elapsed_minutes: "{{ ((now_time.timestamp() | int - alarm_minus_30.timestamp() | int) / 60) | round(0) }}"
              total_minutes: 30
              progress_percent: "{{ (elapsed_minutes / total_minutes * 100) | round(0) }}"

          # Adjust lights based on how far into the sequence we are
          - service: light.turn_on
            target:
              entity_id: light.bedside_lamps
            data:
              brightness: >
                {% set start = states('input_number.sunrise_light_start_brightness')|int %}
                {% set final = states('input_number.sunrise_light_final_brightness')|int %}
                {{ start + ((final - start) * progress_percent / 100) | round(0) }}
              color_temp_kelvin: >
                {% set start_temp = 2200 %}
                {% set final_temp = 4500 %}
                {{ start_temp + ((final_temp - start_temp) * progress_percent / 100) | round(0) }}

          # Add audio if we're past the 25-minute mark
          - if:
              - condition: template
                value_template: "{{ elapsed_minutes >= 25 }}"
              - condition: state
                entity_id: input_boolean.alarm_sounds_enabled
                state: "on"
            then:
              - service: script.turn_on
                target:
                  entity_id: script.sunrise_alarm_audio
    mode: single

# -----------------
# 4. SCRIPTS
# -----------------
script:
  sunrise_alarm_audio:
    alias: "Sunrise Alarm Audio"
    sequence:
      - variables:
          volume_max: "{{ states('input_number.sunrise_sound_max_volume')|int }}"
          playlist: "{{ states('input_select.wake_up_playlist') }}"
          playlist_map:
            Relaxing Morning: "spotify:playlist:37i9dQZF1DX4PP3DA4J0N8"
            Energizing Beats: "spotify:playlist:37i9dQZF1DX8ky12eWIvcW"
            News & Podcasts: "spotify:show:7FmU0yS5BYN4VnQ3EaOhcP"
            Nature Sounds: "spotify:playlist:37i9dQZF1DX4wta20PHgwo"

      # Start at low volume
      - service: media_player.volume_set
        target:
          entity_id: media_player.bedroom
        data:
          volume_level: 0.05

      # Begin playback
      - service: media_player.play_media
        target:
          entity_id: media_player.bedroom
        data:
          media_content_id: "{{ playlist_map[playlist] }}"
          media_content_type: >
            {% if 'playlist' in playlist_map[playlist] %}
              playlist
            {% elif 'show' in playlist_map[playlist] %}
              podcast
            {% else %}
              music
            {% endif %}

      # Gradually increase volume
      - delay:
          seconds: 10
      - service: media_player.volume_set
        target:
          entity_id: media_player.bedroom
        data:
          volume_level: 0.1

      - delay:
          seconds: 20
      - service: media_player.volume_set
        target:
          entity_id: media_player.bedroom
        data:
          volume_level: 0.15

      - delay:
          seconds: 30
      - service: media_player.volume_set
        target:
          entity_id: media_player.bedroom
        data:
          volume_level: "{{ volume_max / 100 }}"
    mode: restart

  sunrise_snooze:
    alias: "Sunrise Alarm Snooze"
    sequence:
      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.sunrise_snooze_active
      - service: media_player.media_pause
        target:
          entity_id: media_player.bedroom
      - delay:
          minutes: "{{ states('input_number.snooze_duration')|int }}"
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.sunrise_snooze_active
      - service: script.turn_on
        target:
          entity_id: script.sunrise_alarm_audio
    mode: restart
