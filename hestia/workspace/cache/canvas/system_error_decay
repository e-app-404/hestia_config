# file: file: /config/hestia/sensors/delta/athena/errors/system_error_decay.yaml
sensor:
  - name: "System Problem Decay"
    unique_id: system_problem_decay
    icon: mdi:alert-rhombus
    state: >
      {% set current_problems = states('sensor.system_problem_count') | int(0) %}
      {% set previous_value = states('sensor.system_problem_decay') | float(0) %}
      {% set decay_rate = 0.5 %}
      {% set reset_value = current_problems | float %}
      {% set floor = 0 %}
      
      {% if current_problems > previous_value %}
        {{ reset_value }}
      {% else %}
        {{ max(previous_value - decay_rate, floor) }}
      {% endif %}
    attributes:
      current_problems: "{{ states('sensor.system_problem_count') | int(0) }}"
      problem_entities: "{{ state_attr('sensor.system_problems', 'problems') | default('[]') }}"
      health_score: "{{ state_attr('sensor.system_problems', 'health_score') | default(100) }}"
      canonical_id: "sensor_system_problem_decay_δ"
      tier: "δ"
      subsystem: "athena"
      module: "System Error Tracking"
      type: "decay"
      role: "error_decay_tracker"
      description: "Tracks the decay of system problems over time to detect system recovery"
      upstream_source: "sensor.system_problem_count"
      downstream_consumers: ["binary_sensor.system_problems_resolving"]
      retention: "Persists across restarts via state storage"
      update_frequency: "5 minutes"

  - name: "Template Monitor Problems Decay"
    unique_id: template_monitor_problems_decay
    icon: mdi:alert
    state: >
      {% set current_problems = is_state('binary_sensor.template_monitor_problems', 'on') | int %}
      {% set previous_value = states('sensor.template_monitor_problems_decay') | float(0) %}
      {% set decay_rate = 0.2 %}
      {% set reset_value = 10 if current_problems else 0 %}
      {% set floor = 0 %}
      
      {% if current_problems and previous_value < reset_value %}
        {{ reset_value }}
      {% else %}
        {{ max(previous_value - decay_rate, floor) }}
      {% endif %}
    attributes:
      problem_state: "{{ is_state('binary_sensor.template_monitor_problems', 'on') }}"
      problematic_entities: "{{ state_attr('binary_sensor.template_monitor_problems', 'problematic_entities') | default('[]') }}"
      canonical_id: "sensor_template_monitor_problems_decay_δ"
      tier: "δ"
      subsystem: "athena"
      module: "System Error Tracking"
      type: "decay"
      role: "template_error_tracker"
      description: "Tracks the decay of template monitoring problems to detect system improvement"
      upstream_source: "binary_sensor.template_monitor_problems"
      downstream_consumers: ["binary_sensor.template_problems_clearing"]
      retention: "Persists across restarts via state storage"
      update_frequency: "5 minutes"

  - name: "Remote UI Error Decay"
    unique_id: remote_ui_error_decay
    icon: mdi:web-box
    state: >
      {% set current_error = not is_state('binary_sensor.remote_ui', 'on') | int %}
      {% set previous_value = states('sensor.remote_ui_error_decay') | float(0) %}
      {% set decay_rate = 0.2 %}
      {% set reset_value = 10 if current_error else 0 %}
      {% set floor = 0 %}
      
      {% if current_error and previous_value < reset_value %}
        {{ reset_value }}
      {% else %}
        {{ max(previous_value - decay_rate, floor) }}
      {% endif %}
    attributes:
      ui_available: "{{ is_state('binary_sensor.remote_ui', 'on') }}"
      canonical_id: "sensor_remote_ui_error_decay_δ"
      tier: "δ"
      subsystem: "athena"
      module: "System Error Tracking"
      type: "decay"
      role: "ui_error_tracker"
      description: "Tracks the decay of remote UI availability problems"
      upstream_source: "binary_sensor.remote_ui"
      downstream_consumers: ["binary_sensor.remote_ui_stable"]
      retention: "Persists across restarts via state storage"
      update_frequency: "5 minutes"

  - name: "Template Error Event Detection"
    unique_id: template_error_event_detection
    icon: mdi:alert-circle
    state: >
      {% set current_errors = states('sensor.template_error_diagnostics') | int(0) %}
      {% set previous_errors = state_attr('sensor.template_error_event_detection', 'previous_errors') | default(current_errors) | int %}
      {% set error_spike = current_errors - previous_errors %}
      
      {% if error_spike > 3 %}
        error_spike
      {% elif error_spike < -3 %}
        error_recovery
      {% else %}
        stable
      {% endif %}
    attributes:
      previous_errors: "{{ states('sensor.template_error_diagnostics') | int(0) }}"
      error_change: >
        {% set current_errors = states('sensor.template_error_diagnostics') | int(0) %}
        {% set previous_errors = state_attr('sensor.template_error_event_detection', 'previous_errors') | default(current_errors) | int %}
        {{ current_errors - previous_errors }}
      canonical_id: "sensor_template_error_event_detection_δ"
      tier: "δ"
      subsystem: "athena"
      module: "System Error Tracking"
      type: "event_detection"
      role: "template_error_detector"
      description: "Detects template error spikes and recovery events"
      upstream_source: "sensor.template_error_diagnostics"
      downstream_consumers: ["binary_sensor.template_error_spike"]
      retention: "Previous value retained in attributes"
      update_frequency: "5 minutes"

  - name: "Subsystem Error Trend"
    unique_id: subsystem_error_trend
    icon: mdi:trending-up
    state: >
      {% set subsystems = {
        'hermes': states('sensor.hermes_error_count') | int(0),
        'aether': states('sensor.aether_error_count') | int(0),
        'theia': states('sensor.theia_error_count') | int(0),
        'athena': states('sensor.athena_error_count') | int(0)
      } %}
      
      {% set current_total = subsystems.values() | sum %}
      {% set previous_total = state_attr('sensor.subsystem_error_trend', 'previous_total') | default(current_total) | int %}
      {% set rise_threshold = 3 %}
      {% set fall_threshold = 3 %}
      
      {% if current_total - previous_total > rise_threshold %}
        rising
      {% elif previous_total - current_total > fall_threshold %}
        falling
      {% else %}
        stable
      {% endif %}
    attributes:
      previous_total: >
        {% set subsystems = {
          'hermes': states('sensor.hermes_error_count') | int(0),
          'aether': states('sensor.aether_error_count') | int(0),
          'theia': states('sensor.theia_error_count') | int(0),
          'athena': states('sensor.athena_error_count') | int(0)
        } %}
        {{ subsystems.values() | sum }}
      subsystem_counts: >
        {% set subsystems = {
          'hermes': states('sensor.hermes_error_count') | int(0),
          'aether': states('sensor.aether_error_count') | int(0),
          'theia': states('sensor.theia_error_count') | int(0),
          'athena': states('sensor.athena_error_count') | int(0)
        } %}
        {{ subsystems | tojson }}
      canonical_id: "sensor_subsystem_error_trend_δ"
      tier: "δ"
      subsystem: "athena"
      module: "System Error Tracking"
      type: "trend"
      role: "subsystem_error_tracker"
      description: "Tracks trends in subsystem errors across the HESTIA system"
      upstream_source: ["sensor.hermes_error_count", "sensor.aether_error_count", "sensor.theia_error_count", "sensor.athena_error_count"]
      downstream_consumers: ["binary_sensor.subsystem_errors_rising"]
      retention: "Previous value retained in attributes"
      update_frequency: "10 minutes"

  - name: "System Metadata - Error Decay"
    unique_id: metadata_system_error_decay
    state: "active"
    attributes:
      description: "Delta-tier system error decay and trend tracking"
      file: "/config/hestia/sensors/delta/athena/errors/system_error_decay.yaml"
      version: "1.0.0"
      last_updated: "2025-04-30"
      canonical_id: "metadata_system_error_decay_μ"
      tier: "μ"
      subsystem: "athena"
      module: "System Error Tracking"
      type: "metadata"
      role: "documentation"