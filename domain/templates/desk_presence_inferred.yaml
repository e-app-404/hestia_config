# ═══════════════════════════════════════════════════════════════
# ▶ LOGIC SENSOR: MacBook Display Presence ◀
# Display/casting context sensors for automations & ambient logic
# Loader: !include_dir_merge_list from domain/templates/
# Tier: δ  •  Domain: logic  •  Created: 2025-07-25
# ═══════════════════════════════════════════════════════════════
- binary_sensor:
    - name: "MacBook Retina Display Active"
      unique_id: "macbook_retina_display_active"
      icon: mdi:laptop
      state: >
        {% set displays = state_attr('sensor.macbook_displays', 'Display Names') or [] %}
        {{ 'Built-in Retina Display' in displays }}
      attributes:
        display: "Built-in Retina Display"
        rationale: "True if MacBook built-in display is active"
        last_updated: "{{ now().isoformat() }}"
        tier: "γ"

    - name: "MacBook HP32 Monitor Active"
      unique_id: "macbook_hp32_monitor_active"
      icon: mdi:monitor
      state: >
        {% set displays = state_attr('sensor.macbook_displays', 'Display Names') or [] %}
        {{ 'HP 32 Display' in displays }}
      attributes:
        display: "HP 32 Display"
        rationale: "True if HP 32 monitor is active"
        last_updated: "{{ now().isoformat() }}"
        tier: "γ"

    - name: "MacBook Bedroom TV (AirPlay) Active"
      unique_id: "macbook_bedroom_tv_airplay_active"
      icon: mdi:television
      state: >
        {% set displays = state_attr('sensor.macbook_displays', 'Display Names') or [] %}
        {{ 'Bedroom TV (AirPlay)' in displays }}
      attributes:
        display: "Bedroom TV (AirPlay)"
        rationale: "True if Bedroom TV is connected via AirPlay"
        last_updated: "{{ now().isoformat() }}"
        tier: "γ"

    - name: "MacBook Apple TV Bedroom TV (AirPlay) Active"
      unique_id: "macbook_appletv_bedroom_airplay_active"
      icon: mdi:apple
      state: >
        {% set displays = state_attr('sensor.macbook_displays', 'Display Names') or [] %}
        {{ 'Apple MaTuVu (AirPlay)' in displays }}
      attributes:
        display: "Apple MaTuVu (AirPlay)"
        rationale: "True if Apple TV in Bedroom is connected via AirPlay"
        last_updated: "{{ now().isoformat() }}"
        tier: "γ"

    - name: "Desk Presence Inferred"
      unique_id: "desk_presence_inferred"
      icon: mdi:desk
      device_class: occupancy
      state: >-
        {% set displays = state_attr('sensor.macbook_displays','Display Names') or [] %}
        {% set display_ok = 'HP 32 Display' in displays %}
        {% set ac = state_attr('sensor.macbook_internal_battery_state','Power Source State') %}
        {% set ac_power = (ac == 'AC Power') %}
        {% set at_home = is_state('device_tracker.macbook','home') %}
        {% set conn = states('binary_sensor.macbook_connectivity_recent_desk') %}
        {% set connection_ok = (conn == 'on') %}
        {{ display_ok and ac_power and at_home and connection_ok }}
      attributes:
        display_connected: >-
          {{ 'HP 32 Display' in (state_attr('sensor.macbook_displays','Display Names') or []) }}
        power_source: "{{ state_attr('sensor.macbook_internal_battery_state','Power Source State') }}"
        at_home: "{{ is_state('device_tracker.macbook','home') }}"
        connectivity_recent: "{{ states('binary_sensor.desk_macbook_recent_connectivity_desk') }}"
        rationale: >-
          On when external monitor is connected, on AC power, at home, and connectivity is either a known home Wi-Fi SSID or Ethernet (current/recent).
        fusion_strategy: "{{ ['display','ac_power','at_home','connectivity_recent'] | tojson }}"
        last_updated: "{{ now().isoformat() }}"
        subsystem: "soteria"
        module: "presence"
        type: "inference"
        tier: "γ"
        canonical_id: "desk_presence_inferred_γ"
        role: "composite"
        upstream_sources: >
          {{ [
            'sensor.macbook_displays',
            'sensor.macbook_internal_battery_state',
            'device_tracker.macbook',
            'binary_sensor.macbook_connectivity_recent_desk'
          ] | tojson }}

    - name: "Desk MacBook Recent Connectivity (Desk)"
      unique_id: "desk_macbook_recent_connectivity"
      device_class: connectivity
      delay_off:
        seconds: 240
      state: >-
        {% set ct = states('sensor.macbook_connection_type') | lower %}
        {% set ssid = states('sensor.macbook_ssid') %}
        {% set home_ssids = ['Router? I barely know her!', 'Aethernet_IoT', 'Archer_IoT'] %}
        {% set is_wifi = ct in ['wifi','wi-fi','wi_fi','wlan'] %}
        {% set is_eth  = ct == 'ethernet' %}
        {{ is_eth or (is_wifi and ssid in home_ssids) }}
      attributes:
        connection_type_raw: "{{ states('sensor.macbook_connection_type') }}"
        ssid: "{{ states('sensor.macbook_ssid') }}"
        home_ssids: "{{ ['Router? I barely know her!', 'Aethernet_IoT', 'Archer_IoT'] | tojson }}"
        delay_duration: "240s"
        rationale: >-
          True if connection is Ethernet OR Wi-Fi on a known home SSID. When it turns off, it decays after 120s (delay_off) to smooth brief link changes.
        last_updated: "{{ now().isoformat() }}"
        upstream_sources: >
          {{ ["sensor.macbook_connection_type", "sensor.macbook_ssid"] | tojson }}
        role: "inference"
        type: "proxy"
        subsystem: "soteria"
        module: "presence"
        tier: "γ"
        canonical_id: "desk_macbook_recent_connectivity_γ"
        fusion_strategy: >
          {{ ['connection_type_raw','ssid'] | tojson }}
