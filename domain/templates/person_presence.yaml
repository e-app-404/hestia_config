#══════════════════════════════════════════════════════════════════════════════
# ▶ PRESENCE SENSORS: Home Status ◀
# Loader: template: !include_dir_merge_list domain/templates/
# Schema: list of template blocks (sensor, binary_sensor)
#══════════════════════════════════════════════════════════════════════════════

- sensor:
    - name: "Evert Home Status"
      unique_id: "evert_home_status"
      icon: mdi:account-check
      state: >
        {% if states('person.evert') == 'home' %}
          Home
        {% else %}
          Away
        {% endif %}
      attributes:
        module: "zone_tracking"
        person_entity: "person.evert"
        rationale: "Indicates if person.evert is currently in the Home zone"
        raw_state: "{{ states('person.evert') }}"
        role: "zone_affiliation"
        subsystem: "perseus"
        tier: "γ"
        type: "presence_state"
        zone_reference: "home"
        last_updated: "{{ now().isoformat() }}"

    - name: "Evert Current Location"
      unique_id: "evert_current_location"
      icon: mdi:map-marker-radius
      state: >
        {% set zone = states('person.evert') %}
        {% if zone == 'not_home' %}
          Away
        {% else %}
          {{ zone | title }}
        {% endif %}
      attributes:
        module: "zone_tracking"
        person_entity: "person.evert"
        rationale: "Shows the last known zone or Away if outside defined zones"
        raw_state: "{{ states('person.evert') }}"
        role: "zone_tracking"
        subsystem: "perseus"
        tier: "γ"
        type: "last_known_zone"
        last_updated: "{{ now().isoformat() }}"

    - name: "Evert Last Known Zone"
      unique_id: "evert_last_known_zone"
      state: >
        {% set zone_id = states('person.evert') %}
        {% if zone_id == 'not_home' %}
          Away
        {% else %}
          {{ state_attr('zone.' ~ zone_id, 'friendly_name') or zone_id | title }}
        {% endif %}
      icon: >
        {% set zone_id = states('person.evert') %}
        {% if zone_id == 'not_home' %}
          mdi:map-marker-off
        {% else %}
          {{ state_attr('zone.' ~ zone_id, 'icon') or 'mdi:map-marker' }}
        {% endif %}
      attributes:
        module: "zone_tracking"
        person_entity: "person.evert"
        rationale: >
          Resolves person.evert's state to the friendly name of a zone entity,
          or 'Away' if outside all zones.
        raw_state: "{{ states('person.evert') }}"
        friendly_zone: >
          {% set zone_id = states('person.evert') %}
          {% if zone_id == 'not_home' %}
            Away
          {% else %}
            {{ state_attr('zone.' ~ zone_id, 'friendly_name') or zone_id | title }}
          {% endif %}
        role: "zone_tracking"
        subsystem: "perseus"
        tier: "γ"
        type: "last_known_zone"
        last_updated: "{{ now().isoformat() }}"

- binary_sensor:
    # BEDROOM PRESENCE (BETA)
    - name: "Bedroom Presence (Beta)"
      unique_id: "bedroom_presence_beta"
      device_class: occupancy
      state: >-
        {# Robust presence logic for bedroom area #}
        {% set persons = ['person.evert'] %}
        {% set present = false %}
        {% for person_id in persons %}
          {% set person_state = states(person_id) %}
          {% set source = state_attr(person_id, 'source') %}
          {% set s = states[person_id] if person_id in states else None %}
          {% set is_here = false %}

          {# Primary: person home #}
          {% if person_state == 'home' %}
            {% set is_here = true %}
          {% elif source and states(source) == 'home' %}
            {# Secondary: tracker indicates home with reliable transport #}
            {% set st = state_attr(source, 'source_type') %}
            {% if st in ['gps', 'bluetooth_le', 'bluetooth'] %}
              {% set is_here = true %}
            {% endif %}
          {% endif %}

          {# Staleness guard > 24h #}
          {% if s %}
            {% set last_ts = as_timestamp(s.last_changed) %}
            {% if last_ts is number and (as_timestamp(now()) - last_ts) > 86400 %}
              {% set is_here = false %}
            {% endif %}
          {% endif %}

          {% if is_here %}
            {% set present = true %}
          {% endif %}
        {% endfor %}
        {% if present %}on{% else %}off{% endif %}
      attributes:
        area_id: "bedroom"
        floor_id: "sanctum"
        module: "presence_inference"
        persons: "person.evert"   # ← attribute is a string template, not a YAML list
        strategy: "asymmetric: presence enhances, absence never blocks"
        subsystem: "hermes"
        tier: "β"
        untracked_housemate_warning: "Motion activation must remain independent - untracked occupant exists"

    # DESK PRESENCE (BETA)
    - name: "Desk Presence (Beta)"
      unique_id: "desk_presence_beta"
      device_class: occupancy
      state: >-
        {% set present = (states('person.evert') == 'home') %}
        {% set desk_inferred = is_state('binary_sensor.desk_presence_inferred', 'on') %}
        {% if present or desk_inferred %}on{% else %}off{% endif %}
      attributes:
        area_id: "desk"
        floor_id: "bedroom"
        module: "presence_inference"
        persons: "person.evert"
        strategy: "asymmetric: presence enhances, absence never blocks"
        subsystem: "hermes"
        tier: "β"
        upstream_sources: >
          {{ ["binary_sensor.desk_presence_inferred"] | tojson }}

    # LIVING ROOM PRESENCE (BETA)
    - name: "Living Room Presence (Beta)"
      unique_id: "living_room_presence_beta"
      device_class: occupancy
      state: >-
        {% set person_state = states('person.evert') %}
        {% set source = state_attr('person.evert', 'source') %}
        {% set via_person = (person_state == 'home') %}
        {% set via_source = source and states(source) == 'home' and (state_attr(source,'source_type') in ['gps','bluetooth_le','bluetooth']) %}
        {% if via_person or via_source %}on{% else %}off{% endif %}
      attributes:
        area_id: "living_room"
        floor_id: "downstairs"
        module: "presence_inference"
        persons: "person.evert"
        strategy: "asymmetric: presence enhances, absence never blocks"
        subsystem: "hermes"
        tier: "β"
        untracked_housemate_warning: "Shared space - untracked occupant may be present when sensor shows false"

    # KITCHEN PRESENCE (BETA) - Always False (Untracked Housemate Area)
    - name: "Kitchen Presence (Beta)"
      unique_id: "kitchen_presence_beta"
      device_class: occupancy
      state: "off"  # Always off - untracked housemate primary kitchen user
      attributes:
        area_id: "kitchen"
        floor_id: "downstairs"
        module: "presence_inference"
        persons: ""
        strategy: "always_false: untracked housemate primary kitchen user"
        subsystem: "hermes"
        tier: "β"
        untracked_housemate_warning: "Kitchen used by untracked occupant - never rely on this sensor for blocking"

    # ENSUITE PRESENCE (BETA) - Always False (Untracked Housemate Area)
    - name: "Ensuite Presence (Beta)"
      unique_id: "ensuite_presence_beta"
      device_class: occupancy
      state: >-
        {# Presence is on when the tracked user is home.
           Uses person state and, as a fallback, the person's tracker source when reliable. #}
        {% set person_state = states('person.evert') %}
        {% set source = state_attr('person.evert', 'source') %}
        {% set via_person = (person_state == 'home') %}
        {% set via_source = source and states(source) == 'home'
           and (state_attr(source,'source_type') in ['gps','bluetooth_le','bluetooth']) %}
        {% if via_person or via_source %}on{% else %}off{% endif %}
      attributes:
        area_id: "ensuite"
        floor_id: "sanctum"
        module: "presence_inference"
        persons: "person.evert"  # attribute values must be strings for template integration
        strategy: "track only person.evert; presence enhances, never blocks"
        area_
        subsystem: "hermes"
        tier: "β"

    # HALLWAY DOWNSTAIRS PRESENCE (BETA) - Always False (Common Area)
    - name: "Hallway Downstairs Presence (Beta)"
      unique_id: "hallway_downstairs_presence_beta"
      device_class: occupancy
      state: "off"  # Always off - common transit area
      attributes:
        area_id: "downstairs"
        floor_id: "hallway"
        module: "presence_inference"
        persons: ""
        strategy: "always_false: common transit area"
        subsystem: "hermes"
        tier: "β"
        untracked_housemate_warning: "Common area used by untracked occupant - never rely on this sensor for blocking"

    # HALLWAY UPSTAIRS PRESENCE (BETA) - Always False (Common Area)
    - name: "Hallway Upstairs Presence (Beta)"
      unique_id: "hallway_upstairs_presence_beta"
      device_class: occupancy
      state: "off"  # Always off - common transit area
      attributes:
        area_id: "upstairs"
        floor_id: "hallway"
        module: "presence_inference"
        persons: ""
        strategy: "always_false: common transit area"
        subsystem: "hermes"
        tier: "β"
        untracked_housemate_warning: "Common area used by untracked occupant - never rely on this sensor for blocking"
