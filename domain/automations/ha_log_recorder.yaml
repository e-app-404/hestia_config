- id: 7e1b2c9a-3f4d-4e8a-9b2c-8e5d1a7c2f3b
  alias: "Recorder purge noisy entities"
  mode: single
  trigger:
    - platform: time
      at: "04:20:00"
  action:
    - alias: "Daily: purge entity rows (no repack)"
      action: recorder.purge_entities
      data:
        keep_days: 0
        entity_id:
          - group.unavailable_entities
          - sensor.smartthings_entity_list

- id: 1a2b3c4d-5e6f-7a8b-9c0d-111213141516
  alias: "Recorder weekly repack"
  trigger:
    - platform: time
      at: "04:25:00"
  condition:
    - condition: template
      value_template: "{{ now().isoweekday() == 1 }}" # Monday
  action:
    - alias: "Weekly: repack DB"
      action: recorder.purge
      data:
        keep_days: 0
        repack: true
    - action: persistent_notification.create
      data:
        title: "Recorder Repack Success"
        message: "Repacked at {{ now().isoformat() }}."
        notification_id: recorder_repack_success

- id: 7e3b2c1a-4f8d-9a2e-3c7b-5d6e8f1a2b3c
  alias: "Logbook: curated occupancy entries"
  mode: queued
  triggers:
    - entity_id:
        - binary_sensor.bedroom_occupancy_beta
        - binary_sensor.kitchen_occupancy_beta
        - binary_sensor.living_room_occupancy_beta
        - binary_sensor.ensuite_occupancy_beta
        - binary_sensor.hallway_downstairs_occupancy_beta
        - binary_sensor.hallway_upstairs_occupancy_beta
        - binary_sensor.desk_occupancy_beta
      to:
        - "on"
        - "off"
      trigger: state
  variables:
    room: >-
      {% set nice = {
        'binary_sensor.bedroom_occupancy_beta': 'Bedroom',
        'binary_sensor.kitchen_occupancy_beta': 'Kitchen',
        'binary_sensor.living_room_occupancy_beta': 'Living Room',
        'binary_sensor.ensuite_occupancy_beta': 'Ensuite',
        'binary_sensor.hallway_downstairs_occupancy_beta': 'Downstairs Hallway',
        'binary_sensor.hallway_upstairs_occupancy_beta': 'Upstairs Hallway'
      } %}
      {{ nice.get(trigger.entity_id, trigger.entity_id) }}
    src: "{{ state_attr(trigger.entity_id, 'active_source') or 'unknown' }}"
    tmo: >-
      {% set t = state_attr(trigger.entity_id,'timeout') %}
      {{ (t|join(', ') if t is iterable) if t is not none else 'n/a' }}
  action:
    - action: logbook.log
      data:
        name: "{{ room }} Occupancy (β)"
        entity_id: input_boolean.hermes_presence_log
        message: >-
          {{ 'Detected' if trigger.to_state.state == 'on' else 'Cleared' }}
          • source: {{ src }} • timeout: {{ tmo }}
