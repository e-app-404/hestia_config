# Home Assistant webhook-based sensors for macOS mount telemetry
# Add to configuration.yaml

# Webhook automation to receive telemetry
automation:
  - alias: "MacBook HA Mount Telemetry Webhook"
    id: "macbook_ha_mount_telemetry_webhook"
    triggers:
      - trigger: webhook
        webhook_id: !secret macbook_hass_mount_webhook_id
        allowed_methods:
          - POST
        local_only: true
    actions:
      - event: macbook_mount_telemetry_received
        event_data:
          state: "{{ trigger.json.state }}"
          mounted: "{{ trigger.json.mounted }}"
          write_ok: "{{ trigger.json.write_ok }}"
          config_present: "{{ trigger.json.config_present }}"
          keychain_ok: "{{ trigger.json.keychain_ok }}"
          agent_loaded: "{{ trigger.json.agent_loaded }}"
          agent_state: "{{ trigger.json.agent_state }}"
          agent_exit_code: "{{ trigger.json.agent_exit_code }}"
          host: "{{ trigger.json.host }}"
          user: "{{ trigger.json.user }}"
          last_run: "{{ trigger.json.last_run }}"
          age_s: "{{ trigger.json.age_s }}"
          mount_details: "{{ trigger.json.mount_details }}"
  # Alert automations
  - alias: "MacBook HA Mount Down Alert"
    id: "macbook_ha_mount_down_alert"
    mode: restart
    triggers:
      - trigger: state
        entity_id: binary_sensor.macbook_ha_mount
        to: "off"
        for: "00:05:00"
    actions:
      - action: persistent_notification.create
        data:
          title: "MacBook HA Mount DOWN"
          message: >
            MacBook Home Assistant mount has been offline for 5+ minutes.
            Last status: {{ states('sensor.macbook_ha_mount_status') }}
            Details: {{ state_attr('sensor.macbook_ha_mount_status', 'mount_details') }}
          notification_id: "macbook_mount_down"

  - alias: "MacBook HA Mount Recovery"
    id: "macbook_ha_mount_recovery"
    mode: restart
    triggers:
      - trigger: state
        entity_id: binary_sensor.macbook_ha_mount
        to: "on"
    actions:
      - action: persistent_notification.dismiss
        data:
          notification_id: "macbook_mount_down"
      - action: persistent_notification.create
        data:
          title: "MacBook HA Mount RECOVERED"
          message: >
            MacBook Home Assistant mount is back online.
            Mount details: {{ state_attr('sensor.macbook_ha_mount_status', 'mount_details') }}
            Last run: {{ state_attr('sensor.macbook_ha_mount_status', 'last_run') }}
          notification_id: "macbook_mount_recovery"
# File sensor fallback for mount health
# NOTE: The File integration must be created via the Home Assistant UI (Integrations -> Add Integration -> File).
# The following shows the three UI fields you need to set when creating the File sensor (do NOT add a file platform sensor entry in YAML):
#
# - File path: /config/hestia/config/diagnostics/.last_mount_status.json
# - Value template:
# {{ value_json.health.summary | default('unknown') if value_json is defined else 'unknown' }}
# {{ value_json.health.summary if value_json is defined and value_json.health is defined else 'unknown' }}
# - Unit of measurement: (leave empty or use a short label, e.g. "status")
#
# Additional attributes (if you want them) can be created using a separate Template Sensor or in the UI templates:
# Example Template Sensor (YAML or UI template) to surface attributes from the JSON file content:
# template:
#   - sensor:
#       - name: "Macbook HASS Mount Health Attributes"
#         state: "{{ (states('sensor.macbook_hass_mount_health') | default('unknown')) }}"
#         attributes:
#           mounted: "{{ (value_json_from_file.mount.mounted | default(false)) }}"
#           write_ok: "{{ (value_json_from_file.mount.write_ok | default(false)) }}"
#

template:
  - sensor:
      - name: "Macbook HASS Mount Health Attributes"
        unique_id: "macbook_hass_mount_health"
        state: >
          {{ states('sensor.macbook_hass_mount_health') | default('unknown') }}
        attributes:
          mounted: >
            {{ (state_attr('sensor.macbook_hass_mount_health','mounted') | default(false)) }}
          write_ok: >
            {{ (state_attr('sensor.macbook_hass_mount_health','write_ok') | default(false)) }}
          agent_state: >
            {{ (state_attr('sensor.macbook_hass_mount_health','agent_state') | default('unknown')) }}
          last_update: >
            {{ (state_attr('sensor.macbook_hass_mount_health','last_update') | default('never')) }}
          upstream_sources: >
            {{ ['sensor.file_last_mount_status_json'] | tojson }}
          downstream_consumers: >
            {{ ['sensor.macbook_ha_mount_status', 'binary_sensor.macbook_ha_mount'] | tojson }}
          file: "/config/packages/hestia/ha_mount_telemetry_webhook.yaml"
          date: "2025-01-04"
          subsystem: "hades"
          integration: "macbook"
          role: "diagnostics"
          module: "hass mount"
          type: "file sensor"
          tier: "μ"
          canonical_id: "macbook_hass_mount_health_μ"

  # Template sensors triggered by webhook events
  - trigger:
      - trigger: event
        event_type: macbook_mount_telemetry_received
      - trigger: time_pattern
        minutes: "/2"
    sensor:
      - name: "MacBook HA Mount Status"
        unique_id: "macbook_ha_mount_status"
        state: >
          {% if trigger.platform == 'event' %}
            {{ trigger.event.data.state }}
          {% else %}
            {# On time ticks, compute freshness from last_run and force OFF if stale (ADR-0002 guards) #}
            {% set raw = state_attr('sensor.macbook_ha_mount_status','last_run') %}
            {% set lr = as_datetime(raw) if (raw is not none and raw not in ['unknown','unavailable','']) else None %}
            {% set age = (now() - lr).total_seconds() if (lr is not none) else 999999 %}
            {{ 'ON' if age < 300 else 'OFF' }}
          {% endif %}
        icon: "mdi:harddisk-plus"
        attributes:
          mounted: >
            {% if trigger.platform == 'event' %}
              {{ trigger.event.data.mounted | bool }}
            {% else %}
              {{ state_attr('sensor.macbook_ha_mount_status','mounted') | default(false) }}
            {% endif %}
          write_ok: >
            {% if trigger.platform == 'event' %}
              {{ trigger.event.data.write_ok | bool }}
            {% else %}
              {{ state_attr('sensor.macbook_ha_mount_status','write_ok') | default(false) }}
            {% endif %}
          config_present: >
            {% if trigger.platform == 'event' %}
              {{ trigger.event.data.config_present | bool }}
            {% else %}
              {{ state_attr('sensor.macbook_ha_mount_status','config_present') | default(false) }}
            {% endif %}
          keychain_ok: >
            {% if trigger.platform == 'event' %}
              {{ trigger.event.data.keychain_ok | bool }}
            {% else %}
              {{ state_attr('sensor.macbook_ha_mount_status','keychain_ok') | default(false) }}
            {% endif %}
          agent_loaded: >
            {% if trigger.platform == 'event' %}
              {{ trigger.event.data.agent_loaded | bool }}
            {% else %}
              {{ state_attr('sensor.macbook_ha_mount_status','agent_loaded') | default(false) }}
            {% endif %}
          agent_state: >
            {% if trigger.platform == 'event' %}
              {{ trigger.event.data.agent_state }}
            {% else %}
              {{ state_attr('sensor.macbook_ha_mount_status','agent_state') | default('unknown') }}
            {% endif %}
          agent_exit_code: >
            {% if trigger.platform == 'event' %}
              {{ trigger.event.data.agent_exit_code | int }}
            {% else %}
              {{ state_attr('sensor.macbook_ha_mount_status','agent_exit_code') | int(0) }}
            {% endif %}
          host: >
            {% if trigger.platform == 'event' %}
              {{ trigger.event.data.host }}
            {% else %}
              {{ state_attr('sensor.macbook_ha_mount_status','host') | default('unknown') }}
            {% endif %}
          user: >
            {% if trigger.platform == 'event' %}
              {{ trigger.event.data.user }}
            {% else %}
              {{ state_attr('sensor.macbook_ha_mount_status','user') | default('unknown') }}
            {% endif %}
          last_run: >
            {% if trigger.platform == 'event' %}
              {{ trigger.event.data.last_run }}
            {% else %}
              {{ state_attr('sensor.macbook_ha_mount_status','last_run') | default('') }}
            {% endif %}
          age_s: >
            {% if trigger.platform == 'event' %}
              {{ trigger.event.data.age_s | int }}
            {% else %}
              {% set raw = state_attr('sensor.macbook_ha_mount_status','last_run') %}
              {% set lr = as_datetime(raw) if (raw is not none and raw not in ['unknown','unavailable','']) else None %}
              {{ ((now() - lr).total_seconds() | int) if (lr is not none) else 999999 }}
            {% endif %}
          mount_details: >
            {% if trigger.platform == 'event' %}
              {{ trigger.event.data.mount_details }}
            {% else %}
              {{ state_attr('sensor.macbook_ha_mount_status','mount_details') | default('') }}
            {% endif %}
          upstream_sources: >
            {{ ['sensor.file_last_mount_status_json', 'sensor.macbook_hass_mount_health'] | tojson }}


sensor:
  - platform: rest
    name: "Glances Bridge DiskIO Missing Count"
    resource: !secret glances_bridge_diskio_url
    method: GET
    timeout: 10
    value_template: >
      {% set data = value_json if (value_json is not none) else [] %}
      {% if data is iterable %}
        {% set missing = data | selectattr('time_since_update', 'undefined') | list | count %}
        {{ missing }}
      {% else %}
        999999
      {% endif %}
    scan_interval: 120

template:
  - binary_sensor:
      - name: "Glances Bridge DiskIO Healthy"
        unique_id: "glances_bridge_diskio_healthy"
        state: >
          {% set raw = states('sensor.glances_bridge_diskio_missing_count') %}
          {% set n = (raw | int(999999)) %}
          {{ n == 0 }}
        attributes:
          upstream_sources: >
            {{ ['sensor.glances_bridge_diskio_missing_count'] | tojson }}
          file: "/config/packages/hestia/ha_mount_telemetry_webhook.yaml"
          subsystem: "glances"
          role: "diagnostics"
          type: "rest"
          tier: "μ"

