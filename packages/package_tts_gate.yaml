# ════════════════════════════════════════════════════════════════════════
# ▶ TTS-GATE PACKAGE  •  VAR  •  Package bundle for gating logic (HACS) ◀
# Loader: !include_dir_merge_named  •  merge all files as a dictionary
# File: config/packages/package_tts_gate.yaml
# Tier: σ  •  Domain: tts  •  Created: 2025-08-18
# ════════════════════════════════════════════════════════════════════════

var:
  tts_guard:
    friendly_name: "TTS Gate Registry"
    unique_id: "var_7f3c2e1b"
    initial_value: 0
    attributes:
      registry: "{}" # { "<key>": { "last_ts": float, "count": int } }

script:
  tts_gate:
    alias: "TTS – Gate/Throttle"
    description: "Speak only if this key hasn't exceeded repeats within cooldown."
    mode: parallel
    max: 10
    fields:
      key:
        name: Key
        description: "Unique key (e.g., ha_startup, fridge_left_open)"
        required: true
        selector: { text: { multiline: false } }
      message:
        name: Message
        description: "What to say"
        required: true
        selector: { text: { multiline: true } }
      media_player:
        name: Media player
        description: "Media player to play on"
        required: true
        selector: { entity: { domain: media_player } }
      tts_entity:
        name: TTS engine
        description: "TTS entity to use"
        required: true
        selector: { entity: { domain: tts } }
      volume:
        name: Volume
        description: "Volume level (0..1)"
        default: 0.5
        selector: { number: { min: 0, max: 1, step: 0.05, mode: slider } }
      language:
        name: Language
        description: "TTS language code (e.g., en, en-ca)"
        default: en
        selector: { text: { multiline: false } }
      cooldown_sec:
        name: Cooldown (seconds)
        description: "Within this window, repeats are limited"
        default: 1800
        selector: { number: { min: 0, max: 86400, step: 10, mode: slider } }
      max_repeats:
        name: Max repeats inside cooldown
        description: "Extra repeats allowed within the cooldown window"
        default: 1
        selector: { number: { min: 0, max: 10, step: 1 } }
    sequence:
      - variables:
          reg_src: "{{ state_attr('var.tts_guard','registry') | default('{}', true) }}"
          reg: "{{ reg_src if reg_src is mapping else (reg_src | from_json) }}"
          key_str: "{{ key | string }}"
          entry: "{{ reg.get(key_str, {}) }}"
          last_ts: "{{ entry.get('last_ts', 0) }}"
          prev_count: "{{ entry.get('count', 0) }}"
          now_ts: "{{ as_timestamp(now()) | float }}"
          cooldown: "{{ cooldown_sec | int(0) }}"
          window_ok: "{{ (now_ts - (last_ts|float)) >= cooldown }}"
          allow: "{{ window_ok or (prev_count | int(0)) < (max_repeats | int(1)) }}"
          new_count: "{{ 1 if window_ok else (prev_count | int(0) + 1) }}"
      - choose:
          - conditions: "{{ allow }}"
            sequence:
              - service: media_player.volume_set
                target:
                  entity_id: "{{ media_player }}"
                data:
                  volume_level: "{{ volume }}"
              - service: tts.speak
                target:
                  entity_id: "{{ tts_entity }}"
                data:
                  cache: true
                  media_player_entity_id: "{{ media_player }}"
                  message: "{{ message }}"
                  language: "{{ language }}"
              - variables:
                  new_reg: >-
                    {% set r = reg.copy() %}
                    {% set _ = r.update({ key_str: {'last_ts': now_ts, 'count': new_count } }) %}
                    {{ r }}
              - service: var.set
                data:
                  entity_id: var.tts_guard
                  attributes:
                    registry: "{{ new_reg | tojson }}"
