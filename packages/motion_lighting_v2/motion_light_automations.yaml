
automation:
  - alias: "Motion Lights — Bedroom (SQL v1.5)"
    id: motion_lights_bedroom_sql_v15
    mode: restart
    trigger:
      - platform: state
        entity_id: binary_sensor.bedroom_motion_beta
        to: "on"
    variables:
      _raw: "{{ state_attr('sensor.room_configs_motion_lighting','payload') }}"
      _cfgs: >-
        {% if _raw %}
          {% set parsed = _raw | from_json %}
          {% if parsed is mapping %}
            {{ parsed }}
          {% else %}
            {}
          {% endif %}
        {% else %}
          {}
        {% endif %}
      room_config: >-
        {% if _cfgs and 'bedroom' in _cfgs %}
          {% set cfg = _cfgs.bedroom %}
          {% if cfg is mapping %}
            {{ cfg }}
          {% elif cfg is string %}
            {{ cfg | from_json }}
          {% else %}
            {}
          {% endif %}
        {% else %}
          {}
        {% endif %}
      timeout: "{{ room_config.get('timeout', 120) | int }}"
      bypass: "{{ room_config.get('bypass', false) | bool }}"
      presence_multiplier: "{{ room_config.get('presence_timeout_multiplier', 1.0) | float }}"
      presence_active: "{{ is_state('binary_sensor.bedroom_presence_beta','on') or is_state('person.evert','home') }}"
      effective_timeout: "{{ (timeout * presence_multiplier) | int if presence_active else timeout }}"
      illuminance_threshold: "{{ room_config.get('illuminance_threshold', 10) | int }}"
    condition:
      - condition: template
        value_template: "{{ not bypass }}"
      - condition: template
        value_template: >
          {{ (states('sensor.bedroom_illuminance_beta') | float(9999)) < illuminance_threshold }}
    action:
      - service: light.turn_on
        target: { entity_id: light.adaptive_bedroom_light_group }
        data: { transition: 2 }
      - service: rest_command.room_db_update_config
        data:
          room_id: "bedroom"
          domain: "motion_lighting"
          config_data: >-
            {{ dict(room_config, **{
              'last_triggered': now().isoformat(),
              'trigger_count': (room_config.get('trigger_count', 0) | int) + 1
            }) }}
          schema_expected: 1
      - delay: { seconds: "{{ effective_timeout }}" }
      - service: light.turn_off
        target: { entity_id: light.adaptive_bedroom_light_group }
        data: { transition: 5 }

  - alias: "Motion Lights — Upstairs (SQL v1.5)"
    id: motion_lights_upstairs_sql_v15
    mode: restart
    trigger:
      - platform: state
        entity_id: binary_sensor.hallway_upstairs_motion_beta
        to: "on"
    variables:
      _raw: "{{ state_attr('sensor.room_configs_motion_lighting','payload') }}"
      _cfgs: >-
        {% if _raw %}
          {% set parsed = _raw | from_json %}
          {% if parsed is mapping %}
            {{ parsed }}
          {% else %}
            {}
          {% endif %}
        {% else %}
          {}
        {% endif %}
      room_config: >-
        {% if _cfgs and 'upstairs' in _cfgs %}
          {% set cfg = _cfgs.upstairs %}
          {% if cfg is mapping %}
            {{ cfg }}
          {% elif cfg is string %}
            {{ cfg | from_json }}
          {% else %}
            {}
          {% endif %}
        {% else %}
          {}
        {% endif %}
      timeout: "{{ room_config.get('timeout', 120) | int }}"
      bypass: "{{ room_config.get('bypass', false) | bool }}"
      presence_multiplier: "{{ room_config.get('presence_timeout_multiplier', 1.0) | float }}"
      presence_active: "{{ is_state('person.evert','home') }}"
      effective_timeout: "{{ (timeout * presence_multiplier) | int if presence_active else timeout }}"
      illuminance_threshold: "{{ room_config.get('illuminance_threshold', 10) | int }}"
    condition:
      - condition: template
        value_template: "{{ not bypass }}"
     # - condition: template
     #   value_template: >
     #     {{ (states('sensor.hallway_upstairs_illuminance_beta') | float(9999)) < illuminance_threshold }}
    action:
      - service: light.turn_on
        target: { entity_id: light.adaptive_upstairs_light_group }
        data: { transition: 2 }
      - service: rest_command.room_db_update_config
        data:
          room_id: "upstairs"
          domain: "motion_lighting"
          config_data: >-
            {{ dict(room_config, **{
              'last_triggered': now().isoformat(),
              'trigger_count': (room_config.get('trigger_count', 0) | int) + 1
            }) }}
          schema_expected: 1
      - delay: { seconds: "{{ effective_timeout }}" }
      - service: light.turn_off
        target: { entity_id: light.adaptive_upstairs_light_group }
        data: { transition: 5 }

  - alias: "Motion Lights — Downstairs (SQL v1.5)"
    id: motion_lights_downstairs_sql_v15
    mode: restart
    trigger:
      - platform: state
        entity_id: binary_sensor.hallway_downstairs_motion_beta
        to: "on"
    variables:
      _raw: "{{ state_attr('sensor.room_configs_motion_lighting','payload') }}"
      _cfgs: >-
        {% if _raw %}
          {% set parsed = _raw | from_json %}
          {% if parsed is mapping %}
            {{ parsed }}
          {% else %}
            {}
          {% endif %}
        {% else %}
          {}
        {% endif %}
      room_config: >-
        {% if _cfgs and 'downstairs' in _cfgs %}
          {% set cfg = _cfgs.downstairs %}
          {% if cfg is mapping %}
            {{ cfg }}
          {% elif cfg is string %}
            {{ cfg | from_json }}
          {% else %}
            {}
          {% endif %}
        {% else %}
          {}
        {% endif %}
      timeout: "{{ room_config.get('timeout', 120) | int }}"
      bypass: "{{ room_config.get('bypass', false) | bool }}"
      presence_multiplier: "{{ room_config.get('presence_timeout_multiplier', 1.0) | float }}"
      presence_active: "{{ is_state('person.evert','home') }}"
      effective_timeout: "{{ (timeout * presence_multiplier) | int if presence_active else timeout }}"
      illuminance_threshold: "{{ room_config.get('illuminance_threshold', 10) | int }}"
    condition:
      - condition: template
        value_template: "{{ not bypass }}"
    #  - condition: template
    #    value_template: >
    #      {{ (states('sensor.hallway_downstairs_illuminance_beta') | float(9999)) < illuminance_threshold }}
    action:
      - service: light.turn_on
        target: { entity_id: light.adaptive_downstairs_light_group }
        data: { transition: 2 }
      - service: rest_command.room_db_update_config
        data:
          room_id: "downstairs"
          domain: "motion_lighting"
          config_data: >-
            {{ dict(room_config, **{
              'last_triggered': now().isoformat(),
              'trigger_count': (room_config.get('trigger_count', 0) | int) + 1
            }) }}
          schema_expected: 1
      - delay: { seconds: "{{ effective_timeout }}" }
      - service: light.turn_off
        target: { entity_id: light.adaptive_downstairs_light_group }
        data: { transition: 5 }

  - alias: "Motion Lights — Kitchen (SQL v1.5)"
    id: motion_lights_kitchen_sql_v15
    mode: restart
    trigger:
      - platform: state
        entity_id: binary_sensor.kitchen_motion_beta
        to: "on"
    variables:
      _raw: "{{ state_attr('sensor.room_configs_motion_lighting','payload') }}"
      _cfgs: >-
        {% if _raw %}
          {% set parsed = _raw | from_json %}
          {% if parsed is mapping %}
            {{ parsed }}
          {% else %}
            {}
          {% endif %}
        {% else %}
          {}
        {% endif %}
      room_config: >-
        {% if _cfgs and 'kitchen' in _cfgs %}
          {% set cfg = _cfgs.kitchen %}
          {% if cfg is mapping %}
            {{ cfg }}
          {% elif cfg is string %}
            {{ cfg | from_json }}
          {% else %}
            {}
          {% endif %}
        {% else %}
          {}
        {% endif %}
      timeout: "{{ room_config.get('timeout', 120) | int }}"
      bypass: "{{ room_config.get('bypass', false) | bool }}"
      presence_multiplier: "{{ room_config.get('presence_timeout_multiplier', 1.0) | float }}"
      presence_active: "{{ is_state('person.evert','home') }}"
      effective_timeout: "{{ (timeout * presence_multiplier) | int if presence_active else timeout }}"
      illuminance_threshold: "{{ room_config.get('illuminance_threshold', 10) | int }}"
    condition:
      - condition: template
        value_template: "{{ not bypass }}"
     # - condition: template
     #   value_template: >
     #     {{ (states('sensor.kitchen_illuminance_beta') | float(9999)) < illuminance_threshold }}
    action:
      - service: light.turn_on
        target: { entity_id: light.adaptive_kitchen_light_group }
        data: { transition: 2 }
      - service: rest_command.room_db_update_config
        data:
          room_id: "kitchen"
          domain: "motion_lighting"
          config_data: >-
            {{ dict(room_config, **{
              'last_triggered': now().isoformat(),
              'trigger_count': (room_config.get('trigger_count', 0) | int) + 1
            }) }}
          schema_expected: 1
      - delay: { seconds: "{{ effective_timeout }}" }
      - service: light.turn_off
        target: { entity_id: light.adaptive_kitchen_light_group }
        data: { transition: 5 }

  - alias: "Motion Lights — Living Room (SQL v1.5)"
    id: motion_lights_living_room_sql_v15
    mode: restart
    trigger:
      - platform: state
        entity_id: binary_sensor.living_room_motion_beta
        to: "on"
    variables:
      _raw: "{{ state_attr('sensor.room_configs_motion_lighting','payload') }}"
      _cfgs: >-
        {% if _raw %}
          {% set parsed = _raw | from_json %}
          {% if parsed is mapping %}
            {{ parsed }}
          {% else %}
            {}
          {% endif %}
        {% else %}
          {}
        {% endif %}
      room_config: >-
        {% if _cfgs and 'living_room' in _cfgs %}
          {% set cfg = _cfgs.living_room %}
          {% if cfg is mapping %}
            {{ cfg }}
          {% elif cfg is string %}
            {{ cfg | from_json }}
          {% else %}
            {}
          {% endif %}
        {% else %}
          {}
        {% endif %}
      timeout: "{{ room_config.get('timeout', 120) | int }}"
      bypass: "{{ room_config.get('bypass', false) | bool }}"
      presence_multiplier: "{{ room_config.get('presence_timeout_multiplier', 1.0) | float }}"
      presence_active: "{{ is_state('person.evert','home') }}"
      effective_timeout: "{{ (timeout * presence_multiplier) | int if presence_active else timeout }}"
      illuminance_threshold: "{{ room_config.get('illuminance_threshold', 10) | int }}"
    condition:
      - condition: template
        value_template: "{{ not bypass }}"
      - condition: template
        value_template: >
          {{ (states('sensor.living_room_illuminance_beta') | float(9999)) < illuminance_threshold }}
    action:
      - service: light.turn_on
        target: { entity_id: light.adaptive_living_room_light_group }
        data: { transition: 2 }
      - service: rest_command.room_db_update_config
        data:
          room_id: "living_room"
          domain: "motion_lighting"
          config_data: >-
            {{ dict(room_config, **{
              'last_triggered': now().isoformat(),
              'trigger_count': (room_config.get('trigger_count', 0) | int) + 1
            }) }}
          schema_expected: 1
      - delay: { seconds: "{{ effective_timeout }}" }
      - service: light.turn_off
        target: { entity_id: light.adaptive_living_room_light_group }
        data: { transition: 5 }

  - alias: "Motion Lights — Ensuite (SQL v1.5)"
    id: motion_lights_ensuite_sql_v15
    mode: restart
    trigger:
      - platform: state
        entity_id: binary_sensor.ensuite_motion_beta
        to: "on"
    variables:
      _raw: "{{ state_attr('sensor.room_configs_motion_lighting','payload') }}"
      _cfgs: >-
        {% if _raw %}
          {% set parsed = _raw | from_json %}
          {% if parsed is mapping %}
            {{ parsed }}
          {% else %}
            {}
          {% endif %}
        {% else %}
          {}
        {% endif %}
      room_config: >-
        {% if _cfgs and 'ensuite' in _cfgs %}
          {% set cfg = _cfgs.ensuite %}
          {% if cfg is mapping %}
            {{ cfg }}
          {% elif cfg is string %}
            {{ cfg | from_json }}
          {% else %}
            {}
          {% endif %}
        {% else %}
          {}
        {% endif %}
      timeout: "{{ room_config.get('timeout', 120) | int }}"
      bypass: "{{ room_config.get('bypass', false) | bool }}"
      presence_multiplier: "{{ room_config.get('presence_timeout_multiplier', 1.0) | float }}"
      presence_active: "{{ is_state('person.evert','home') }}"
      effective_timeout: "{{ (timeout * presence_multiplier) | int if presence_active else timeout }}"
      illuminance_threshold: "{{ room_config.get('illuminance_threshold', 10) | int }}"
    condition:
      - condition: template
        value_template: "{{ not bypass }}"
      - condition: template
        value_template: >
          {{ (states('sensor.ensuite_illuminance_beta') | float(9999)) < illuminance_threshold }}
    action:
      - service: light.turn_on
        target: { entity_id: light.adaptive_ensuite_light_group }
        data: { transition: 2 }
      - service: rest_command.room_db_update_config
        data:
          room_id: "ensuite"
          domain: "motion_lighting"
          config_data: >-
            {{ dict(room_config, **{
              'last_triggered': now().isoformat(),
              'trigger_count': (room_config.get('trigger_count', 0) | int) + 1
            }) }}
          schema_expected: 1
      - delay: { seconds: "{{ effective_timeout }}" }
      - service: light.turn_off
        target: { entity_id: light.adaptive_ensuite_light_group }
        data: { transition: 5 }


  - alias: "Motion Lights Desk (SQL v1.5)"
    id: motion_lights_desk_sql_v15
    mode: restart
    trigger:
      - platform: state
        entity_id: binary_sensor.desk_motion_proxy
        to: "on"
    variables:
      _raw: "{{ state_attr('sensor.room_configs_motion_lighting','payload') }}"
      _cfgs: >-
        {% if _raw %}
          {% set parsed = _raw | from_json %}
          {% if parsed is mapping %}
            {{ parsed }}
          {% else %}
            {}
          {% endif %}
        {% else %}
          {}
        {% endif %}
      room_config: >-
        {% if _cfgs and 'desk' in _cfgs %}
          {% set cfg = _cfgs.desk %}
          {% if cfg is mapping %}
            {{ cfg }}
          {% elif cfg is string %}
            {{ cfg | from_json %}
          {% else %}
            {}
          {% endif %}
        {% else %}
          {}
        {% endif %}
      timeout: "{{ room_config.get('timeout', 300) | int }}"
      bypass: "{{ room_config.get('bypass', false) | bool }}"
      presence_multiplier: "{{ room_config.get('presence_timeout_multiplier', 2.0) | float }}"
      presence_active: "{{ is_state('binary_sensor.desk_presence_beta','on') or is_state('person.evert','home') }}"
      effective_timeout: "{{ (timeout * presence_multiplier) | int if presence_active else timeout }}"
      illuminance_threshold: "{{ room_config.get('illuminance_threshold', 20) | int }}"
    condition:
      - condition: template
        value_template: "{{ not bypass }}"
      # Note: Desk area uses bedroom illuminance sensor as fallback since no dedicated desk illuminance sensor exists
      - condition: template
        value_template: >
          {{ (states('sensor.bedroom_illuminance_beta') | float(9999)) < illuminance_threshold }}
    action:
      - service: light.turn_on
        target: { entity_id: light.adaptive_desk_light_group }
        data: { transition: 2 }
      - service: rest_command.room_db_update_config
        data:
          room_id: "desk"
          domain: "motion_lighting"
          config_data: >-
            {{ dict(room_config, **{
              'last_triggered': now().isoformat(),
              'trigger_count': (room_config.get('trigger_count', 0) | int) + 1
            }) }}
          schema_expected: 1
      - delay: { seconds: "{{ effective_timeout }}" }
      - service: light.turn_off
        target: { entity_id: light.adaptive_desk_light_group }
        data: { transition: 5 }


  # Blueprint-based Simple Motion Lighting Automations
  - alias: "Motion Lights — Wardrobe (Blueprint v1.0)"
    id: motion_lights_wardrobe_blueprint_v10
    use_blueprint:
      path: homeassistant/motion_light.yaml
      input:
        motion_entity: binary_sensor.bedroom_wardrobe_motion_beta
        light_target:
          entity_id: light.group_wardrobe_light
        no_motion_wait: 120

  - alias: "Motion Lights — Ottoman (Blueprint v1.0)"
    id: motion_lights_ottoman_blueprint_v10
    use_blueprint:
      path: homeassistant/motion_light.yaml
      input:
        motion_entity: binary_sensor.bedroom_ottoman_motion_proxy
        light_target:
          entity_id: light.group_ottoman_light
        no_motion_wait: 45

  # ═════════════════════════════════════════════════════════════════════════════
  # ⟫⟫ Adaptive Lighting Sleep Mode Scheduler (Fixed Times)  ◀
  # ═════════════════════════════════════════════════════════════════════════════

  - alias: "Adaptive Lighting — Enable Sleep Mode (Evening)"
    id: adaptive_lighting_enable_sleep_mode_evening
    mode: parallel
    trigger:
      - platform: time
        at: "21:30:00"
    action:
      - service: switch.turn_on
        target:
          entity_id:
            - switch.adaptive_lighting_sleep_mode_bedroom
            - switch.adaptive_lighting_sleep_mode_desk
            - switch.adaptive_lighting_sleep_mode_ensuite
            - switch.adaptive_lighting_sleep_mode_kitchen
            - switch.adaptive_lighting_sleep_mode_hallway_downstairs
            - switch.adaptive_lighting_sleep_mode_hallway_upstairs
            - switch.adaptive_lighting_sleep_mode_living_room
        data:
          transition: 30

  - alias: "Adaptive Lighting — Disable Sleep Mode (Morning)"
    id: adaptive_lighting_disable_sleep_mode_morning
    mode: parallel
    trigger:
      - platform: time
        at: "07:00:00"
    action:
      - service: switch.turn_off
        target:
          entity_id:
            - switch.adaptive_lighting_sleep_mode_bedroom
            - switch.adaptive_lighting_sleep_mode_desk
            - switch.adaptive_lighting_sleep_mode_ensuite
            - switch.adaptive_lighting_sleep_mode_kitchen
            - switch.adaptive_lighting_sleep_mode_hallway_downstairs
            - switch.adaptive_lighting_sleep_mode_hallway_upstairs
            - switch.adaptive_lighting_sleep_mode_living_room
        data:
          transition: 60

  - alias: "Adaptive Lighting — Late Night Sleep Mode (Deep Sleep)"
    id: adaptive_lighting_late_night_deep_sleep
    mode: parallel
    trigger:
      - platform: time
        at: "23:00:00"
    condition:
      - condition: state
        entity_id: switch.adaptive_lighting_sleep_mode_bedroom
        state: "on"
    action:
      - service: adaptive_lighting.set_manual_control
        target:
          entity_id:
            - switch.adaptive_lighting_bedroom
            - switch.adaptive_lighting_desk
        data:
          manual_control: false
      - service: light.turn_on
        target:
          entity_id:
            - light.adaptive_bedroom_light_group
            - light.adaptive_desk_light_group
        data:
          brightness_pct: 5
          rgb_color: [20, 5, 50]
          transition: 10

  - alias: "Adaptive Lighting — Weekend Sleep Mode Extension"
    id: adaptive_lighting_weekend_sleep_extension
    mode: single
    trigger:
      - platform: time
        at: "07:00:00"
    condition:
      - condition: time
        weekday:
          - sat
          - sun
    action:
      - delay:
          hours: 2
      - service: switch.turn_off
        target:
          entity_id:
            - switch.adaptive_lighting_sleep_mode_bedroom
            - switch.adaptive_lighting_sleep_mode_desk
            - switch.adaptive_lighting_sleep_mode_ensuite
            - switch.adaptive_lighting_sleep_mode_kitchen
            - switch.adaptive_lighting_sleep_mode_hallway_downstairs
            - switch.adaptive_lighting_sleep_mode_hallway_upstairs
            - switch.adaptive_lighting_sleep_mode_living_room
        data:
          transition: 90