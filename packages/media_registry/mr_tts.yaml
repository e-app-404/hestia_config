# ════════════════════════════════════════════════════════════════════════
# ▶ TTS-GATE PACKAGE (Room-DB Storage) ◀
# Storage Backend: SQLite via Room-DB (shared domain, room_id: tts_gate_registry)
# Replaces: input_text storage (4KB limit removed, now 512KB capacity)
# Compliant: ADR-0001 TTS action template
# ════════════════════════════════════════════════════════════════════════

script:
  tts_gate_native:
    alias: "TTS Gate/Throttle (Room-DB)"
    description: "Speak only if this key hasn't exceeded repeats within cooldown. Uses Room-DB for unlimited storage."
    mode: parallel
    max: 10
    fields:
      key:
        name: Key
        description: "Unique key (e.g., ha_startup, fridge_left_open)"
        required: true
        selector: { text: { multiline: false } }
      message:
        name: Message
        description: "What to say"
        required: true
        selector: { text: { multiline: true } }
      media_player:
        name: Media player
        description: "Media player to play on"
        required: true
        selector:
          entity:
            domain: media_player
      tts_entity:
        name: TTS engine
        description: "TTS service to use (e.g., tts.google_translate)"
        required: true
        selector: { text: { multiline: false } }
      volume:
        name: Volume
        description: "Volume level (0..1)"
        default: 0.5
        selector: { number: { min: 0, max: 1, step: 0.05, mode: slider } }
      language:
        name: Language
        description: "TTS language code (e.g., en, en-ca)"
        default: en
        selector: { text: { multiline: false } }
      cooldown_sec:
        name: Cooldown (seconds)
        description: "Within this window, repeats are limited"
        default: 1800
        selector: { number: { min: 0, max: 86400, step: 10, mode: slider } }
      max_repeats:
        name: Max repeats inside cooldown
        description: "Extra repeats allowed within the cooldown window"
        default: 1
        selector: { number: { min: 0, max: 10, step: 1 } }
    sequence:
      - variables:
          # Read from Room-DB SQL sensor (shared registry)
          payload: "{{ state_attr('sensor.room_configs_shared_registry', 'payload') }}"
          reg: >-
            {% if payload and 'tts_gate_registry' in payload %}
              {{ payload['tts_gate_registry'] }}
            {% else %}
              {}
            {% endif %}
          key_str: "{{ key | string }}"
          entry: "{{ reg.get(key_str, {}) }}"
          last_ts: "{{ entry.get('last_ts', 0) }}"
          prev_count: "{{ entry.get('count', 0) }}"
          now_ts: "{{ as_timestamp(now()) | float }}"
          cooldown: "{{ cooldown_sec | int(0) }}"
          window_ok: "{{ (now_ts - (last_ts|float)) >= cooldown }}"
          allow: "{{ window_ok or (prev_count | int(0)) < (max_repeats | int(1)) }}"
          new_count: "{{ 1 if window_ok else (prev_count | int(0) + 1) }}"

      - choose:
          - conditions: "{{ allow }}"
            sequence:
              # Set volume
              - action: media_player.volume_set
                target:
                  entity_id: "{{ media_player }}"
                data:
                  volume_level: "{{ volume }}"

              # Speak (ADR-0001 compliant)
              - action: tts.speak
                target:
                  entity_id: "{{ tts_entity }}"
                data:
                  cache: true
                  media_player_entity_id: "{{ media_player }}"
                  message: "{{ message }}"
                  language: "{{ language }}"

              # Update registry in Room-DB
              - variables:
                  new_reg: >-
                    {% set r = (reg.copy() if reg is mapping else {}) %}
                    {% set _ = r.update({ key_str: {'last_ts': now_ts, 'count': new_count } }) %}
                    {{ r }}

              # Write to Room-DB (replaces input_text.set_value)
              - service: rest_command.room_db_update_config
                data:
                  room_id: "tts_gate_registry"
                  domain: "shared"
                  config_data: "{{ new_reg }}"
                  schema_expected: 1

        # Rate limit protection (optional log)
        default:
          - service: system_log.write
            data:
              message: "TTS gate blocked: {{ key }} (cooldown active, count={{ prev_count }})"
              level: debug
