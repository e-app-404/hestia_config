# ════════════════════════════════════════════════════════════════════════
# ▶ TTS-GATE PACKAGE (INDIVIDUAL)  •  Per-Key Helper Entities ◀
# Alternative approach using individual input_number/input_datetime per key
# Tier: σ  •  Domain: tts  •  Created: 2025-10-10
# ════════════════════════════════════════════════════════════════════════

# Example for common TTS keys - expand as needed
input_datetime:
  tts_gate_ha_startup_last:
    name: "TTS Gate - HA Startup Last Trigger"
    has_date: true
    has_time: true
    
  tts_gate_fridge_left_open_last:
    name: "TTS Gate - Fridge Alert Last Trigger"
    has_date: true
    has_time: true
    
  tts_gate_low_battery_last:
    name: "TTS Gate - Low Battery Last Trigger"
    has_date: true
    has_time: true

input_number:
  tts_gate_ha_startup_count:
    name: "TTS Gate - HA Startup Count"
    min: 0
    max: 100
    step: 1
    mode: box
    
  tts_gate_fridge_left_open_count:
    name: "TTS Gate - Fridge Alert Count"
    min: 0
    max: 100
    step: 1
    mode: box
    
  tts_gate_low_battery_count:
    name: "TTS Gate - Low Battery Count"
    min: 0
    max: 100
    step: 1
    mode: box

script:
  tts_gate_individual:
    alias: "TTS – Gate/Throttle (Individual Helpers)"
    description: "Uses individual input_datetime/input_number per key"
    mode: parallel
    max: 10
    fields:
      key:
        name: Key
        description: "Unique key (ha_startup, fridge_left_open, low_battery)"
        required: true
        selector: { text: { multiline: false } }
      message:
        name: Message
        description: "What to say"
        required: true
        selector: { text: { multiline: true } }
      media_player:
        name: Media player
        description: "Media player to play on"
        required: true
        selector: { entity: { domain: media_player } }
      tts_entity:
        name: TTS engine
        description: "TTS entity to use"
        required: true
        selector: { entity: { domain: tts } }
      volume:
        name: Volume
        description: "Volume level (0..1)"
        default: 0.5
        selector: { number: { min: 0, max: 1, step: 0.05, mode: slider } }
      language:
        name: Language
        description: "TTS language code (e.g., en, en-ca)"
        default: en
        selector: { text: { multiline: false } }
      cooldown_sec:
        name: Cooldown (seconds)
        description: "Within this window, repeats are limited"
        default: 1800
        selector: { number: { min: 0, max: 86400, step: 10, mode: slider } }
      max_repeats:
        name: Max repeats inside cooldown
        description: "Extra repeats allowed within the cooldown window"
        default: 1
        selector: { number: { min: 0, max: 10, step: 1 } }
    sequence:
      - variables:
          key_clean: "{{ key | string | replace(' ', '_') | replace('-', '_') | lower }}"
          last_entity: "input_datetime.tts_gate_{{ key_clean }}_last"
          count_entity: "input_number.tts_gate_{{ key_clean }}_count"
          last_ts_raw: "{{ states(last_entity) }}"
          last_ts: >-
            {% set t = as_datetime(last_ts_raw) if last_ts_raw not in ['unknown','unavailable',''] else None %}
            {{ as_timestamp(t) | float(0) if t is not none else 0 }}
          prev_count: "{{ states(count_entity) | int(0) }}"
          now_ts: "{{ as_timestamp(now()) | float }}"
          cooldown: "{{ cooldown_sec | int(0) }}"
          window_ok: "{{ (now_ts - last_ts) >= cooldown }}"
          allow: "{{ window_ok or prev_count < (max_repeats | int(1)) }}"
          new_count: "{{ 1 if window_ok else (prev_count + 1) }}"
      - choose:
          - conditions: "{{ allow and has_entity(last_entity) and has_entity(count_entity) }}"
            sequence:
              - action: media_player.volume_set
                target:
                  entity_id: "{{ media_player }}"
                data:
                  volume_level: "{{ volume }}"
              - action: tts.speak
                target:
                  entity_id: "{{ tts_entity }}"
                data:
                  cache: true
                  media_player_entity_id: "{{ media_player }}"
                  message: "{{ message }}"
                  language: "{{ language }}"
              - action: input_datetime.set_datetime
                target:
                  entity_id: "{{ last_entity }}"
                data:
                  datetime: "{{ now() }}"
              - action: input_number.set_value
                target:
                  entity_id: "{{ count_entity }}"
                data:
                  value: "{{ new_count }}"
          - conditions: "{{ not (has_entity(last_entity) and has_entity(count_entity)) }}"
            sequence:
              - action: persistent_notification.create
                data:
                  title: "TTS Gate Error"
                  message: "Key '{{ key }}' requires entities: {{ last_entity }}, {{ count_entity }}"