# No quiet-hour helpers: we use schedule.valetudo_allowed

input_text:
  valetudo_base_topic:
    name: "Valetudo Base Topic"
    min: 1
    max: 128
    initial: "valetudo/robot"

script:
  valetudo_clean_room_ad_hoc:
    alias: "Valetudo — Clean Room (Ad-hoc)"
    mode: queued
    fields:
      room:
        description: "Canonical room id"
        example: "bedroom"
      force:
        description: "Bypass schedule gate (schedule.valetudo_allowed)"
        example: false
      force_presence:
        description: "Bypass presence gate"
        example: false
    sequence:
      - event: valetudo_ad_hoc_clean
        event_data:
          room: "{{ room }}"
          force: "{{ force | default(false) }}"
          force_presence: "{{ force_presence | default(false) }}"

automation:
  - alias: "Valetudo — Daily Routine Trigger"
    description: "Optional: nudge the routine cycle; app also polls every 30s."
    trigger:
      - platform: time
        at: "09:00:00"
    condition:
      - condition: state
        entity_id: schedule.valetudo_allowed
        state: "on"
    action:
      - event: valetudo_routine_clean_requested

  - alias: "Valetudo — Flag Stale Rooms"
    mode: single
    variables:
      rooms_to_flag: >-
        {% set raw = state_attr('sensor.room_configs_vacuum_control','payload') | default('{}') %}
        {% set data = raw | from_json if raw is string and raw.startswith('{') else {} %}
        {% set now_ts = now().timestamp() %}
        {% set out = [] %}
        {% for room, cfg in (data or {}).items() %}
          {% set last = cfg.get('last_cleaned') %}
          {% set freq = (cfg.get('cleaning_frequency_days', 7) | int(7)) %}
          {% set due = (last is none) or (as_timestamp(last, default=0) > 0 and (now_ts - as_timestamp(last, default=0)) / 86400 > freq) %}
          {% if due %}{% set _ = out.append(room) %}{% endif %}
        {% endfor %}
        {{ out }}
    trigger:
      - platform: time
        at: "08:00:00"
    action:
      - repeat:
          for_each: "{{ rooms_to_flag }}"
          sequence:
            - service: rest_command.room_db_update_config
              data:
                room_id: "{{ repeat.item }}"
                domain: vacuum_control
                config_data:
                  needs_cleaning: 1
                schema_expected: 1
            - delay: "00:00:02"
