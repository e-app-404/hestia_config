# ════════════════════════════════════════════════════════════════════════
# ▶ TTS-GATE PACKAGE (NATIVE)  •  Native HA Components Only ◀
# Loader: !include_dir_merge_named  •  merge all files as a dictionary
# File: config/packages/package_tts_gate_native.yaml
# Tier: σ  •  Domain: tts  •  Created: 2025-10-10
# Replaces: package_tts_gate.yaml (HACS Variable dependency removed)
# ════════════════════════════════════════════════════════════════════════

# Note:  input_text helper must be created via UI
# to support large JSON storage (>255 chars). YAML config limited to 255 chars.
# UI creation allows up to 100,000 characters for JSON registry storage.


script:
  tts_gate_native:
    alias: "TTS – Gate/Throttle (Native)"
    description: "Speak only if this key hasn't exceeded repeats within cooldown. Uses native HA components only."
    mode: parallel
    max: 10
    fields:
      key:
        name: Key
        description: "Unique key (e.g., ha_startup, fridge_left_open)"
        required: true
        selector: { text: { multiline: false } }
      message:
        name: Message
        description: "What to say"
        required: true
        selector: { text: { multiline: true } }
      media_player:
        name: Media player
        description: "Media player to play on"
        required: true
        selector:
          entity:
            domain: media_player
      tts_entity:
        name: TTS engine
        description: "TTS service to use (e.g., tts.google_translate)"
        required: true
        selector: { text: { multiline: false } }
      volume:
        name: Volume
        description: "Volume level (0..1)"
        default: 0.5
        selector: { number: { min: 0, max: 1, step: 0.05, mode: slider } }
      language:
        name: Language
        description: "TTS language code (e.g., en, en-ca)"
        default: en
        selector: { text: { multiline: false } }
      cooldown_sec:
        name: Cooldown (seconds)
        description: "Within this window, repeats are limited"
        default: 1800
        selector: { number: { min: 0, max: 86400, step: 10, mode: slider } }
      max_repeats:
        name: Max repeats inside cooldown
        description: "Extra repeats allowed within the cooldown window"
        default: 1
        selector: { number: { min: 0, max: 10, step: 1 } }
    sequence:
      - variables:
          reg_src: "{{ states('input_text.tts_gate_registry') | default('{}', true) }}"
          reg: "{{ reg_src if reg_src is mapping else (reg_src | from_json) }}"
          key_str: "{{ key | string }}"
          entry: "{{ reg.get(key_str, {}) }}"
          last_ts: "{{ entry.get('last_ts', 0) }}"
          prev_count: "{{ entry.get('count', 0) }}"
          now_ts: "{{ as_timestamp(now()) | float }}"
          cooldown: "{{ cooldown_sec | int(0) }}"
          window_ok: "{{ (now_ts - (last_ts|float)) >= cooldown }}"
          allow: "{{ window_ok or (prev_count | int(0)) < (max_repeats | int(1)) }}"
          new_count: "{{ 1 if window_ok else (prev_count | int(0) + 1) }}"
      - choose:
          - conditions: "{{ allow }}"
            sequence:
              - action: media_player.volume_set
                target:
                  entity_id: "{{ media_player }}"
                data:
                  volume_level: "{{ volume }}"
              - action: tts.speak
                target:
                  entity_id: "{{ tts_entity }}"
                data:
                  cache: true
                  media_player_entity_id: "{{ media_player }}"
                  message: "{{ message }}"
                  language: "{{ language }}"
              - variables:
                  new_reg: >-
                    {% set r = reg.copy() %}
                    {% set _ = r.update({ key_str: {'last_ts': now_ts, 'count': new_count } }) %}
                    {{ r }}
              - action: input_text.set_value
                target:
                  entity_id: input_text.tts_gate_registry
                data:
                  value: "{{ new_reg | tojson }}"

# Optional: Template sensor for monitoring TTS gate status
template:
  - sensor:
      - name: "TTS Gate Registry Status"
        unique_id: "tts_gate_registry_status"
        state: >-
          {% set reg_src = states('input_text.tts_gate_registry') | default('{}', true) %}
          {% set reg = reg_src if reg_src is mapping else (reg_src | from_json) %}
          {{ reg.keys() | list | length }}
        attributes:
          keys: >-
            {% set reg_src = states('input_text.tts_gate_registry') | default('{}', true) %}
            {% set reg = reg_src if reg_src is mapping else (reg_src | from_json) %}
            {{ reg.keys() | list }}
          registry_size_bytes: >-
            {% set reg_src = states('input_text.tts_gate_registry') | default('{}', true) %}
            {{ reg_src | length }}
        unit_of_measurement: "keys"
        icon: mdi:gate-buffer
      