# ══════════════════════════════════════════════════════════════════════════════
# ⟫⟫ UNAVAILABLE ENTITIES  •  Custom Sensor for Entity State Health ◀
# ⟫⟫ configuration.yaml  •  packages: !include_dir_named packages
# ⟫⟫ Tier: β  •  Domain: template, group, automation  •  Created: 2025-07-17
# ⟫⟫ https://github.com/jazzyisj/unavailable-entities-sensor/blob/main/README.md
# ══════════════════════════════════════════════════════════════════════════════

# ══ REQUIRED - List of disabled device entities ══
command_line:
  sensor:
    name: "Disabled Device Entities"
    unique_id: "disabled_device_entities_v2"
    scan_interval: 1800 # 30 min; pick your poison
    command_timeout: 15
    json_attributes: [entities]
    value_template: "{{ value_json.entities | length }}"
    command: >-
      jq -c '{entities: (.data.entities | map(select(.disabled_by != null) | .entity_id))}'
      < /config/.storage/core.entity_registry
    availability: >-
      {{ value is defined and value|regex_match('^\s*\{') }}

# ══ REQUIRED - Count of unavailable entities ══
template:
  - sensor:
      - name: "Unavailable Entities"
        unique_id: "unavailable_entities_v2"
        icon: "{{ iif(states(this.entity_id)|int(0) > 0, 'mdi:alert-circle', 'mdi:check-circle') }}"
        state_class: measurement
        unit_of_measurement: "entities"
        state: >
          {% set entities = state_attr('group.unavailable_entities', 'entity_id') %}
          {{ (entities or []) | count }}
        attributes:
          upstream_sources: >
            {{ ['group.unavailable_entities'] | tojson }}
          tier: "μ"
          canonical_tier: "diagnostics"
          type: "monitor"
          diagnostic_type: "unavailable_state_count"
          role: "availability_monitor"
          module: "state_engine"
          subsystem: "athena"
          area_id: "ha_system"
          canonical_id: "unavailable_entities_μ"
          description: "Counts the number of entities currently in an 'unavailable' state from a predefined group"
          data_quality: "runtime_observed"

# ══ REQUIRED - Group of individually ignored entities ══
group:
  ignored_entities:
    entities:
      - number.bedroom_accent_alpha_effect_speed
      - number.bedroom_desk_alpha_effect_speed
      - number.bedroom_desk_lightstrip_alpha_effect_speed
      - number.bedroom_desk_wall_alpha_effect_speed
      - number.bedroom_entrance_alpha_effect_speed
      - number.bedroom_hifi_accent_alpha_effect_speed
      - number.bedroom_main_alpha_effect_speed
      - number.bedroom_mirror_lightstrip_alpha_effect_speed
      - number.bedroom_nightstand_left_alpha_effect_speed
      - number.bedroom_nightstand_right_alpha_effect_speed
      - number.bedroom_ottoman_lightstrip_alpha_effect_speed
      - number.bedroom_wall_alpha_effect_speed
      - number.bedroom_wardrobe_lightstrip_alpha_effect_speed

# ══ REQUIRED - Create the monitored entities group and update once per minute. ══

# ══ OPTION A: Helpers & meta exclusions for entities that don't have meaningful "availability". ══
# {% set ignored_domains = [
#   'input_button','input_boolean','input_datetime','input_number','input_select','input_text',
#   'button','conversation','event','group','image','image_processing',
#   'remote','scene','script','stt','tts','update','zone'
# ] %}

# ══ OPTION B: Adds domains that frequently churn or don’t add value to an “unavailable” roll‑up. ══
# {% set ignored_domains = [
#    'button','conversation','event','group','image','image_processing',
#    'input_button','input_boolean','input_datetime','input_number','input_select','input_text',
#    'remote','scene','script','stt','tts','update','zone',
#    'camera','weather','media_player'
#  ] %}
automation:
  - id: "update_unavailable_entities_group"
    alias: "Update Unavailable Entities Group"
    description: "Update unavailable entities group."
    mode: single
    max_exceeded: silent
    trigger:
      - platform: event
        event_type: call_service
        event_data:
          domain: group
          service: reload
      - platform: time_pattern
        minutes: "/1"
    action:
      - action: group.set
        data:
          object_id: unavailable_entities
          entities: >
            {% set ignore_seconds = 60 %}
            {% set ignore_label = 'ignored' %}
            {% set ignored_domains = [
              'button','conversation','event','group','image','image_processing',
              'input_button','input_boolean','input_datetime','input_number','input_select','input_text',
              'remote','scene','script','stt','tts','update','zone'] %}
            {% set ignore_ts = (now().timestamp() - ignore_seconds) | as_datetime %}
            {% set disabled_device_entities = state_attr('sensor.disabled_device_entities', 'entities') | default([], true) %}
            {% set ignored_devices = label_devices(ignore_label | lower) %}
            {% set ignored_device_entities = namespace(value=[]) %}
            {% for device in ignored_devices %}
              {% set ignored_device_entities.value = ignored_device_entities.value + device_entities(device) %}
            {% endfor %}
            {{ states
                | rejectattr('domain', 'in', ignored_domains)
                | rejectattr('entity_id', 'in', disabled_device_entities)
                | rejectattr('entity_id', 'in', (state_attr('group.ignored_entities', 'entity_id') or []))
                | rejectattr('entity_id', 'in', ['group.unavailable_entities', 'group.ignored_entities'])
                | rejectattr('entity_id', 'in', ignored_device_entities.value)
                | rejectattr('entity_id', 'in', label_entities(ignore_label | lower))
                | rejectattr('entity_id', 'search', '_effect_speed$|^sensor\.evert_health_biometrics_')
                | rejectattr('last_changed', 'ge', ignore_ts)
                | selectattr('state', 'in', ['unknown', 'unavailable'])
                | map(attribute='entity_id') | list | unique | sort }}

  - id: "unavailable_entities_notification"
    alias: "Unavailable Entities Notification"
    description: "Create persistent notification if unavailable entities, dismiss if none."
    mode: restart
    trigger:
      - platform: state
        entity_id: group.unavailable_entities
        attribute: entity_id
        to: ~
        for: "00:00:05"
    condition:
      - condition: template
        alias: "Sensor state is a valid numerical value"
        value_template: "{{ is_number(states('sensor.unavailable_entities')) }}"
    action:
      - if:
          - condition: numeric_state
            entity_id: sensor.unavailable_entities
            below: 1
        then:
          - action: persistent_notification.dismiss
            data:
              notification_id: unavailable_entities
        else:
          - action: persistent_notification.create
            data:
              notification_id: unavailable_entities
              title: "Unavailable Entities"
              message: "{{ state_attr('group.unavailable_entities', 'entity_id') | join('\n') }}"
