# ════════════════════════════════════════════════════════════════════════
# ▶ TTS-GATE PACKAGE (SQL)  •  SQLite Database Storage ◀
# Advanced approach using SQL sensor integration for persistence
# Tier: σ  •  Domain: tts  •  Created: 2025-10-10
# ════════════════════════════════════════════════════════════════════════

# SQL sensor to check TTS gate status
sensor:
  - platform: sql
    db_url: "sqlite:////config/tts_gate.db"
    queries:
      - name: "TTS Gate Status"
        query: >-
          SELECT 
            key,
            last_timestamp,
            count,
            (strftime('%s', 'now') - last_timestamp) as seconds_since_last
          FROM tts_gates 
          ORDER BY last_timestamp DESC
          LIMIT 10
        column: "key"

# Database initialization script
script:
  tts_gate_init_db:
    alias: "TTS Gate - Initialize Database"
    description: "Create TTS gate database and table if not exists"
    sequence:
      - action: shell_command.tts_gate_init
        
  tts_gate_sql:
    alias: "TTS – Gate/Throttle (SQL)"
    description: "TTS gating using SQLite database for persistence"
    mode: parallel
    max: 10
    fields:
      key:
        name: Key
        description: "Unique key (e.g., ha_startup, fridge_left_open)"
        required: true
        selector: { text: { multiline: false } }
      message:
        name: Message
        description: "What to say"
        required: true
        selector: { text: { multiline: true } }
      media_player:
        name: Media player
        description: "Media player to play on"
        required: true
        selector: { entity: { domain: media_player } }
      tts_entity:
        name: TTS engine
        description: "TTS entity to use"
        required: true
        selector: { entity: { domain: tts } }
      volume:
        name: Volume
        description: "Volume level (0..1)"
        default: 0.5
        selector: { number: { min: 0, max: 1, step: 0.05, mode: slider } }
      language:
        name: Language
        description: "TTS language code (e.g., en, en-ca)"
        default: en
        selector: { text: { multiline: false } }
      cooldown_sec:
        name: Cooldown (seconds)
        description: "Within this window, repeats are limited"
        default: 1800
        selector: { number: { min: 0, max: 86400, step: 10, mode: slider } }
      max_repeats:
        name: Max repeats inside cooldown
        description: "Extra repeats allowed within the cooldown window"
        default: 1
        selector: { number: { min: 0, max: 10, step: 1 } }
    sequence:
      # Check current status via shell command
      - action: shell_command.tts_gate_check
        data:
          key: "{{ key }}"
          cooldown: "{{ cooldown_sec }}"
          max_repeats: "{{ max_repeats }}"
      # The shell command sets input_boolean.tts_gate_allow based on SQL check
      - delay:
          milliseconds: 100
      - choose:
          - conditions: "{{ is_state('input_boolean.tts_gate_allow', 'on') }}"
            sequence:
              - action: media_player.volume_set
                target:
                  entity_id: "{{ media_player }}"
                data:
                  volume_level: "{{ volume }}"
              - action: tts.speak
                target:
                  entity_id: "{{ tts_entity }}"
                data:
                  cache: true
                  media_player_entity_id: "{{ media_player }}"
                  message: "{{ message }}"
                  language: "{{ language }}"
              - action: shell_command.tts_gate_update
                data:
                  key: "{{ key }}"

# Required helper entities for SQL approach
input_boolean:
  tts_gate_allow:
    name: "TTS Gate Allow Flag"
    initial: false

# Shell commands for database operations
shell_command:
  tts_gate_init: |
    sqlite3 /config/tts_gate.db "CREATE TABLE IF NOT EXISTS tts_gates (
      key TEXT PRIMARY KEY,
      last_timestamp INTEGER,
      count INTEGER,
      created_at INTEGER DEFAULT (strftime('%s', 'now'))
    );"
    
  tts_gate_check: |
    #!/bin/bash
    KEY="{{ key }}"
    COOLDOWN="{{ cooldown }}"
    MAX_REPEATS="{{ max_repeats }}"
    NOW=$(date +%s)
    
    # Check current entry
    RESULT=$(sqlite3 /config/tts_gate.db "SELECT last_timestamp, count FROM tts_gates WHERE key='$KEY';" 2>/dev/null || echo "")
    
    if [ -z "$RESULT" ]; then
      # No entry exists - allow
      echo "on" > /tmp/tts_gate_allow
    else
      LAST_TS=$(echo "$RESULT" | cut -d'|' -f1)
      COUNT=$(echo "$RESULT" | cut -d'|' -f2)
      ELAPSED=$((NOW - LAST_TS))
      
      if [ $ELAPSED -ge $COOLDOWN ]; then
        # Outside cooldown window - allow and reset
        echo "on" > /tmp/tts_gate_allow
      elif [ $COUNT -lt $MAX_REPEATS ]; then
        # Within cooldown but under repeat limit - allow
        echo "on" > /tmp/tts_gate_allow
      else
        # Within cooldown and over repeat limit - deny
        echo "off" > /tmp/tts_gate_allow
      fi
    fi
    
    # Set the input_boolean
    ALLOW=$(cat /tmp/tts_gate_allow)
    curl -X POST -H "Authorization: Bearer $SUPERVISOR_TOKEN" \
         -H "Content-Type: application/json" \
         -d "{\"entity_id\": \"input_boolean.tts_gate_allow\", \"state\": \"$ALLOW\"}" \
         http://supervisor/core/api/states/input_boolean.tts_gate_allow
    
  tts_gate_update: |
    #!/bin/bash
    KEY="{{ key }}"
    NOW=$(date +%s)
    
    # Get current count for increment logic
    CURRENT=$(sqlite3 /config/tts_gate.db "SELECT last_timestamp, count FROM tts_gates WHERE key='$KEY';" 2>/dev/null || echo "")
    
    if [ -z "$CURRENT" ]; then
      # Insert new record
      sqlite3 /config/tts_gate.db "INSERT OR REPLACE INTO tts_gates (key, last_timestamp, count) VALUES ('$KEY', $NOW, 1);"
    else
      LAST_TS=$(echo "$CURRENT" | cut -d'|' -f1)
      OLD_COUNT=$(echo "$CURRENT" | cut -d'|' -f2)
      ELAPSED=$((NOW - LAST_TS))
      
      if [ $ELAPSED -ge {{ cooldown_sec | default(1800) }} ]; then
        # Reset count
        NEW_COUNT=1
      else
        # Increment count
        NEW_COUNT=$((OLD_COUNT + 1))
      fi
      
      sqlite3 /config/tts_gate.db "UPDATE tts_gates SET last_timestamp=$NOW, count=$NEW_COUNT WHERE key='$KEY';"
    fi