# Operational topology configuration for LLM assistants
# Access patterns: prefer ./workspace_ops_export.yaml; fallback to /config/hestia/core/config/workspace_ops_export.yaml
# Discovery: `git ls-files workspace_ops_export.yaml` or see README.md reference
# Versioning: update via PR; includes last_updated field for staleness detection
# Remote topology policy: see ADR-0019 (GitHub ⇄ NAS ⇄ Local topology & mirror flows)
last_updated: "2025-09-28T11:30:00Z"

workspaces:
  - name: "HA Config"
    purpose: "config"
    default_branch: "main"
    branch_model: "trunk"
    remotes:
      primary_push: "ssh://gituser@192.168.0.104/volume1/git-mirrors/ha-config.git"
      additional:
        - name: "origin"
          url: "ssh://gituser@192.168.0.104/volume1/git-mirrors/ha-config.git"
          role: "push"
          push_refspecs: ["+refs/heads/main:refs/heads/main", "+refs/tags/*:refs/tags/*"]
        - name: "tailnet"
          url: "ssh://gituser@100.93.61.53/volume1/git-mirrors/ha-config.git"
          role: "fetch-only"
          push_refspecs: []
    network:
      lan_ip: "192.168.0.104"
      tailnet_ip: "100.93.61.53"
      synology_git_shell_wrapped: true
      nas_hostnames: ["ds220plus.reverse-beta.ts.net", "100.93.61.53"]
    governance:
      protected_branches: ["main"]
      pr_checks_required: ["hardcoded-ha-guard"]
      commit_signing_required: false
    files:
      expects_large_binaries: false
      git_lfs_needed: false
      allows_symlinks: false
    lfs:
      pinned_to: "none"
      lfs_url: "-"
      track_patterns: []
    ci_cd:
      platform: "github-actions"
      workflows:
        - name: "hardcoded-ha-guard"
          path: ".github/workflows/hardcoded-ha-guard.yml"
    hooks:
      pre_commit:
        enabled: true
        runs: ["hestia/tools/utils/validators/scan_hardcoded_ha.sh"]
    mirror_policy:
      nas_path: "/volume1/git-mirrors/ha-config.git"
      push_refs: ["main", "tags"]
      runner: "self-hosted-lan"
      adr_reference: "ADR-0019"  # Remote topology & mirror policy
    env_template:
      path: ".env.sample"
      vars:
        HA_MOUNT: "${HA_MOUNT:-$HOME/hass}"
        HA_MOUNT_OPERATOR: "/Volumes/HA"
    vscode_samples:
      paths: [".vscode-configs/config-lean.sample.code-workspace"]
    required_secrets: []
    common_commands:
      list:
        - desc: "Validate no hard-coded /n/ha outside docs"
          cmd: "bash hestia/tools/utils/validators/scan_hardcoded_ha.sh"
        - desc: "Push main + tags to NAS mirror"
          cmd: "git push origin main --tags"
    troubleshooting:
      entries:
        - symptom: "ssh: Could not resolve hostname ds220plus..."
          cause: "Tailnet DNS/host offline or Tailscale not running"
          fix: "Use Tailnet IP (100.93.61.53) or ensure Tailscale is up and host online"
        - symptom: "fatal: git package does not support customized git-shell-commands"
          cause: "Synology git-shell wrapper rejects remote shell commands"
          fix: "Push to a bare repo path only; avoid invoking remote shell commands; verify repo path & permissions"
    notes: "ADR-0016 references workspace sample; .vscode-configs/README explains usage. Tailnet remote is fetch-only by policy."

  - name: "HA BB-8 Add-on"
    purpose: "addon"
    default_branch: "main"
    branch_model: "trunk"
    remotes:
      primary_push: "ssh://gituser@ds220plus.reverse-beta.ts.net/volume1/git-mirrors/ha-config.git"
      additional:
        - name: "origin"
          url: "ssh://gituser@ds220plus.reverse-beta.ts.net/volume1/git-mirrors/ha-config.git"
          role: "push"
          push_refspecs: ["+refs/heads/main:refs/heads/main", "+refs/tags/*:refs/tags/*"]
        # Optional GitHub remote to add via setup steps (kept out of current state to avoid assumptions)
        # - name: "github"
        #   url: "https://github.com/e-app-404/ha-bb8-addon"
        #   role: "push"
        #   push_refspecs: ["+refs/heads/*:refs/heads/*", "+refs/tags/*:refs/tags/*"]
    network:
      lan_ip: "192.168.0.0/24"
      tailnet_ip: "-"
      synology_git_shell_wrapped: true
      nas_hostnames: ["ds220plus.reverse-beta.ts.net"]
    governance:
      protected_branches: ["main"]
      pr_checks_required: ["lint", "tests", "guardrails/index-regeneration", "guard-size-symlinks"]
      commit_signing_required: false
    files:
      expects_large_binaries: false
      git_lfs_needed: false
      allows_symlinks: false
    lfs:
      pinned_to: "none"
      lfs_url: "-"
      track_patterns: []
    ci_cd:
      platform: "github-actions"
      workflows:
        - name: "guard-size-symlinks"
          path: ".github/workflows/guard-size-symlinks.yml"
    hooks:
      pre_commit:
        enabled: true
        runs: ["ops/validators/guard_size_symlinks.sh"]
    mirror_policy:
      nas_path: "/volume1/git-mirrors/ha-config.git"
      push_refs: ["main", "tags"]
      runner: "-"
      adr_reference: "ADR-0019"  # Remote topology & mirror policy
    env_template:
      path: "-"
      vars: {}
    vscode_samples:
      paths: []
    required_secrets: []
    common_commands:
      list:
        - desc: "Validate size/symlink guard locally"
          cmd: "bash ops/validators/guard_size_symlinks.sh"
        - desc: "Add GitHub remote (optional)"
          cmd: "git remote add github https://github.com/e-app-404/ha-bb8-addon 2>/dev/null || git remote set-url github https://github.com/e-app-404/ha-bb8-addon"
    troubleshooting:
      entries:
        - symptom: "Commit blocked: tracked symlink detected"
          cause: "Pre-commit guard caught a symlink in index"
          fix: "Remove symlink or .gitignore it; commit regular files only"
        - symptom: "PR not created via gh"
          cause: "GitHub CLI not authenticated or remote not pointing to GitHub"
          fix: "Run `gh auth login` and ensure a `github` remote exists"
    notes: "`origin` points to HA Config NAS mirror for backup only; PRs should target a GitHub remote when added. Guard blocks tracked symlinks and >50MB files."

  - name: "Omega Registry"
    purpose: "addon+registry"
    default_branch: "main"
    branch_model: "trunk"
    remotes:
      primary_push: "https://github.com/e-app-404/omega_registry.git"
      additional:
        - name: "origin"
          url: "ssh://gituser@ds220plus.reverse-beta.ts.net/volume1/git/omega_registry.git"
          role: "mirror"
          push_refspecs: ["+refs/heads/main:refs/heads/main", "+refs/tags/*:refs/tags/*"]
        - name: "github"
          url: "https://github.com/e-app-404/omega_registry.git"
          role: "push"
          push_refspecs: ["+refs/heads/*:refs/heads/*", "+refs/tags/*:refs/tags/*"]
    network:
      lan_ip: "192.168.0.104"
      tailnet_ip: "100.x.y.z"
      synology_git_shell_wrapped: true
      nas_hostnames: ["ds220plus.reverse-beta.ts.net", "100.x.y.z"]
    governance:
      protected_branches: ["main", "chore/restructure-to-addon"]
      pr_checks_required: ["validate-adrs", "ruff"]
      commit_signing_required: false
    files:
      expects_large_binaries: true
      git_lfs_needed: true
      allows_symlinks: false
    lfs:
      pinned_to: "github"
      lfs_url: "https://github.com/e-app-404/omega_registry.git/info/lfs"
      track_patterns: ["*.json", "*.jsonl", "*.bin", "*.tar.gz", "*.zip"]
    ci_cd:
      platform: "github-actions"
      workflows:
        - name: "mirror-to-nas"
          path: ".github/workflows/mirror-to-nas.yml"
          gated_secret: "NAS_SSH_KEY"
        - name: "validate-adrs"
          path: ".github/workflows/validate-adrs.yml"
    hooks:
      pre_commit:
        enabled: false
        runs: []
    mirror_policy:
      nas_path: "/volume1/git/omega_registry.git"
      push_refs: ["main", "tags"]
      runner: "github-hosted"
      adr_reference: "ADR-0019"  # Remote topology & mirror policy
    env_template:
      path: "-"
      vars: {}
    vscode_samples:
      paths: []
    required_secrets: ["NAS_SSH_KEY"]
    common_commands:
      list:
        - desc: "Create safety bundle"
          cmd: "git bundle create ../omega_registry-before-lfs-pin.bundle --all"
        - desc: "Push feature branch to GitHub"
          cmd: "git push -u github $(git rev-parse --abbrev-ref HEAD)"
    troubleshooting:
      entries:
        - symptom: "GitHub push rejected (GH013: push protection: secrets)"
          cause: "Secret-like strings detected in commit history/files"
          fix: "Remove/redact tokens or create a clean branch containing only non-sensitive changes; then push"
        - symptom: "Mirror job times out"
          cause: "NAS unreachable from GitHub-hosted runners"
          fix: "Use self-hosted runner on LAN/Tailnet or expose NAS over reachable address; ensure NAS_SSH_KEY is configured"
    notes: "LFS pinned to GitHub; NAS is a mirror via workflow gated by NAS_SSH_KEY."

embed_files:
  # --- BB-8 Add-on & (optionally) Omega: size/symlink guard ---
  - path: "ops/validators/guard_size_symlinks.sh"
    mode: "755"
    content: |
      #!/usr/bin/env bash
      set -euo pipefail
      thresh=$((50*1024*1024))
      mode="local"; [ "${CI:-}" = "true" ] && mode="ci"
      fail(){ printf '%s\n' "$*" >&2; exit 1; }

      # Detect tracked symlinks (index-mode)
      BAD_SYMS=$(git ls-files -s | awk '$1 ~ /^120/ {print $4}')
      if [ -n "${BAD_SYMS}" ]; then
        fail "ERROR: symlinks tracked in Git:\n${BAD_SYMS}"
      fi

      # Build diff command (NUL-delimited)
      declare -a DIFF_CMD
      if [ "$mode" = "local" ]; then
        DIFF_CMD=(git diff --cached --name-only --diff-filter=AM -z)
      else
        if [ -n "${GITHUB_BASE_REF:-}" ]; then
          git fetch origin "$GITHUB_BASE_REF" --depth=1 || true
          DIFF_CMD=(git diff --name-only "origin/${GITHUB_BASE_REF}"...HEAD -z)
        else
          git fetch origin main --depth=1 || true
          DIFF_CMD=(git diff --name-only origin/main...HEAD -z)
        fi
      fi

      tmpf=$(mktemp)
      if ! "${DIFF_CMD[@]}" >"$tmpf" 2>/dev/null || [ ! -s "$tmpf" ]; then
        src_cmd=(git ls-files -z)
      else
        src_cmd=(cat "$tmpf")
      fi

      ok=1
      # shellcheck disable=SC2094
      while IFS= read -r -d '' f; do
        [ -f "$f" ] || continue
        sz=$(wc -c < "$f")
        if [ "$sz" -gt "$thresh" ]; then
          printf 'ERROR: Large file (>50MB): %s (%d bytes)\n' "$f" "$sz" >&2
          ok=0
        fi
      done < <("${src_cmd[@]}")

      rm -f "$tmpf"
      [ "$ok" -eq 1 ] && echo "OK: size/symlink guard passed" || exit 3

  - path: ".github/workflows/guard-size-symlinks.yml"
    content: |
      name: Guard size/symlinks
      on: [push, pull_request]
      jobs:
        guard:
          runs-on: ubuntu-latest
          steps:
            - uses: actions/checkout@v4
              with:
                fetch-depth: 0
                fetch-tags: true
            - name: Run size/symlink validator
              run: bash ops/validators/guard_size_symlinks.sh

  # --- Omega Registry only: NAS mirror workflow + LFS pin ---
  - path: ".github/workflows/mirror-to-nas.yml"
    content: |
      name: Mirror main + tags to NAS
      on:
        push:
          branches: [ main ]
        workflow_dispatch: {}
      jobs:
        mirror:
          runs-on: ubuntu-latest
          steps:
            - uses: actions/checkout@v4
              with:
                fetch-depth: 0
                fetch-tags: true
            - name: Load NAS deploy key
              if: ${{ secrets.NAS_SSH_KEY }}
              uses: webfactory/ssh-agent@v0.8.0
              with:
                ssh-private-key: ${{ secrets.NAS_SSH_KEY }}
            - name: Preflight: check NAS reachability
              if: ${{ secrets.NAS_SSH_KEY }}
              env:
                GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=accept-new -o ConnectTimeout=10"
              run: |
                ssh -o BatchMode=yes gituser@ds220plus.reverse-beta.ts.net 'echo OK_NAS'
            - name: Push to NAS
              if: ${{ secrets.NAS_SSH_KEY }}
              env:
                NAS_URL: "ssh://gituser@ds220plus.reverse-beta.ts.net/volume1/git/omega_registry.git"
                GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=accept-new -o ConnectTimeout=10"
              run: |
                git remote add nas "$NAS_URL" || true
                git push nas main --tags
                echo "Pushed main + tags to NAS"
                git ls-remote nas refs/heads/main refs/tags/* | sed -n '1,50p' || true
            - name: Note if disabled
              if: ${{ !secrets.NAS_SSH_KEY }}
              run: echo "NAS mirror disabled (missing NAS_SSH_KEY secret)."

  - path: ".lfsconfig"
    content: |
      [lfs]
        url = https://github.com/e-app-404/omega_registry.git/info/lfs

  - path: ".gitattributes"
    content: |
      # ----- BEGIN LFS DEFAULTS (Omega Registry) -----
      *.json filter=lfs diff=lfs merge=lfs -text
      *.jsonl filter=lfs diff=lfs merge=lfs -text
      *.bin filter=lfs diff=lfs merge=lfs -text
      *.tar.gz filter=lfs diff=lfs merge=lfs -text
      *.zip filter=lfs diff=lfs merge=lfs -text
      # ----- END LFS DEFAULTS -----

  # --- HA Config only: hard-coded /n/ha guard + template env ---
  - path: "hestia/tools/utils/validators/scan_hardcoded_ha.sh"
    mode: "755"
    content: |
      #!/usr/bin/env bash
      set -euo pipefail
      have_rg() { command -v rg >/dev/null 2>&1; }
      if have_rg; then
        rg -n --hidden --glob '!.git' --glob '!hestia/docs/**' \
           --glob '!**/*.png' --glob '!**/*.jpg' --glob '!**/*.jpeg' \
           --glob '!**/*.gif' --glob '!**/*.svg' \
           '/n/ha' . \
           && { echo "ERROR: hard-coded /n/ha found outside docs"; exit 1; } \
           || { echo "OK: no hard-coded /n/ha outside docs"; }
      else
        MATCHES=$(grep -R -n --exclude-dir=".git" --exclude-dir="hestia/docs" \
          --exclude="*.png" --exclude="*.jpg" --exclude="*.jpeg" --exclude="*.gif" --exclude="*.svg" \
          '/n/ha' . || true)
        if [ -n "$MATCHES" ]; then echo "$MATCHES"; echo "ERROR: hard-coded /n/ha found outside docs"; exit 1; fi
        echo "OK: no hard-coded /n/ha outside docs"
      fi

  - path: ".github/workflows/hardcoded-ha-guard.yml"
    content: |
      name: Hardcoded /n/ha guard
      on: [push, pull_request]
      jobs:
        scan:
          runs-on: ubuntu-latest
          steps:
            - uses: actions/checkout@v4
              with:
                fetch-depth: 0
            - name: Run validator
              run: bash hestia/tools/utils/validators/scan_hardcoded_ha.sh

  - path: ".env.sample"
    content: |
      # Copy to .env and adjust locally as needed.
      export HA_MOUNT="${HA_MOUNT:-$HOME/hass}"
      export HA_MOUNT_OPERATOR="/Volumes/HA"
      export CONFIG_MOUNT="$HA_MOUNT/config"
      export DIR_HESTIA="$CONFIG_MOUNT/hestia"
      export DIR_PACKAGES="$CONFIG_MOUNT/packages"
      export DIR_DOMAINS="$CONFIG_MOUNT/domain"

  - path: ".vscode-configs/config-lean.sample.code-workspace"
    content: |
      {
        "folders": [ { "path": "." } ],
        "settings": {
          "python.defaultInterpreterPath": "${workspaceFolder}/.venv/bin/python",
          "git.repositoryScanIgnoredFolders": ["${workspaceFolder}/share"]
        }
      }

  - path: ".vscode-configs/README.md"
    content: |
      # VS Code samples
      Use `config-lean.sample.code-workspace` by opening it in VS Code and saving a local copy as `.vscode/config-lean.code-workspace`. Keep editor-specific settings untracked.

idempotent_setup:
  - workspace: "HA Config"
    steps: |
      set -euo pipefail
      git rev-parse --is-inside-work-tree >/dev/null
      cd "$(git rev-parse --show-toplevel)"
      git switch -c chore/parameterize-ha-mount || git switch chore/parameterize-ha-mount
      mkdir -p hestia/tools/utils/validators .github/workflows .vscode-configs
      # Create validator script
      cat > hestia/tools/utils/validators/scan_hardcoded_ha.sh <<'SH'
      #!/usr/bin/env bash
      set -euo pipefail
      have_rg() { command -v rg >/dev/null 2>&1; }
      if have_rg; then
        rg -n --hidden --glob '!.git' --glob '!hestia/docs/**' --glob '!**/*.png' --glob '!**/*.jpg' --glob '!**/*.jpeg' --glob '!**/*.gif' --glob '!**/*.svg' '/n/ha' . \
        && { echo "ERROR: hard-coded /n/ha found outside docs"; exit 1; } \
        || { echo "OK: no hard-coded /n/ha outside docs"; }
      else
        MATCHES=$(grep -R -n --exclude-dir=".git" --exclude-dir="hestia/docs" --exclude="*.png" --exclude="*.jpg" --exclude="*.jpeg" --exclude="*.gif" --exclude="*.svg" '/n/ha' . || true)
        if [ -n "$MATCHES" ]; then echo "$MATCHES"; echo "ERROR: hard-coded /n/ha found outside docs"; exit 1; fi
        echo "OK: no hard-coded /n/ha outside docs"
      fi
      SH
      chmod +x hestia/tools/utils/validators/scan_hardcoded_ha.sh
      cat > .github/workflows/hardcoded-ha-guard.yml <<'YML'
      name: Hardcoded /n/ha guard
      on: [push, pull_request]
      jobs:
        scan:
          runs-on: ubuntu-latest
          steps:
            - uses: actions/checkout@v4
              with: { fetch-depth: 0 }
            - run: bash hestia/tools/utils/validators/scan_hardcoded_ha.sh
      YML
      cat > .env.sample <<'ENV'
      export HA_MOUNT="${HA_MOUNT:-$HOME/hass}"
      export HA_MOUNT_OPERATOR="/Volumes/HA"
      export CONFIG_MOUNT="$HA_MOUNT/config"
      export DIR_HESTIA="$CONFIG_MOUNT/hestia"
      export DIR_PACKAGES="$CONFIG_MOUNT/packages"
      export DIR_DOMAINS="$CONFIG_MOUNT/domain"
      ENV
      git add hestia/tools/utils/validators/scan_hardcoded_ha.sh .github/workflows/hardcoded-ha-guard.yml .env.sample || true
      git commit -m "chore(guard): add hard-coded /n/ha validator + CI" || true
      # Ensure tailnet remote is fetch-only
      git remote add tailnet ssh://gituser@100.93.61.53/volume1/git-mirrors/ha-config.git 2>/dev/null || true
      git remote set-url --push tailnet no_push://disabled 2>/dev/null || true

  - workspace: "HA BB-8 Add-on"
    steps: |
      set -euo pipefail
      git rev-parse --is-inside-work-tree >/dev/null
      cd "$(git rev-parse --show-toplevel)"
      git switch -c chore/guard-size-symlinks || git switch chore/guard-size-symlinks
      mkdir -p ops/validators .github/workflows
      # Validator (explicitly write)
      cat > ops/validators/guard_size_symlinks.sh <<'SH'
      #!/usr/bin/env bash
      set -euo pipefail
      thresh=$((50*1024*1024)); mode="local"; [ "${CI:-}" = "true" ] && mode="ci"
      BAD_SYMS=$(git ls-files -s | awk '$1 ~ /^120/ {print $4}'); [ -n "$BAD_SYMS" ] && { echo -e "ERROR: symlinks tracked in Git:\n$BAD_SYMS" >&2; exit 1; }
      if [ "$mode" = "local" ]; then DIFF_CMD=(git diff --cached --name-only --diff-filter=AM -z); else if [ -n "${GITHUB_BASE_REF:-}" ]; then git fetch origin "$GITHUB_BASE_REF" --depth=1 || true; DIFF_CMD=(git diff --name-only "origin/${GITHUB_BASE_REF}"...HEAD -z); else git fetch origin main --depth=1 || true; DIFF_CMD=(git diff --name-only origin/main...HEAD -z); fi; fi
      tmpf=$(mktemp); if ! "${DIFF_CMD[@]}" >"$tmpf" 2>/dev/null || [ ! -s "$tmpf" ]; then src_cmd=(git ls-files -z); else src_cmd=(cat "$tmpf"); fi
      ok=1; while IFS= read -r -d '' f; do [ -f "$f" ] || continue; sz=$(wc -c < "$f"); [ "$sz" -gt $((50*1024*1024)) ] && { echo "ERROR: Large file (>50MB): $f ($sz bytes)" >&2; ok=0; }; done < <("${src_cmd[@]}"); rm -f "$tmpf"; [ "$ok" -eq 1 ] && echo "OK: size/symlink guard passed" || exit 3
      SH
      chmod +x ops/validators/guard_size_symlinks.sh
      cat > .github/workflows/guard-size-symlinks.yml <<'YML'
      name: Guard size/symlinks
      on: [push, pull_request]
      jobs:
        guard:
          runs-on: ubuntu-latest
          steps:
            - uses: actions/checkout@v4
              with: { fetch-depth: 0, fetch-tags: true }
            - run: bash ops/validators/guard_size_symlinks.sh
      YML
      # Install local pre-commit (backup existing)
      mkdir -p .git/hooks
      if [ -f .git/hooks/pre-commit ]; then mv .git/hooks/pre-commit ".git/hooks/pre-commit.bak.$(date +%s)"; fi
      printf '#!/usr/bin/env bash\nset -e\nbash ops/validators/guard_size_symlinks.sh\n' > .git/hooks/pre-commit
      chmod +x .git/hooks/pre-commit
      git add ops/validators/guard_size_symlinks.sh .github/workflows/guard-size-symlinks.yml || true
      git commit -m "guardrails: size/symlink pre-commit + CI" || true
      # Optionally add GitHub remote (no push if unreachable)
      git remote add github https://github.com/e-app-404/ha-bb8-addon 2>/dev/null || git remote set-url github https://github.com/e-app-404/ha-bb8-addon

  - workspace: "Omega Registry"
    steps: |
      set -euo pipefail
      git rev-parse --is-inside-work-tree >/dev/null
      cd "$(git rev-parse --show-toplevel)"
      git bundle create ../omega_registry-before-lfs-pin.bundle --all || true
      BR=chore/lfs-pin-and-mirror
      git show-ref --quiet refs/heads/$BR && git switch "$BR" || git switch -c "$BR"
      git lfs install --local
      mkdir -p .github/workflows
      cat > .lfsconfig <<'CFG'
      [lfs]
        url = https://github.com/e-app-404/omega_registry.git/info/lfs
      CFG
      if ! grep -q "BEGIN LFS DEFAULTS" .gitattributes 2>/dev/null; then
        cat >> .gitattributes <<'ATTR'
      # ----- BEGIN LFS DEFAULTS (Omega Registry) -----
      *.json filter=lfs diff=lfs merge=lfs -text
      *.jsonl filter=lfs diff=lfs merge=lfs -text
      *.bin filter=lfs diff=lfs merge=lfs -text
      *.tar.gz filter=lfs diff=lfs merge=lfs -text
      *.zip filter=lfs diff=lfs merge=lfs -text
      # ----- END LFS DEFAULTS -----
      ATTR
      fi
      cat > .github/workflows/mirror-to-nas.yml <<'YML'
      name: Mirror main + tags to NAS
      on: { push: { branches: [ main ] }, workflow_dispatch: {} }
      jobs:
        mirror:
          runs-on: ubuntu-latest
          steps:
            - uses: actions/checkout@v4
              with: { fetch-depth: 0, fetch-tags: true }
            - if: ${{ secrets.NAS_SSH_KEY }}
              uses: webfactory/ssh-agent@v0.8.0
              with: { ssh-private-key: ${{ secrets.NAS_SSH_KEY }} }
            - name: Preflight: check NAS reachability
              if: ${{ secrets.NAS_SSH_KEY }}
              env: { GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=accept-new -o ConnectTimeout=10" }
              run: ssh -o BatchMode=yes gituser@ds220plus.reverse-beta.ts.net 'echo OK_NAS'
            - name: Push to NAS
              if: ${{ secrets.NAS_SSH_KEY }}
              env:
                NAS_URL: ssh://gituser@ds220plus.reverse-beta.ts.net/volume1/git/omega_registry.git
                GIT_SSH_COMMAND: ssh -o StrictHostKeyChecking=accept-new -o ConnectTimeout=10
              run: |
                git remote add nas "$NAS_URL" || true
                git push nas main --tags
                git ls-remote nas refs/heads/main refs/tags/* | sed -n '1,50p' || true
            - name: Note if disabled
              if: ${{ !secrets.NAS_SSH_KEY }}
              run: echo "NAS mirror disabled (missing NAS_SSH_KEY)."
      YML
      git add .lfsconfig .gitattributes .github/workflows/mirror-to-nas.yml || true
      if [ -n "$(git status --porcelain)" ]; then git commit -m "chore(omega): pin LFS to GitHub + NAS mirror workflow (key-gated)"; else echo "No changes"; fi
      git remote add github https://github.com/e-app-404/omega_registry.git 2>/dev/null || git remote set-url github https://github.com/e-app-404/omega_registry.git
      git remote add origin ssh://gituser@ds220plus.reverse-beta.ts.net/volume1/git/omega_registry.git 2>/dev/null || true
      git config --unset-all remote.origin.push || true
      git config --add remote.origin.push "+refs/heads/main:refs/heads/main"
      git config --add remote.origin.push "+refs/tags/*:refs/tags/*"
      if git ls-remote --exit-code github HEAD >/dev/null 2>&1; then git push -u github "$BR"; else echo "GitHub unreachable; skip push." >&2; fi

acceptance_checklist:
  - workspace: "HA Config"
    checks:
      - "git rev-parse --abbrev-ref HEAD"
      - \"git ls-files .env.sample hestia/tools/utils/validators/scan_hardcoded_ha.sh .github/workflows/hardcoded-ha-guard.yml\"
      - "bash hestia/tools/validators/scan_hardcoded_ha.sh"
      - "git remote -v | sed -n '1,50p'"
  - workspace: "HA BB-8 Add-on"
    checks:
      - "git rev-parse --abbrev-ref HEAD"
      - "git ls-files ops/validators/guard_size_symlinks.sh .github/workflows/guard-size-symlinks.yml"
      - "bash ops/validators/guard_size_symlinks.sh"
      - "[ -x .git/hooks/pre-commit ] && echo 'pre-commit installed' || echo 'missing pre-commit'"
  - workspace: "Omega Registry"
    checks:
      - "git rev-parse --abbrev-ref HEAD"
      - "git ls-files .lfsconfig .gitattributes .github/workflows/mirror-to-nas.yml"
      - "git lfs env | sed -n '1,40p'"
      - "git ls-remote github HEAD || true"

constraints:
  - "Never include secrets or private keys in files or YAML. Reference secret names only (e.g., NAS_SSH_KEY)."
  - "No destructive operations: no force-push to main, no history rewrite in these scripts."
  - "Filename-safe scanning everywhere (NUL-delimited diffs; no whitespace breakage)."
  - "CI jobs use fetch-depth: 0 and fetch-tags: true when diffs/tags are required."
  - "Tailnet hosts may be unreachable from public CI; prefer self-hosted runner for NAS mirroring if needed."
